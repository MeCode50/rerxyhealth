
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model TransactionPin
 * 
 */
export type TransactionPin = $Result.DefaultSelection<Prisma.$TransactionPinPayload>
/**
 * Model TransactionHistory
 * 
 */
export type TransactionHistory = $Result.DefaultSelection<Prisma.$TransactionHistoryPayload>
/**
 * Model Wallet
 * 
 */
export type Wallet = $Result.DefaultSelection<Prisma.$WalletPayload>
/**
 * Model Bvn
 * 
 */
export type Bvn = $Result.DefaultSelection<Prisma.$BvnPayload>
/**
 * Model SetupProfile
 * 
 */
export type SetupProfile = $Result.DefaultSelection<Prisma.$SetupProfilePayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model Doctors
 * 
 */
export type Doctors = $Result.DefaultSelection<Prisma.$DoctorsPayload>
/**
 * Model WorkingHours
 * 
 */
export type WorkingHours = $Result.DefaultSelection<Prisma.$WorkingHoursPayload>
/**
 * Model Products
 * 
 */
export type Products = $Result.DefaultSelection<Prisma.$ProductsPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model CartItem
 * 
 */
export type CartItem = $Result.DefaultSelection<Prisma.$CartItemPayload>
/**
 * Model SaveProduct
 * 
 */
export type SaveProduct = $Result.DefaultSelection<Prisma.$SaveProductPayload>
/**
 * Model DiagnosticTest
 * 
 */
export type DiagnosticTest = $Result.DefaultSelection<Prisma.$DiagnosticTestPayload>
/**
 * Model SelectedTest
 * 
 */
export type SelectedTest = $Result.DefaultSelection<Prisma.$SelectedTestPayload>
/**
 * Model ChatSessions
 * 
 */
export type ChatSessions = $Result.DefaultSelection<Prisma.$ChatSessionsPayload>
/**
 * Model ChatMessages
 * 
 */
export type ChatMessages = $Result.DefaultSelection<Prisma.$ChatMessagesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Period: {
  Morning: 'Morning',
  Evening: 'Evening'
};

export type Period = (typeof Period)[keyof typeof Period]


export const AppointmentStatus: {
  Pending: 'Pending',
  Cancelled: 'Cancelled',
  Completed: 'Completed'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const productCategory: {
  All_Product: 'All_Product',
  Drugs: 'Drugs',
  Female_Needs: 'Female_Needs',
  First_Aids_Equipment: 'First_Aids_Equipment'
};

export type productCategory = (typeof productCategory)[keyof typeof productCategory]

}

export type Period = $Enums.Period

export const Period: typeof $Enums.Period

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type productCategory = $Enums.productCategory

export const productCategory: typeof $Enums.productCategory

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.transactionPin`: Exposes CRUD operations for the **TransactionPin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionPins
    * const transactionPins = await prisma.transactionPin.findMany()
    * ```
    */
  get transactionPin(): Prisma.TransactionPinDelegate<ExtArgs>;

  /**
   * `prisma.transactionHistory`: Exposes CRUD operations for the **TransactionHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionHistories
    * const transactionHistories = await prisma.transactionHistory.findMany()
    * ```
    */
  get transactionHistory(): Prisma.TransactionHistoryDelegate<ExtArgs>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<ExtArgs>;

  /**
   * `prisma.bvn`: Exposes CRUD operations for the **Bvn** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bvns
    * const bvns = await prisma.bvn.findMany()
    * ```
    */
  get bvn(): Prisma.BvnDelegate<ExtArgs>;

  /**
   * `prisma.setupProfile`: Exposes CRUD operations for the **SetupProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SetupProfiles
    * const setupProfiles = await prisma.setupProfile.findMany()
    * ```
    */
  get setupProfile(): Prisma.SetupProfileDelegate<ExtArgs>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs>;

  /**
   * `prisma.doctors`: Exposes CRUD operations for the **Doctors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctors.findMany()
    * ```
    */
  get doctors(): Prisma.DoctorsDelegate<ExtArgs>;

  /**
   * `prisma.workingHours`: Exposes CRUD operations for the **WorkingHours** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkingHours
    * const workingHours = await prisma.workingHours.findMany()
    * ```
    */
  get workingHours(): Prisma.WorkingHoursDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **Products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.ProductsDelegate<ExtArgs>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs>;

  /**
   * `prisma.cartItem`: Exposes CRUD operations for the **CartItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartItems
    * const cartItems = await prisma.cartItem.findMany()
    * ```
    */
  get cartItem(): Prisma.CartItemDelegate<ExtArgs>;

  /**
   * `prisma.saveProduct`: Exposes CRUD operations for the **SaveProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaveProducts
    * const saveProducts = await prisma.saveProduct.findMany()
    * ```
    */
  get saveProduct(): Prisma.SaveProductDelegate<ExtArgs>;

  /**
   * `prisma.diagnosticTest`: Exposes CRUD operations for the **DiagnosticTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiagnosticTests
    * const diagnosticTests = await prisma.diagnosticTest.findMany()
    * ```
    */
  get diagnosticTest(): Prisma.DiagnosticTestDelegate<ExtArgs>;

  /**
   * `prisma.selectedTest`: Exposes CRUD operations for the **SelectedTest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SelectedTests
    * const selectedTests = await prisma.selectedTest.findMany()
    * ```
    */
  get selectedTest(): Prisma.SelectedTestDelegate<ExtArgs>;

  /**
   * `prisma.chatSessions`: Exposes CRUD operations for the **ChatSessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSessions
    * const chatSessions = await prisma.chatSessions.findMany()
    * ```
    */
  get chatSessions(): Prisma.ChatSessionsDelegate<ExtArgs>;

  /**
   * `prisma.chatMessages`: Exposes CRUD operations for the **ChatMessages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessages.findMany()
    * ```
    */
  get chatMessages(): Prisma.ChatMessagesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Address: 'Address',
    Admin: 'Admin',
    TransactionPin: 'TransactionPin',
    TransactionHistory: 'TransactionHistory',
    Wallet: 'Wallet',
    Bvn: 'Bvn',
    SetupProfile: 'SetupProfile',
    Appointment: 'Appointment',
    Doctors: 'Doctors',
    WorkingHours: 'WorkingHours',
    Products: 'Products',
    Rating: 'Rating',
    CartItem: 'CartItem',
    SaveProduct: 'SaveProduct',
    DiagnosticTest: 'DiagnosticTest',
    SelectedTest: 'SelectedTest',
    ChatSessions: 'ChatSessions',
    ChatMessages: 'ChatMessages'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'address' | 'admin' | 'transactionPin' | 'transactionHistory' | 'wallet' | 'bvn' | 'setupProfile' | 'appointment' | 'doctors' | 'workingHours' | 'products' | 'rating' | 'cartItem' | 'saveProduct' | 'diagnosticTest' | 'selectedTest' | 'chatSessions' | 'chatMessages'
      txIsolationLevel: never
    },
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UsersFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UsersAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AddressFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AddressAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AdminFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AdminAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      TransactionPin: {
        payload: Prisma.$TransactionPinPayload<ExtArgs>
        fields: Prisma.TransactionPinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionPinFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionPinFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload>
          }
          findFirst: {
            args: Prisma.TransactionPinFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionPinFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload>
          }
          findMany: {
            args: Prisma.TransactionPinFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload>[]
          }
          create: {
            args: Prisma.TransactionPinCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload>
          }
          createMany: {
            args: Prisma.TransactionPinCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransactionPinDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload>
          }
          update: {
            args: Prisma.TransactionPinUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload>
          }
          deleteMany: {
            args: Prisma.TransactionPinDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionPinUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransactionPinUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionPinPayload>
          }
          aggregate: {
            args: Prisma.TransactionPinAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransactionPin>
          }
          groupBy: {
            args: Prisma.TransactionPinGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransactionPinGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TransactionPinFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.TransactionPinAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.TransactionPinCountArgs<ExtArgs>,
            result: $Utils.Optional<TransactionPinCountAggregateOutputType> | number
          }
        }
      }
      TransactionHistory: {
        payload: Prisma.$TransactionHistoryPayload<ExtArgs>
        fields: Prisma.TransactionHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload>
          }
          findFirst: {
            args: Prisma.TransactionHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload>
          }
          findMany: {
            args: Prisma.TransactionHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload>[]
          }
          create: {
            args: Prisma.TransactionHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload>
          }
          createMany: {
            args: Prisma.TransactionHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransactionHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload>
          }
          update: {
            args: Prisma.TransactionHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload>
          }
          deleteMany: {
            args: Prisma.TransactionHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransactionHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransactionHistoryPayload>
          }
          aggregate: {
            args: Prisma.TransactionHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransactionHistory>
          }
          groupBy: {
            args: Prisma.TransactionHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransactionHistoryGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TransactionHistoryFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.TransactionHistoryAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.TransactionHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<TransactionHistoryCountAggregateOutputType> | number
          }
        }
      }
      Wallet: {
        payload: Prisma.$WalletPayload<ExtArgs>
        fields: Prisma.WalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findFirst: {
            args: Prisma.WalletFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findMany: {
            args: Prisma.WalletFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          create: {
            args: Prisma.WalletCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          createMany: {
            args: Prisma.WalletCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WalletDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          update: {
            args: Prisma.WalletUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          deleteMany: {
            args: Prisma.WalletDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WalletUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WalletUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.WalletGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.WalletFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.WalletAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.WalletCountArgs<ExtArgs>,
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      Bvn: {
        payload: Prisma.$BvnPayload<ExtArgs>
        fields: Prisma.BvnFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BvnFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BvnFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload>
          }
          findFirst: {
            args: Prisma.BvnFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BvnFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload>
          }
          findMany: {
            args: Prisma.BvnFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload>[]
          }
          create: {
            args: Prisma.BvnCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload>
          }
          createMany: {
            args: Prisma.BvnCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BvnDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload>
          }
          update: {
            args: Prisma.BvnUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload>
          }
          deleteMany: {
            args: Prisma.BvnDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BvnUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BvnUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BvnPayload>
          }
          aggregate: {
            args: Prisma.BvnAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBvn>
          }
          groupBy: {
            args: Prisma.BvnGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BvnGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BvnFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.BvnAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.BvnCountArgs<ExtArgs>,
            result: $Utils.Optional<BvnCountAggregateOutputType> | number
          }
        }
      }
      SetupProfile: {
        payload: Prisma.$SetupProfilePayload<ExtArgs>
        fields: Prisma.SetupProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SetupProfileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SetupProfileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload>
          }
          findFirst: {
            args: Prisma.SetupProfileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SetupProfileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload>
          }
          findMany: {
            args: Prisma.SetupProfileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload>[]
          }
          create: {
            args: Prisma.SetupProfileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload>
          }
          createMany: {
            args: Prisma.SetupProfileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SetupProfileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload>
          }
          update: {
            args: Prisma.SetupProfileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload>
          }
          deleteMany: {
            args: Prisma.SetupProfileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SetupProfileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SetupProfileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SetupProfilePayload>
          }
          aggregate: {
            args: Prisma.SetupProfileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSetupProfile>
          }
          groupBy: {
            args: Prisma.SetupProfileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SetupProfileGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SetupProfileFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.SetupProfileAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.SetupProfileCountArgs<ExtArgs>,
            result: $Utils.Optional<SetupProfileCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AppointmentFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AppointmentAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>,
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Doctors: {
        payload: Prisma.$DoctorsPayload<ExtArgs>
        fields: Prisma.DoctorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          findFirst: {
            args: Prisma.DoctorsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          findMany: {
            args: Prisma.DoctorsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>[]
          }
          create: {
            args: Prisma.DoctorsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          createMany: {
            args: Prisma.DoctorsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DoctorsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          update: {
            args: Prisma.DoctorsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          deleteMany: {
            args: Prisma.DoctorsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DoctorsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          aggregate: {
            args: Prisma.DoctorsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoctors>
          }
          groupBy: {
            args: Prisma.DoctorsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoctorsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DoctorsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.DoctorsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.DoctorsCountArgs<ExtArgs>,
            result: $Utils.Optional<DoctorsCountAggregateOutputType> | number
          }
        }
      }
      WorkingHours: {
        payload: Prisma.$WorkingHoursPayload<ExtArgs>
        fields: Prisma.WorkingHoursFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkingHoursFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkingHoursFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload>
          }
          findFirst: {
            args: Prisma.WorkingHoursFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkingHoursFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload>
          }
          findMany: {
            args: Prisma.WorkingHoursFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload>[]
          }
          create: {
            args: Prisma.WorkingHoursCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload>
          }
          createMany: {
            args: Prisma.WorkingHoursCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WorkingHoursDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload>
          }
          update: {
            args: Prisma.WorkingHoursUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload>
          }
          deleteMany: {
            args: Prisma.WorkingHoursDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkingHoursUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkingHoursUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkingHoursPayload>
          }
          aggregate: {
            args: Prisma.WorkingHoursAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkingHours>
          }
          groupBy: {
            args: Prisma.WorkingHoursGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkingHoursGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.WorkingHoursFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.WorkingHoursAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.WorkingHoursCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkingHoursCountAggregateOutputType> | number
          }
        }
      }
      Products: {
        payload: Prisma.$ProductsPayload<ExtArgs>
        fields: Prisma.ProductsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          findFirst: {
            args: Prisma.ProductsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          findMany: {
            args: Prisma.ProductsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>[]
          }
          create: {
            args: Prisma.ProductsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          createMany: {
            args: Prisma.ProductsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          update: {
            args: Prisma.ProductsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          deleteMany: {
            args: Prisma.ProductsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.ProductsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ProductsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RatingFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.RatingAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>,
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      CartItem: {
        payload: Prisma.$CartItemPayload<ExtArgs>
        fields: Prisma.CartItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartItemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartItemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findFirst: {
            args: Prisma.CartItemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartItemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findMany: {
            args: Prisma.CartItemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          create: {
            args: Prisma.CartItemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          createMany: {
            args: Prisma.CartItemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CartItemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          update: {
            args: Prisma.CartItemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          deleteMany: {
            args: Prisma.CartItemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CartItemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CartItemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          aggregate: {
            args: Prisma.CartItemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCartItem>
          }
          groupBy: {
            args: Prisma.CartItemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CartItemGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CartItemFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.CartItemAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.CartItemCountArgs<ExtArgs>,
            result: $Utils.Optional<CartItemCountAggregateOutputType> | number
          }
        }
      }
      SaveProduct: {
        payload: Prisma.$SaveProductPayload<ExtArgs>
        fields: Prisma.SaveProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaveProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaveProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload>
          }
          findFirst: {
            args: Prisma.SaveProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaveProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload>
          }
          findMany: {
            args: Prisma.SaveProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload>[]
          }
          create: {
            args: Prisma.SaveProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload>
          }
          createMany: {
            args: Prisma.SaveProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SaveProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload>
          }
          update: {
            args: Prisma.SaveProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload>
          }
          deleteMany: {
            args: Prisma.SaveProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SaveProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SaveProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SaveProductPayload>
          }
          aggregate: {
            args: Prisma.SaveProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSaveProduct>
          }
          groupBy: {
            args: Prisma.SaveProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SaveProductGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SaveProductFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.SaveProductAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.SaveProductCountArgs<ExtArgs>,
            result: $Utils.Optional<SaveProductCountAggregateOutputType> | number
          }
        }
      }
      DiagnosticTest: {
        payload: Prisma.$DiagnosticTestPayload<ExtArgs>
        fields: Prisma.DiagnosticTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiagnosticTestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiagnosticTestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload>
          }
          findFirst: {
            args: Prisma.DiagnosticTestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiagnosticTestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload>
          }
          findMany: {
            args: Prisma.DiagnosticTestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload>[]
          }
          create: {
            args: Prisma.DiagnosticTestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload>
          }
          createMany: {
            args: Prisma.DiagnosticTestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DiagnosticTestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload>
          }
          update: {
            args: Prisma.DiagnosticTestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload>
          }
          deleteMany: {
            args: Prisma.DiagnosticTestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DiagnosticTestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DiagnosticTestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DiagnosticTestPayload>
          }
          aggregate: {
            args: Prisma.DiagnosticTestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDiagnosticTest>
          }
          groupBy: {
            args: Prisma.DiagnosticTestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DiagnosticTestGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.DiagnosticTestFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.DiagnosticTestAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.DiagnosticTestCountArgs<ExtArgs>,
            result: $Utils.Optional<DiagnosticTestCountAggregateOutputType> | number
          }
        }
      }
      SelectedTest: {
        payload: Prisma.$SelectedTestPayload<ExtArgs>
        fields: Prisma.SelectedTestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SelectedTestFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SelectedTestFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload>
          }
          findFirst: {
            args: Prisma.SelectedTestFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SelectedTestFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload>
          }
          findMany: {
            args: Prisma.SelectedTestFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload>[]
          }
          create: {
            args: Prisma.SelectedTestCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload>
          }
          createMany: {
            args: Prisma.SelectedTestCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SelectedTestDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload>
          }
          update: {
            args: Prisma.SelectedTestUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload>
          }
          deleteMany: {
            args: Prisma.SelectedTestDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SelectedTestUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SelectedTestUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SelectedTestPayload>
          }
          aggregate: {
            args: Prisma.SelectedTestAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSelectedTest>
          }
          groupBy: {
            args: Prisma.SelectedTestGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SelectedTestGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SelectedTestFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.SelectedTestAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.SelectedTestCountArgs<ExtArgs>,
            result: $Utils.Optional<SelectedTestCountAggregateOutputType> | number
          }
        }
      }
      ChatSessions: {
        payload: Prisma.$ChatSessionsPayload<ExtArgs>
        fields: Prisma.ChatSessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatSessionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatSessionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload>
          }
          findFirst: {
            args: Prisma.ChatSessionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatSessionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload>
          }
          findMany: {
            args: Prisma.ChatSessionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload>[]
          }
          create: {
            args: Prisma.ChatSessionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload>
          }
          createMany: {
            args: Prisma.ChatSessionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatSessionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload>
          }
          update: {
            args: Prisma.ChatSessionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload>
          }
          deleteMany: {
            args: Prisma.ChatSessionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatSessionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatSessionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatSessionsPayload>
          }
          aggregate: {
            args: Prisma.ChatSessionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChatSessions>
          }
          groupBy: {
            args: Prisma.ChatSessionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatSessionsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ChatSessionsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ChatSessionsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ChatSessionsCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatSessionsCountAggregateOutputType> | number
          }
        }
      }
      ChatMessages: {
        payload: Prisma.$ChatMessagesPayload<ExtArgs>
        fields: Prisma.ChatMessagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload>
          }
          findFirst: {
            args: Prisma.ChatMessagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload>
          }
          findMany: {
            args: Prisma.ChatMessagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload>[]
          }
          create: {
            args: Prisma.ChatMessagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload>
          }
          createMany: {
            args: Prisma.ChatMessagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChatMessagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload>
          }
          update: {
            args: Prisma.ChatMessagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload>
          }
          deleteMany: {
            args: Prisma.ChatMessagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChatMessagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChatMessagesPayload>
          }
          aggregate: {
            args: Prisma.ChatMessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChatMessages>
          }
          groupBy: {
            args: Prisma.ChatMessagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChatMessagesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ChatMessagesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ChatMessagesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ChatMessagesCountArgs<ExtArgs>,
            result: $Utils.Optional<ChatMessagesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    Bvn: number
    Appointment: number
    Cart: number
    SaveProduct: number
    address: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Bvn?: boolean | UsersCountOutputTypeCountBvnArgs
    Appointment?: boolean | UsersCountOutputTypeCountAppointmentArgs
    Cart?: boolean | UsersCountOutputTypeCountCartArgs
    SaveProduct?: boolean | UsersCountOutputTypeCountSaveProductArgs
    address?: boolean | UsersCountOutputTypeCountAddressArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBvnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BvnWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSaveProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaveProductWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }


  /**
   * Count Type DoctorsCountOutputType
   */

  export type DoctorsCountOutputType = {
    workingHours: number
    Appointment: number
  }

  export type DoctorsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workingHours?: boolean | DoctorsCountOutputTypeCountWorkingHoursArgs
    Appointment?: boolean | DoctorsCountOutputTypeCountAppointmentArgs
  }

  // Custom InputTypes
  /**
   * DoctorsCountOutputType without action
   */
  export type DoctorsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorsCountOutputType
     */
    select?: DoctorsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorsCountOutputType without action
   */
  export type DoctorsCountOutputTypeCountWorkingHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkingHoursWhereInput
  }

  /**
   * DoctorsCountOutputType without action
   */
  export type DoctorsCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type ProductsCountOutputType
   */

  export type ProductsCountOutputType = {
    CartItem: number
    SaveProduct: number
    Ratings: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CartItem?: boolean | ProductsCountOutputTypeCountCartItemArgs
    SaveProduct?: boolean | ProductsCountOutputTypeCountSaveProductArgs
    Ratings?: boolean | ProductsCountOutputTypeCountRatingsArgs
  }

  // Custom InputTypes
  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountCartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountSaveProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaveProductWhereInput
  }

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * Count Type DiagnosticTestCountOutputType
   */

  export type DiagnosticTestCountOutputType = {
    selectedTests: number
  }

  export type DiagnosticTestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selectedTests?: boolean | DiagnosticTestCountOutputTypeCountSelectedTestsArgs
  }

  // Custom InputTypes
  /**
   * DiagnosticTestCountOutputType without action
   */
  export type DiagnosticTestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTestCountOutputType
     */
    select?: DiagnosticTestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiagnosticTestCountOutputType without action
   */
  export type DiagnosticTestCountOutputTypeCountSelectedTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SelectedTestWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    otp: number | null
  }

  export type UsersSumAggregateOutputType = {
    otp: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: string | null
    country: string | null
    phoneNumber: string | null
    schoolName: string | null
    email: string | null
    password: string | null
    verified: boolean | null
    otp: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isSuspended: boolean | null
    isDeleted: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: string | null
    country: string | null
    phoneNumber: string | null
    schoolName: string | null
    email: string | null
    password: string | null
    verified: boolean | null
    otp: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isSuspended: boolean | null
    isDeleted: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    dateOfBirth: number
    country: number
    phoneNumber: number
    schoolName: number
    email: number
    password: number
    verified: number
    otp: number
    createdAt: number
    updatedAt: number
    isSuspended: number
    isDeleted: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    otp?: true
  }

  export type UsersSumAggregateInputType = {
    otp?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    country?: true
    phoneNumber?: true
    schoolName?: true
    email?: true
    password?: true
    verified?: true
    otp?: true
    createdAt?: true
    updatedAt?: true
    isSuspended?: true
    isDeleted?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    country?: true
    phoneNumber?: true
    schoolName?: true
    email?: true
    password?: true
    verified?: true
    otp?: true
    createdAt?: true
    updatedAt?: true
    isSuspended?: true
    isDeleted?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    country?: true
    phoneNumber?: true
    schoolName?: true
    email?: true
    password?: true
    verified?: true
    otp?: true
    createdAt?: true
    updatedAt?: true
    isSuspended?: true
    isDeleted?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName: string | null
    email: string
    password: string
    verified: boolean | null
    otp: number | null
    createdAt: Date
    updatedAt: Date
    isSuspended: boolean | null
    isDeleted: boolean | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    country?: boolean
    phoneNumber?: boolean
    schoolName?: boolean
    email?: boolean
    password?: boolean
    verified?: boolean
    otp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isSuspended?: boolean
    isDeleted?: boolean
    Wallet?: boolean | Users$WalletArgs<ExtArgs>
    Bvn?: boolean | Users$BvnArgs<ExtArgs>
    SetupProfile?: boolean | Users$SetupProfileArgs<ExtArgs>
    Appointment?: boolean | Users$AppointmentArgs<ExtArgs>
    Cart?: boolean | Users$CartArgs<ExtArgs>
    TransactionPin?: boolean | Users$TransactionPinArgs<ExtArgs>
    SaveProduct?: boolean | Users$SaveProductArgs<ExtArgs>
    address?: boolean | Users$addressArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    country?: boolean
    phoneNumber?: boolean
    schoolName?: boolean
    email?: boolean
    password?: boolean
    verified?: boolean
    otp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isSuspended?: boolean
    isDeleted?: boolean
  }


  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Wallet?: boolean | Users$WalletArgs<ExtArgs>
    Bvn?: boolean | Users$BvnArgs<ExtArgs>
    SetupProfile?: boolean | Users$SetupProfileArgs<ExtArgs>
    Appointment?: boolean | Users$AppointmentArgs<ExtArgs>
    Cart?: boolean | Users$CartArgs<ExtArgs>
    TransactionPin?: boolean | Users$TransactionPinArgs<ExtArgs>
    SaveProduct?: boolean | Users$SaveProductArgs<ExtArgs>
    address?: boolean | Users$addressArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      Wallet: Prisma.$WalletPayload<ExtArgs> | null
      Bvn: Prisma.$BvnPayload<ExtArgs>[]
      SetupProfile: Prisma.$SetupProfilePayload<ExtArgs> | null
      Appointment: Prisma.$AppointmentPayload<ExtArgs>[]
      Cart: Prisma.$CartItemPayload<ExtArgs>[]
      TransactionPin: Prisma.$TransactionPinPayload<ExtArgs> | null
      SaveProduct: Prisma.$SaveProductPayload<ExtArgs>[]
      address: Prisma.$AddressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      dateOfBirth: string
      country: string
      phoneNumber: string
      schoolName: string | null
      email: string
      password: string
      verified: boolean | null
      otp: number | null
      createdAt: Date
      updatedAt: Date
      isSuspended: boolean | null
      isDeleted: boolean | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UsersFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const users = await prisma.users.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UsersFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Users.
     * @param {UsersAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const users = await prisma.users.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UsersAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Wallet<T extends Users$WalletArgs<ExtArgs> = {}>(args?: Subset<T, Users$WalletArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Bvn<T extends Users$BvnArgs<ExtArgs> = {}>(args?: Subset<T, Users$BvnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'findMany'> | Null>;

    SetupProfile<T extends Users$SetupProfileArgs<ExtArgs> = {}>(args?: Subset<T, Users$SetupProfileArgs<ExtArgs>>): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Appointment<T extends Users$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Users$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    Cart<T extends Users$CartArgs<ExtArgs> = {}>(args?: Subset<T, Users$CartArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    TransactionPin<T extends Users$TransactionPinArgs<ExtArgs> = {}>(args?: Subset<T, Users$TransactionPinArgs<ExtArgs>>): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    SaveProduct<T extends Users$SaveProductArgs<ExtArgs> = {}>(args?: Subset<T, Users$SaveProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    address<T extends Users$addressArgs<ExtArgs> = {}>(args?: Subset<T, Users$addressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'String'>
    readonly firstName: FieldRef<"Users", 'String'>
    readonly lastName: FieldRef<"Users", 'String'>
    readonly dateOfBirth: FieldRef<"Users", 'String'>
    readonly country: FieldRef<"Users", 'String'>
    readonly phoneNumber: FieldRef<"Users", 'String'>
    readonly schoolName: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly verified: FieldRef<"Users", 'Boolean'>
    readonly otp: FieldRef<"Users", 'Int'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
    readonly isSuspended: FieldRef<"Users", 'Boolean'>
    readonly isDeleted: FieldRef<"Users", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users findRaw
   */
  export type UsersFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Users aggregateRaw
   */
  export type UsersAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Users.Wallet
   */
  export type Users$WalletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
  }

  /**
   * Users.Bvn
   */
  export type Users$BvnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    where?: BvnWhereInput
    orderBy?: BvnOrderByWithRelationInput | BvnOrderByWithRelationInput[]
    cursor?: BvnWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BvnScalarFieldEnum | BvnScalarFieldEnum[]
  }

  /**
   * Users.SetupProfile
   */
  export type Users$SetupProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    where?: SetupProfileWhereInput
  }

  /**
   * Users.Appointment
   */
  export type Users$AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Users.Cart
   */
  export type Users$CartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Users.TransactionPin
   */
  export type Users$TransactionPinArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    where?: TransactionPinWhereInput
  }

  /**
   * Users.SaveProduct
   */
  export type Users$SaveProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    where?: SaveProductWhereInput
    orderBy?: SaveProductOrderByWithRelationInput | SaveProductOrderByWithRelationInput[]
    cursor?: SaveProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaveProductScalarFieldEnum | SaveProductScalarFieldEnum[]
  }

  /**
   * Users.address
   */
  export type Users$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    state: string | null
    local_government: string | null
    usersId: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    state: string | null
    local_government: string | null
    usersId: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    street: number
    city: number
    state: number
    local_government: number
    usersId: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    local_government?: true
    usersId?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    local_government?: true
    usersId?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    street?: true
    city?: true
    state?: true
    local_government?: true
    usersId?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    street: string | null
    city: string | null
    state: string
    local_government: string
    usersId: string
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    local_government?: boolean
    usersId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    local_government?: boolean
    usersId?: boolean
  }


  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      street: string | null
      city: string | null
      state: string
      local_government: string
      usersId: string
    }, ExtArgs["result"]["address"]>
    composites: {}
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * @param {AddressFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const address = await prisma.address.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AddressFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Address.
     * @param {AddressAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const address = await prisma.address.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AddressAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly street: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly state: FieldRef<"Address", 'String'>
    readonly local_government: FieldRef<"Address", 'String'>
    readonly usersId: FieldRef<"Address", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }

  /**
   * Address findRaw
   */
  export type AddressFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Address aggregateRaw
   */
  export type AddressAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }



  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * @param {AdminFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const admin = await prisma.admin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AdminFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Admin.
     * @param {AdminAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const admin = await prisma.admin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AdminAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin findRaw
   */
  export type AdminFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Admin aggregateRaw
   */
  export type AdminAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }


  /**
   * Model TransactionPin
   */

  export type AggregateTransactionPin = {
    _count: TransactionPinCountAggregateOutputType | null
    _min: TransactionPinMinAggregateOutputType | null
    _max: TransactionPinMaxAggregateOutputType | null
  }

  export type TransactionPinMinAggregateOutputType = {
    id: string | null
    pin: string | null
    usersId: string | null
  }

  export type TransactionPinMaxAggregateOutputType = {
    id: string | null
    pin: string | null
    usersId: string | null
  }

  export type TransactionPinCountAggregateOutputType = {
    id: number
    pin: number
    usersId: number
    _all: number
  }


  export type TransactionPinMinAggregateInputType = {
    id?: true
    pin?: true
    usersId?: true
  }

  export type TransactionPinMaxAggregateInputType = {
    id?: true
    pin?: true
    usersId?: true
  }

  export type TransactionPinCountAggregateInputType = {
    id?: true
    pin?: true
    usersId?: true
    _all?: true
  }

  export type TransactionPinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionPin to aggregate.
     */
    where?: TransactionPinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionPins to fetch.
     */
    orderBy?: TransactionPinOrderByWithRelationInput | TransactionPinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionPinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionPins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionPins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionPins
    **/
    _count?: true | TransactionPinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionPinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionPinMaxAggregateInputType
  }

  export type GetTransactionPinAggregateType<T extends TransactionPinAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionPin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionPin[P]>
      : GetScalarType<T[P], AggregateTransactionPin[P]>
  }




  export type TransactionPinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionPinWhereInput
    orderBy?: TransactionPinOrderByWithAggregationInput | TransactionPinOrderByWithAggregationInput[]
    by: TransactionPinScalarFieldEnum[] | TransactionPinScalarFieldEnum
    having?: TransactionPinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionPinCountAggregateInputType | true
    _min?: TransactionPinMinAggregateInputType
    _max?: TransactionPinMaxAggregateInputType
  }

  export type TransactionPinGroupByOutputType = {
    id: string
    pin: string
    usersId: string
    _count: TransactionPinCountAggregateOutputType | null
    _min: TransactionPinMinAggregateOutputType | null
    _max: TransactionPinMaxAggregateOutputType | null
  }

  type GetTransactionPinGroupByPayload<T extends TransactionPinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionPinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionPinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionPinGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionPinGroupByOutputType[P]>
        }
      >
    >


  export type TransactionPinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pin?: boolean
    usersId?: boolean
    user?: boolean | TransactionPin$userArgs<ExtArgs>
  }, ExtArgs["result"]["transactionPin"]>

  export type TransactionPinSelectScalar = {
    id?: boolean
    pin?: boolean
    usersId?: boolean
  }


  export type TransactionPinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | TransactionPin$userArgs<ExtArgs>
  }


  export type $TransactionPinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransactionPin"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pin: string
      usersId: string
    }, ExtArgs["result"]["transactionPin"]>
    composites: {}
  }


  type TransactionPinGetPayload<S extends boolean | null | undefined | TransactionPinDefaultArgs> = $Result.GetResult<Prisma.$TransactionPinPayload, S>

  type TransactionPinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionPinFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionPinCountAggregateInputType | true
    }

  export interface TransactionPinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionPin'], meta: { name: 'TransactionPin' } }
    /**
     * Find zero or one TransactionPin that matches the filter.
     * @param {TransactionPinFindUniqueArgs} args - Arguments to find a TransactionPin
     * @example
     * // Get one TransactionPin
     * const transactionPin = await prisma.transactionPin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionPinFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionPinFindUniqueArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TransactionPin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionPinFindUniqueOrThrowArgs} args - Arguments to find a TransactionPin
     * @example
     * // Get one TransactionPin
     * const transactionPin = await prisma.transactionPin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionPinFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionPinFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TransactionPin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionPinFindFirstArgs} args - Arguments to find a TransactionPin
     * @example
     * // Get one TransactionPin
     * const transactionPin = await prisma.transactionPin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionPinFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionPinFindFirstArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TransactionPin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionPinFindFirstOrThrowArgs} args - Arguments to find a TransactionPin
     * @example
     * // Get one TransactionPin
     * const transactionPin = await prisma.transactionPin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionPinFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionPinFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TransactionPins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionPinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionPins
     * const transactionPins = await prisma.transactionPin.findMany()
     * 
     * // Get first 10 TransactionPins
     * const transactionPins = await prisma.transactionPin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionPinWithIdOnly = await prisma.transactionPin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionPinFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionPinFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TransactionPin.
     * @param {TransactionPinCreateArgs} args - Arguments to create a TransactionPin.
     * @example
     * // Create one TransactionPin
     * const TransactionPin = await prisma.transactionPin.create({
     *   data: {
     *     // ... data to create a TransactionPin
     *   }
     * })
     * 
    **/
    create<T extends TransactionPinCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionPinCreateArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TransactionPins.
     * @param {TransactionPinCreateManyArgs} args - Arguments to create many TransactionPins.
     * @example
     * // Create many TransactionPins
     * const transactionPin = await prisma.transactionPin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TransactionPinCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionPinCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TransactionPin.
     * @param {TransactionPinDeleteArgs} args - Arguments to delete one TransactionPin.
     * @example
     * // Delete one TransactionPin
     * const TransactionPin = await prisma.transactionPin.delete({
     *   where: {
     *     // ... filter to delete one TransactionPin
     *   }
     * })
     * 
    **/
    delete<T extends TransactionPinDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionPinDeleteArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TransactionPin.
     * @param {TransactionPinUpdateArgs} args - Arguments to update one TransactionPin.
     * @example
     * // Update one TransactionPin
     * const transactionPin = await prisma.transactionPin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionPinUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionPinUpdateArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TransactionPins.
     * @param {TransactionPinDeleteManyArgs} args - Arguments to filter TransactionPins to delete.
     * @example
     * // Delete a few TransactionPins
     * const { count } = await prisma.transactionPin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionPinDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionPinDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionPins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionPinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionPins
     * const transactionPin = await prisma.transactionPin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionPinUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionPinUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransactionPin.
     * @param {TransactionPinUpsertArgs} args - Arguments to update or create a TransactionPin.
     * @example
     * // Update or create a TransactionPin
     * const transactionPin = await prisma.transactionPin.upsert({
     *   create: {
     *     // ... data to create a TransactionPin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionPin we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionPinUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionPinUpsertArgs<ExtArgs>>
    ): Prisma__TransactionPinClient<$Result.GetResult<Prisma.$TransactionPinPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more TransactionPins that matches the filter.
     * @param {TransactionPinFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const transactionPin = await prisma.transactionPin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TransactionPinFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TransactionPin.
     * @param {TransactionPinAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const transactionPin = await prisma.transactionPin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TransactionPinAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of TransactionPins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionPinCountArgs} args - Arguments to filter TransactionPins to count.
     * @example
     * // Count the number of TransactionPins
     * const count = await prisma.transactionPin.count({
     *   where: {
     *     // ... the filter for the TransactionPins we want to count
     *   }
     * })
    **/
    count<T extends TransactionPinCountArgs>(
      args?: Subset<T, TransactionPinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionPinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionPin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionPinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionPinAggregateArgs>(args: Subset<T, TransactionPinAggregateArgs>): Prisma.PrismaPromise<GetTransactionPinAggregateType<T>>

    /**
     * Group by TransactionPin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionPinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionPinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionPinGroupByArgs['orderBy'] }
        : { orderBy?: TransactionPinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionPinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionPinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionPin model
   */
  readonly fields: TransactionPinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionPin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionPinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends TransactionPin$userArgs<ExtArgs> = {}>(args?: Subset<T, TransactionPin$userArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TransactionPin model
   */ 
  interface TransactionPinFieldRefs {
    readonly id: FieldRef<"TransactionPin", 'String'>
    readonly pin: FieldRef<"TransactionPin", 'String'>
    readonly usersId: FieldRef<"TransactionPin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TransactionPin findUnique
   */
  export type TransactionPinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * Filter, which TransactionPin to fetch.
     */
    where: TransactionPinWhereUniqueInput
  }

  /**
   * TransactionPin findUniqueOrThrow
   */
  export type TransactionPinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * Filter, which TransactionPin to fetch.
     */
    where: TransactionPinWhereUniqueInput
  }

  /**
   * TransactionPin findFirst
   */
  export type TransactionPinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * Filter, which TransactionPin to fetch.
     */
    where?: TransactionPinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionPins to fetch.
     */
    orderBy?: TransactionPinOrderByWithRelationInput | TransactionPinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionPins.
     */
    cursor?: TransactionPinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionPins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionPins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionPins.
     */
    distinct?: TransactionPinScalarFieldEnum | TransactionPinScalarFieldEnum[]
  }

  /**
   * TransactionPin findFirstOrThrow
   */
  export type TransactionPinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * Filter, which TransactionPin to fetch.
     */
    where?: TransactionPinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionPins to fetch.
     */
    orderBy?: TransactionPinOrderByWithRelationInput | TransactionPinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionPins.
     */
    cursor?: TransactionPinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionPins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionPins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionPins.
     */
    distinct?: TransactionPinScalarFieldEnum | TransactionPinScalarFieldEnum[]
  }

  /**
   * TransactionPin findMany
   */
  export type TransactionPinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * Filter, which TransactionPins to fetch.
     */
    where?: TransactionPinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionPins to fetch.
     */
    orderBy?: TransactionPinOrderByWithRelationInput | TransactionPinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionPins.
     */
    cursor?: TransactionPinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionPins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionPins.
     */
    skip?: number
    distinct?: TransactionPinScalarFieldEnum | TransactionPinScalarFieldEnum[]
  }

  /**
   * TransactionPin create
   */
  export type TransactionPinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * The data needed to create a TransactionPin.
     */
    data: XOR<TransactionPinCreateInput, TransactionPinUncheckedCreateInput>
  }

  /**
   * TransactionPin createMany
   */
  export type TransactionPinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionPins.
     */
    data: TransactionPinCreateManyInput | TransactionPinCreateManyInput[]
  }

  /**
   * TransactionPin update
   */
  export type TransactionPinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * The data needed to update a TransactionPin.
     */
    data: XOR<TransactionPinUpdateInput, TransactionPinUncheckedUpdateInput>
    /**
     * Choose, which TransactionPin to update.
     */
    where: TransactionPinWhereUniqueInput
  }

  /**
   * TransactionPin updateMany
   */
  export type TransactionPinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionPins.
     */
    data: XOR<TransactionPinUpdateManyMutationInput, TransactionPinUncheckedUpdateManyInput>
    /**
     * Filter which TransactionPins to update
     */
    where?: TransactionPinWhereInput
  }

  /**
   * TransactionPin upsert
   */
  export type TransactionPinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * The filter to search for the TransactionPin to update in case it exists.
     */
    where: TransactionPinWhereUniqueInput
    /**
     * In case the TransactionPin found by the `where` argument doesn't exist, create a new TransactionPin with this data.
     */
    create: XOR<TransactionPinCreateInput, TransactionPinUncheckedCreateInput>
    /**
     * In case the TransactionPin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionPinUpdateInput, TransactionPinUncheckedUpdateInput>
  }

  /**
   * TransactionPin delete
   */
  export type TransactionPinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
    /**
     * Filter which TransactionPin to delete.
     */
    where: TransactionPinWhereUniqueInput
  }

  /**
   * TransactionPin deleteMany
   */
  export type TransactionPinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionPins to delete
     */
    where?: TransactionPinWhereInput
  }

  /**
   * TransactionPin findRaw
   */
  export type TransactionPinFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TransactionPin aggregateRaw
   */
  export type TransactionPinAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TransactionPin.user
   */
  export type TransactionPin$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * TransactionPin without action
   */
  export type TransactionPinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionPin
     */
    select?: TransactionPinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionPinInclude<ExtArgs> | null
  }


  /**
   * Model TransactionHistory
   */

  export type AggregateTransactionHistory = {
    _count: TransactionHistoryCountAggregateOutputType | null
    _min: TransactionHistoryMinAggregateOutputType | null
    _max: TransactionHistoryMaxAggregateOutputType | null
  }

  export type TransactionHistoryMinAggregateOutputType = {
    id: string | null
    email: string | null
    paystack_ref: string | null
    payment_status: string | null
    time_paid: Date | null
    date_paid: Date | null
  }

  export type TransactionHistoryMaxAggregateOutputType = {
    id: string | null
    email: string | null
    paystack_ref: string | null
    payment_status: string | null
    time_paid: Date | null
    date_paid: Date | null
  }

  export type TransactionHistoryCountAggregateOutputType = {
    id: number
    email: number
    paystack_ref: number
    payment_status: number
    time_paid: number
    date_paid: number
    _all: number
  }


  export type TransactionHistoryMinAggregateInputType = {
    id?: true
    email?: true
    paystack_ref?: true
    payment_status?: true
    time_paid?: true
    date_paid?: true
  }

  export type TransactionHistoryMaxAggregateInputType = {
    id?: true
    email?: true
    paystack_ref?: true
    payment_status?: true
    time_paid?: true
    date_paid?: true
  }

  export type TransactionHistoryCountAggregateInputType = {
    id?: true
    email?: true
    paystack_ref?: true
    payment_status?: true
    time_paid?: true
    date_paid?: true
    _all?: true
  }

  export type TransactionHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionHistory to aggregate.
     */
    where?: TransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionHistories to fetch.
     */
    orderBy?: TransactionHistoryOrderByWithRelationInput | TransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionHistories
    **/
    _count?: true | TransactionHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionHistoryMaxAggregateInputType
  }

  export type GetTransactionHistoryAggregateType<T extends TransactionHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionHistory[P]>
      : GetScalarType<T[P], AggregateTransactionHistory[P]>
  }




  export type TransactionHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionHistoryWhereInput
    orderBy?: TransactionHistoryOrderByWithAggregationInput | TransactionHistoryOrderByWithAggregationInput[]
    by: TransactionHistoryScalarFieldEnum[] | TransactionHistoryScalarFieldEnum
    having?: TransactionHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionHistoryCountAggregateInputType | true
    _min?: TransactionHistoryMinAggregateInputType
    _max?: TransactionHistoryMaxAggregateInputType
  }

  export type TransactionHistoryGroupByOutputType = {
    id: string
    email: string
    paystack_ref: string
    payment_status: string
    time_paid: Date
    date_paid: Date
    _count: TransactionHistoryCountAggregateOutputType | null
    _min: TransactionHistoryMinAggregateOutputType | null
    _max: TransactionHistoryMaxAggregateOutputType | null
  }

  type GetTransactionHistoryGroupByPayload<T extends TransactionHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionHistoryGroupByOutputType[P]>
        }
      >
    >


  export type TransactionHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    paystack_ref?: boolean
    payment_status?: boolean
    time_paid?: boolean
    date_paid?: boolean
  }, ExtArgs["result"]["transactionHistory"]>

  export type TransactionHistorySelectScalar = {
    id?: boolean
    email?: boolean
    paystack_ref?: boolean
    payment_status?: boolean
    time_paid?: boolean
    date_paid?: boolean
  }



  export type $TransactionHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransactionHistory"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      paystack_ref: string
      payment_status: string
      time_paid: Date
      date_paid: Date
    }, ExtArgs["result"]["transactionHistory"]>
    composites: {}
  }


  type TransactionHistoryGetPayload<S extends boolean | null | undefined | TransactionHistoryDefaultArgs> = $Result.GetResult<Prisma.$TransactionHistoryPayload, S>

  type TransactionHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransactionHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionHistoryCountAggregateInputType | true
    }

  export interface TransactionHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionHistory'], meta: { name: 'TransactionHistory' } }
    /**
     * Find zero or one TransactionHistory that matches the filter.
     * @param {TransactionHistoryFindUniqueArgs} args - Arguments to find a TransactionHistory
     * @example
     * // Get one TransactionHistory
     * const transactionHistory = await prisma.transactionHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionHistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionHistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TransactionHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransactionHistoryFindUniqueOrThrowArgs} args - Arguments to find a TransactionHistory
     * @example
     * // Get one TransactionHistory
     * const transactionHistory = await prisma.transactionHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TransactionHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionHistoryFindFirstArgs} args - Arguments to find a TransactionHistory
     * @example
     * // Get one TransactionHistory
     * const transactionHistory = await prisma.transactionHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionHistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionHistoryFindFirstArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TransactionHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionHistoryFindFirstOrThrowArgs} args - Arguments to find a TransactionHistory
     * @example
     * // Get one TransactionHistory
     * const transactionHistory = await prisma.transactionHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TransactionHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionHistories
     * const transactionHistories = await prisma.transactionHistory.findMany()
     * 
     * // Get first 10 TransactionHistories
     * const transactionHistories = await prisma.transactionHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionHistoryWithIdOnly = await prisma.transactionHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TransactionHistory.
     * @param {TransactionHistoryCreateArgs} args - Arguments to create a TransactionHistory.
     * @example
     * // Create one TransactionHistory
     * const TransactionHistory = await prisma.transactionHistory.create({
     *   data: {
     *     // ... data to create a TransactionHistory
     *   }
     * })
     * 
    **/
    create<T extends TransactionHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionHistoryCreateArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TransactionHistories.
     * @param {TransactionHistoryCreateManyArgs} args - Arguments to create many TransactionHistories.
     * @example
     * // Create many TransactionHistories
     * const transactionHistory = await prisma.transactionHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TransactionHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TransactionHistory.
     * @param {TransactionHistoryDeleteArgs} args - Arguments to delete one TransactionHistory.
     * @example
     * // Delete one TransactionHistory
     * const TransactionHistory = await prisma.transactionHistory.delete({
     *   where: {
     *     // ... filter to delete one TransactionHistory
     *   }
     * })
     * 
    **/
    delete<T extends TransactionHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionHistoryDeleteArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TransactionHistory.
     * @param {TransactionHistoryUpdateArgs} args - Arguments to update one TransactionHistory.
     * @example
     * // Update one TransactionHistory
     * const transactionHistory = await prisma.transactionHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionHistoryUpdateArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TransactionHistories.
     * @param {TransactionHistoryDeleteManyArgs} args - Arguments to filter TransactionHistories to delete.
     * @example
     * // Delete a few TransactionHistories
     * const { count } = await prisma.transactionHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransactionHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionHistories
     * const transactionHistory = await prisma.transactionHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TransactionHistory.
     * @param {TransactionHistoryUpsertArgs} args - Arguments to update or create a TransactionHistory.
     * @example
     * // Update or create a TransactionHistory
     * const transactionHistory = await prisma.transactionHistory.upsert({
     *   create: {
     *     // ... data to create a TransactionHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionHistory we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransactionHistoryUpsertArgs<ExtArgs>>
    ): Prisma__TransactionHistoryClient<$Result.GetResult<Prisma.$TransactionHistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more TransactionHistories that matches the filter.
     * @param {TransactionHistoryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const transactionHistory = await prisma.transactionHistory.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: TransactionHistoryFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a TransactionHistory.
     * @param {TransactionHistoryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const transactionHistory = await prisma.transactionHistory.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: TransactionHistoryAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of TransactionHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionHistoryCountArgs} args - Arguments to filter TransactionHistories to count.
     * @example
     * // Count the number of TransactionHistories
     * const count = await prisma.transactionHistory.count({
     *   where: {
     *     // ... the filter for the TransactionHistories we want to count
     *   }
     * })
    **/
    count<T extends TransactionHistoryCountArgs>(
      args?: Subset<T, TransactionHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionHistoryAggregateArgs>(args: Subset<T, TransactionHistoryAggregateArgs>): Prisma.PrismaPromise<GetTransactionHistoryAggregateType<T>>

    /**
     * Group by TransactionHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionHistoryGroupByArgs['orderBy'] }
        : { orderBy?: TransactionHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionHistory model
   */
  readonly fields: TransactionHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TransactionHistory model
   */ 
  interface TransactionHistoryFieldRefs {
    readonly id: FieldRef<"TransactionHistory", 'String'>
    readonly email: FieldRef<"TransactionHistory", 'String'>
    readonly paystack_ref: FieldRef<"TransactionHistory", 'String'>
    readonly payment_status: FieldRef<"TransactionHistory", 'String'>
    readonly time_paid: FieldRef<"TransactionHistory", 'DateTime'>
    readonly date_paid: FieldRef<"TransactionHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TransactionHistory findUnique
   */
  export type TransactionHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * Filter, which TransactionHistory to fetch.
     */
    where: TransactionHistoryWhereUniqueInput
  }

  /**
   * TransactionHistory findUniqueOrThrow
   */
  export type TransactionHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * Filter, which TransactionHistory to fetch.
     */
    where: TransactionHistoryWhereUniqueInput
  }

  /**
   * TransactionHistory findFirst
   */
  export type TransactionHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * Filter, which TransactionHistory to fetch.
     */
    where?: TransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionHistories to fetch.
     */
    orderBy?: TransactionHistoryOrderByWithRelationInput | TransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionHistories.
     */
    cursor?: TransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionHistories.
     */
    distinct?: TransactionHistoryScalarFieldEnum | TransactionHistoryScalarFieldEnum[]
  }

  /**
   * TransactionHistory findFirstOrThrow
   */
  export type TransactionHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * Filter, which TransactionHistory to fetch.
     */
    where?: TransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionHistories to fetch.
     */
    orderBy?: TransactionHistoryOrderByWithRelationInput | TransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionHistories.
     */
    cursor?: TransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionHistories.
     */
    distinct?: TransactionHistoryScalarFieldEnum | TransactionHistoryScalarFieldEnum[]
  }

  /**
   * TransactionHistory findMany
   */
  export type TransactionHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * Filter, which TransactionHistories to fetch.
     */
    where?: TransactionHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionHistories to fetch.
     */
    orderBy?: TransactionHistoryOrderByWithRelationInput | TransactionHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionHistories.
     */
    cursor?: TransactionHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionHistories.
     */
    skip?: number
    distinct?: TransactionHistoryScalarFieldEnum | TransactionHistoryScalarFieldEnum[]
  }

  /**
   * TransactionHistory create
   */
  export type TransactionHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * The data needed to create a TransactionHistory.
     */
    data: XOR<TransactionHistoryCreateInput, TransactionHistoryUncheckedCreateInput>
  }

  /**
   * TransactionHistory createMany
   */
  export type TransactionHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionHistories.
     */
    data: TransactionHistoryCreateManyInput | TransactionHistoryCreateManyInput[]
  }

  /**
   * TransactionHistory update
   */
  export type TransactionHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * The data needed to update a TransactionHistory.
     */
    data: XOR<TransactionHistoryUpdateInput, TransactionHistoryUncheckedUpdateInput>
    /**
     * Choose, which TransactionHistory to update.
     */
    where: TransactionHistoryWhereUniqueInput
  }

  /**
   * TransactionHistory updateMany
   */
  export type TransactionHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionHistories.
     */
    data: XOR<TransactionHistoryUpdateManyMutationInput, TransactionHistoryUncheckedUpdateManyInput>
    /**
     * Filter which TransactionHistories to update
     */
    where?: TransactionHistoryWhereInput
  }

  /**
   * TransactionHistory upsert
   */
  export type TransactionHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * The filter to search for the TransactionHistory to update in case it exists.
     */
    where: TransactionHistoryWhereUniqueInput
    /**
     * In case the TransactionHistory found by the `where` argument doesn't exist, create a new TransactionHistory with this data.
     */
    create: XOR<TransactionHistoryCreateInput, TransactionHistoryUncheckedCreateInput>
    /**
     * In case the TransactionHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionHistoryUpdateInput, TransactionHistoryUncheckedUpdateInput>
  }

  /**
   * TransactionHistory delete
   */
  export type TransactionHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
    /**
     * Filter which TransactionHistory to delete.
     */
    where: TransactionHistoryWhereUniqueInput
  }

  /**
   * TransactionHistory deleteMany
   */
  export type TransactionHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionHistories to delete
     */
    where?: TransactionHistoryWhereInput
  }

  /**
   * TransactionHistory findRaw
   */
  export type TransactionHistoryFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TransactionHistory aggregateRaw
   */
  export type TransactionHistoryAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * TransactionHistory without action
   */
  export type TransactionHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionHistory
     */
    select?: TransactionHistorySelect<ExtArgs> | null
  }


  /**
   * Model Wallet
   */

  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    balance: number | null
  }

  export type WalletSumAggregateOutputType = {
    balance: number | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    balance: number | null
    usersId: string | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    balance: number | null
    usersId: string | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    balance: number
    usersId: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    balance?: true
  }

  export type WalletSumAggregateInputType = {
    balance?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    balance?: true
    usersId?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    balance?: true
    usersId?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    balance?: true
    usersId?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithAggregationInput | WalletOrderByWithAggregationInput[]
    by: WalletScalarFieldEnum[] | WalletScalarFieldEnum
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }

  export type WalletGroupByOutputType = {
    id: string
    balance: number
    usersId: string
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    balance?: boolean
    usersId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    balance?: boolean
    usersId?: boolean
  }


  export type WalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $WalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wallet"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      balance: number
      usersId: string
    }, ExtArgs["result"]["wallet"]>
    composites: {}
  }


  type WalletGetPayload<S extends boolean | null | undefined | WalletDefaultArgs> = $Result.GetResult<Prisma.$WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WalletFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WalletFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Wallet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WalletFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Wallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WalletFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
    **/
    create<T extends WalletCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletCreateArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Wallets.
     * @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends WalletCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
    **/
    delete<T extends WalletDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WalletUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WalletDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WalletUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
    **/
    upsert<T extends WalletUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>
    ): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Wallets that matches the filter.
     * @param {WalletFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const wallet = await prisma.wallet.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: WalletFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Wallet.
     * @param {WalletAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const wallet = await prisma.wallet.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: WalletAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wallet model
   */
  readonly fields: WalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Wallet model
   */ 
  interface WalletFieldRefs {
    readonly id: FieldRef<"Wallet", 'String'>
    readonly balance: FieldRef<"Wallet", 'Int'>
    readonly usersId: FieldRef<"Wallet", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Wallet findUnique
   */
  export type WalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findFirst
   */
  export type WalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }

  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
  }

  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
  }

  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }

  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
  }

  /**
   * Wallet findRaw
   */
  export type WalletFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Wallet aggregateRaw
   */
  export type WalletAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Wallet without action
   */
  export type WalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
  }


  /**
   * Model Bvn
   */

  export type AggregateBvn = {
    _count: BvnCountAggregateOutputType | null
    _avg: BvnAvgAggregateOutputType | null
    _sum: BvnSumAggregateOutputType | null
    _min: BvnMinAggregateOutputType | null
    _max: BvnMaxAggregateOutputType | null
  }

  export type BvnAvgAggregateOutputType = {
    bvn: number | null
  }

  export type BvnSumAggregateOutputType = {
    bvn: number | null
  }

  export type BvnMinAggregateOutputType = {
    id: string | null
    bvn: number | null
    usersId: string | null
  }

  export type BvnMaxAggregateOutputType = {
    id: string | null
    bvn: number | null
    usersId: string | null
  }

  export type BvnCountAggregateOutputType = {
    id: number
    bvn: number
    usersId: number
    _all: number
  }


  export type BvnAvgAggregateInputType = {
    bvn?: true
  }

  export type BvnSumAggregateInputType = {
    bvn?: true
  }

  export type BvnMinAggregateInputType = {
    id?: true
    bvn?: true
    usersId?: true
  }

  export type BvnMaxAggregateInputType = {
    id?: true
    bvn?: true
    usersId?: true
  }

  export type BvnCountAggregateInputType = {
    id?: true
    bvn?: true
    usersId?: true
    _all?: true
  }

  export type BvnAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bvn to aggregate.
     */
    where?: BvnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bvns to fetch.
     */
    orderBy?: BvnOrderByWithRelationInput | BvnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BvnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bvns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bvns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bvns
    **/
    _count?: true | BvnCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BvnAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BvnSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BvnMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BvnMaxAggregateInputType
  }

  export type GetBvnAggregateType<T extends BvnAggregateArgs> = {
        [P in keyof T & keyof AggregateBvn]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBvn[P]>
      : GetScalarType<T[P], AggregateBvn[P]>
  }




  export type BvnGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BvnWhereInput
    orderBy?: BvnOrderByWithAggregationInput | BvnOrderByWithAggregationInput[]
    by: BvnScalarFieldEnum[] | BvnScalarFieldEnum
    having?: BvnScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BvnCountAggregateInputType | true
    _avg?: BvnAvgAggregateInputType
    _sum?: BvnSumAggregateInputType
    _min?: BvnMinAggregateInputType
    _max?: BvnMaxAggregateInputType
  }

  export type BvnGroupByOutputType = {
    id: string
    bvn: number
    usersId: string
    _count: BvnCountAggregateOutputType | null
    _avg: BvnAvgAggregateOutputType | null
    _sum: BvnSumAggregateOutputType | null
    _min: BvnMinAggregateOutputType | null
    _max: BvnMaxAggregateOutputType | null
  }

  type GetBvnGroupByPayload<T extends BvnGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BvnGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BvnGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BvnGroupByOutputType[P]>
            : GetScalarType<T[P], BvnGroupByOutputType[P]>
        }
      >
    >


  export type BvnSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bvn?: boolean
    usersId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bvn"]>

  export type BvnSelectScalar = {
    id?: boolean
    bvn?: boolean
    usersId?: boolean
  }


  export type BvnInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $BvnPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bvn"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bvn: number
      usersId: string
    }, ExtArgs["result"]["bvn"]>
    composites: {}
  }


  type BvnGetPayload<S extends boolean | null | undefined | BvnDefaultArgs> = $Result.GetResult<Prisma.$BvnPayload, S>

  type BvnCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BvnFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BvnCountAggregateInputType | true
    }

  export interface BvnDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bvn'], meta: { name: 'Bvn' } }
    /**
     * Find zero or one Bvn that matches the filter.
     * @param {BvnFindUniqueArgs} args - Arguments to find a Bvn
     * @example
     * // Get one Bvn
     * const bvn = await prisma.bvn.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BvnFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BvnFindUniqueArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bvn that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BvnFindUniqueOrThrowArgs} args - Arguments to find a Bvn
     * @example
     * // Get one Bvn
     * const bvn = await prisma.bvn.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BvnFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BvnFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bvn that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BvnFindFirstArgs} args - Arguments to find a Bvn
     * @example
     * // Get one Bvn
     * const bvn = await prisma.bvn.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BvnFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BvnFindFirstArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bvn that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BvnFindFirstOrThrowArgs} args - Arguments to find a Bvn
     * @example
     * // Get one Bvn
     * const bvn = await prisma.bvn.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BvnFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BvnFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bvns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BvnFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bvns
     * const bvns = await prisma.bvn.findMany()
     * 
     * // Get first 10 Bvns
     * const bvns = await prisma.bvn.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bvnWithIdOnly = await prisma.bvn.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BvnFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BvnFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bvn.
     * @param {BvnCreateArgs} args - Arguments to create a Bvn.
     * @example
     * // Create one Bvn
     * const Bvn = await prisma.bvn.create({
     *   data: {
     *     // ... data to create a Bvn
     *   }
     * })
     * 
    **/
    create<T extends BvnCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BvnCreateArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bvns.
     * @param {BvnCreateManyArgs} args - Arguments to create many Bvns.
     * @example
     * // Create many Bvns
     * const bvn = await prisma.bvn.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BvnCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BvnCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bvn.
     * @param {BvnDeleteArgs} args - Arguments to delete one Bvn.
     * @example
     * // Delete one Bvn
     * const Bvn = await prisma.bvn.delete({
     *   where: {
     *     // ... filter to delete one Bvn
     *   }
     * })
     * 
    **/
    delete<T extends BvnDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BvnDeleteArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bvn.
     * @param {BvnUpdateArgs} args - Arguments to update one Bvn.
     * @example
     * // Update one Bvn
     * const bvn = await prisma.bvn.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BvnUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BvnUpdateArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bvns.
     * @param {BvnDeleteManyArgs} args - Arguments to filter Bvns to delete.
     * @example
     * // Delete a few Bvns
     * const { count } = await prisma.bvn.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BvnDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BvnDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bvns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BvnUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bvns
     * const bvn = await prisma.bvn.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BvnUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BvnUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bvn.
     * @param {BvnUpsertArgs} args - Arguments to update or create a Bvn.
     * @example
     * // Update or create a Bvn
     * const bvn = await prisma.bvn.upsert({
     *   create: {
     *     // ... data to create a Bvn
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bvn we want to update
     *   }
     * })
    **/
    upsert<T extends BvnUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BvnUpsertArgs<ExtArgs>>
    ): Prisma__BvnClient<$Result.GetResult<Prisma.$BvnPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Bvns that matches the filter.
     * @param {BvnFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const bvn = await prisma.bvn.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: BvnFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Bvn.
     * @param {BvnAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const bvn = await prisma.bvn.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: BvnAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Bvns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BvnCountArgs} args - Arguments to filter Bvns to count.
     * @example
     * // Count the number of Bvns
     * const count = await prisma.bvn.count({
     *   where: {
     *     // ... the filter for the Bvns we want to count
     *   }
     * })
    **/
    count<T extends BvnCountArgs>(
      args?: Subset<T, BvnCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BvnCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bvn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BvnAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BvnAggregateArgs>(args: Subset<T, BvnAggregateArgs>): Prisma.PrismaPromise<GetBvnAggregateType<T>>

    /**
     * Group by Bvn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BvnGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BvnGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BvnGroupByArgs['orderBy'] }
        : { orderBy?: BvnGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BvnGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBvnGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bvn model
   */
  readonly fields: BvnFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bvn.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BvnClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bvn model
   */ 
  interface BvnFieldRefs {
    readonly id: FieldRef<"Bvn", 'String'>
    readonly bvn: FieldRef<"Bvn", 'Int'>
    readonly usersId: FieldRef<"Bvn", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Bvn findUnique
   */
  export type BvnFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * Filter, which Bvn to fetch.
     */
    where: BvnWhereUniqueInput
  }

  /**
   * Bvn findUniqueOrThrow
   */
  export type BvnFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * Filter, which Bvn to fetch.
     */
    where: BvnWhereUniqueInput
  }

  /**
   * Bvn findFirst
   */
  export type BvnFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * Filter, which Bvn to fetch.
     */
    where?: BvnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bvns to fetch.
     */
    orderBy?: BvnOrderByWithRelationInput | BvnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bvns.
     */
    cursor?: BvnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bvns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bvns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bvns.
     */
    distinct?: BvnScalarFieldEnum | BvnScalarFieldEnum[]
  }

  /**
   * Bvn findFirstOrThrow
   */
  export type BvnFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * Filter, which Bvn to fetch.
     */
    where?: BvnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bvns to fetch.
     */
    orderBy?: BvnOrderByWithRelationInput | BvnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bvns.
     */
    cursor?: BvnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bvns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bvns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bvns.
     */
    distinct?: BvnScalarFieldEnum | BvnScalarFieldEnum[]
  }

  /**
   * Bvn findMany
   */
  export type BvnFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * Filter, which Bvns to fetch.
     */
    where?: BvnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bvns to fetch.
     */
    orderBy?: BvnOrderByWithRelationInput | BvnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bvns.
     */
    cursor?: BvnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bvns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bvns.
     */
    skip?: number
    distinct?: BvnScalarFieldEnum | BvnScalarFieldEnum[]
  }

  /**
   * Bvn create
   */
  export type BvnCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * The data needed to create a Bvn.
     */
    data: XOR<BvnCreateInput, BvnUncheckedCreateInput>
  }

  /**
   * Bvn createMany
   */
  export type BvnCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bvns.
     */
    data: BvnCreateManyInput | BvnCreateManyInput[]
  }

  /**
   * Bvn update
   */
  export type BvnUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * The data needed to update a Bvn.
     */
    data: XOR<BvnUpdateInput, BvnUncheckedUpdateInput>
    /**
     * Choose, which Bvn to update.
     */
    where: BvnWhereUniqueInput
  }

  /**
   * Bvn updateMany
   */
  export type BvnUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bvns.
     */
    data: XOR<BvnUpdateManyMutationInput, BvnUncheckedUpdateManyInput>
    /**
     * Filter which Bvns to update
     */
    where?: BvnWhereInput
  }

  /**
   * Bvn upsert
   */
  export type BvnUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * The filter to search for the Bvn to update in case it exists.
     */
    where: BvnWhereUniqueInput
    /**
     * In case the Bvn found by the `where` argument doesn't exist, create a new Bvn with this data.
     */
    create: XOR<BvnCreateInput, BvnUncheckedCreateInput>
    /**
     * In case the Bvn was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BvnUpdateInput, BvnUncheckedUpdateInput>
  }

  /**
   * Bvn delete
   */
  export type BvnDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
    /**
     * Filter which Bvn to delete.
     */
    where: BvnWhereUniqueInput
  }

  /**
   * Bvn deleteMany
   */
  export type BvnDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bvns to delete
     */
    where?: BvnWhereInput
  }

  /**
   * Bvn findRaw
   */
  export type BvnFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Bvn aggregateRaw
   */
  export type BvnAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Bvn without action
   */
  export type BvnDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bvn
     */
    select?: BvnSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BvnInclude<ExtArgs> | null
  }


  /**
   * Model SetupProfile
   */

  export type AggregateSetupProfile = {
    _count: SetupProfileCountAggregateOutputType | null
    _min: SetupProfileMinAggregateOutputType | null
    _max: SetupProfileMaxAggregateOutputType | null
  }

  export type SetupProfileMinAggregateOutputType = {
    id: string | null
    username: string | null
    matricNumber: string | null
    usersId: string | null
  }

  export type SetupProfileMaxAggregateOutputType = {
    id: string | null
    username: string | null
    matricNumber: string | null
    usersId: string | null
  }

  export type SetupProfileCountAggregateOutputType = {
    id: number
    username: number
    matricNumber: number
    usersId: number
    _all: number
  }


  export type SetupProfileMinAggregateInputType = {
    id?: true
    username?: true
    matricNumber?: true
    usersId?: true
  }

  export type SetupProfileMaxAggregateInputType = {
    id?: true
    username?: true
    matricNumber?: true
    usersId?: true
  }

  export type SetupProfileCountAggregateInputType = {
    id?: true
    username?: true
    matricNumber?: true
    usersId?: true
    _all?: true
  }

  export type SetupProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SetupProfile to aggregate.
     */
    where?: SetupProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SetupProfiles to fetch.
     */
    orderBy?: SetupProfileOrderByWithRelationInput | SetupProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SetupProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SetupProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SetupProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SetupProfiles
    **/
    _count?: true | SetupProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SetupProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SetupProfileMaxAggregateInputType
  }

  export type GetSetupProfileAggregateType<T extends SetupProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateSetupProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetupProfile[P]>
      : GetScalarType<T[P], AggregateSetupProfile[P]>
  }




  export type SetupProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SetupProfileWhereInput
    orderBy?: SetupProfileOrderByWithAggregationInput | SetupProfileOrderByWithAggregationInput[]
    by: SetupProfileScalarFieldEnum[] | SetupProfileScalarFieldEnum
    having?: SetupProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SetupProfileCountAggregateInputType | true
    _min?: SetupProfileMinAggregateInputType
    _max?: SetupProfileMaxAggregateInputType
  }

  export type SetupProfileGroupByOutputType = {
    id: string
    username: string
    matricNumber: string
    usersId: string
    _count: SetupProfileCountAggregateOutputType | null
    _min: SetupProfileMinAggregateOutputType | null
    _max: SetupProfileMaxAggregateOutputType | null
  }

  type GetSetupProfileGroupByPayload<T extends SetupProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SetupProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SetupProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SetupProfileGroupByOutputType[P]>
            : GetScalarType<T[P], SetupProfileGroupByOutputType[P]>
        }
      >
    >


  export type SetupProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    matricNumber?: boolean
    usersId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["setupProfile"]>

  export type SetupProfileSelectScalar = {
    id?: boolean
    username?: boolean
    matricNumber?: boolean
    usersId?: boolean
  }


  export type SetupProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $SetupProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SetupProfile"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      matricNumber: string
      usersId: string
    }, ExtArgs["result"]["setupProfile"]>
    composites: {}
  }


  type SetupProfileGetPayload<S extends boolean | null | undefined | SetupProfileDefaultArgs> = $Result.GetResult<Prisma.$SetupProfilePayload, S>

  type SetupProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SetupProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SetupProfileCountAggregateInputType | true
    }

  export interface SetupProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SetupProfile'], meta: { name: 'SetupProfile' } }
    /**
     * Find zero or one SetupProfile that matches the filter.
     * @param {SetupProfileFindUniqueArgs} args - Arguments to find a SetupProfile
     * @example
     * // Get one SetupProfile
     * const setupProfile = await prisma.setupProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SetupProfileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SetupProfileFindUniqueArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SetupProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SetupProfileFindUniqueOrThrowArgs} args - Arguments to find a SetupProfile
     * @example
     * // Get one SetupProfile
     * const setupProfile = await prisma.setupProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SetupProfileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SetupProfileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SetupProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupProfileFindFirstArgs} args - Arguments to find a SetupProfile
     * @example
     * // Get one SetupProfile
     * const setupProfile = await prisma.setupProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SetupProfileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SetupProfileFindFirstArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SetupProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupProfileFindFirstOrThrowArgs} args - Arguments to find a SetupProfile
     * @example
     * // Get one SetupProfile
     * const setupProfile = await prisma.setupProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SetupProfileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SetupProfileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SetupProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SetupProfiles
     * const setupProfiles = await prisma.setupProfile.findMany()
     * 
     * // Get first 10 SetupProfiles
     * const setupProfiles = await prisma.setupProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const setupProfileWithIdOnly = await prisma.setupProfile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SetupProfileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SetupProfileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SetupProfile.
     * @param {SetupProfileCreateArgs} args - Arguments to create a SetupProfile.
     * @example
     * // Create one SetupProfile
     * const SetupProfile = await prisma.setupProfile.create({
     *   data: {
     *     // ... data to create a SetupProfile
     *   }
     * })
     * 
    **/
    create<T extends SetupProfileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SetupProfileCreateArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SetupProfiles.
     * @param {SetupProfileCreateManyArgs} args - Arguments to create many SetupProfiles.
     * @example
     * // Create many SetupProfiles
     * const setupProfile = await prisma.setupProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SetupProfileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SetupProfileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SetupProfile.
     * @param {SetupProfileDeleteArgs} args - Arguments to delete one SetupProfile.
     * @example
     * // Delete one SetupProfile
     * const SetupProfile = await prisma.setupProfile.delete({
     *   where: {
     *     // ... filter to delete one SetupProfile
     *   }
     * })
     * 
    **/
    delete<T extends SetupProfileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SetupProfileDeleteArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SetupProfile.
     * @param {SetupProfileUpdateArgs} args - Arguments to update one SetupProfile.
     * @example
     * // Update one SetupProfile
     * const setupProfile = await prisma.setupProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SetupProfileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SetupProfileUpdateArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SetupProfiles.
     * @param {SetupProfileDeleteManyArgs} args - Arguments to filter SetupProfiles to delete.
     * @example
     * // Delete a few SetupProfiles
     * const { count } = await prisma.setupProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SetupProfileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SetupProfileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SetupProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SetupProfiles
     * const setupProfile = await prisma.setupProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SetupProfileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SetupProfileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SetupProfile.
     * @param {SetupProfileUpsertArgs} args - Arguments to update or create a SetupProfile.
     * @example
     * // Update or create a SetupProfile
     * const setupProfile = await prisma.setupProfile.upsert({
     *   create: {
     *     // ... data to create a SetupProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SetupProfile we want to update
     *   }
     * })
    **/
    upsert<T extends SetupProfileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SetupProfileUpsertArgs<ExtArgs>>
    ): Prisma__SetupProfileClient<$Result.GetResult<Prisma.$SetupProfilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more SetupProfiles that matches the filter.
     * @param {SetupProfileFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const setupProfile = await prisma.setupProfile.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SetupProfileFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SetupProfile.
     * @param {SetupProfileAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const setupProfile = await prisma.setupProfile.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SetupProfileAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of SetupProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupProfileCountArgs} args - Arguments to filter SetupProfiles to count.
     * @example
     * // Count the number of SetupProfiles
     * const count = await prisma.setupProfile.count({
     *   where: {
     *     // ... the filter for the SetupProfiles we want to count
     *   }
     * })
    **/
    count<T extends SetupProfileCountArgs>(
      args?: Subset<T, SetupProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SetupProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SetupProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SetupProfileAggregateArgs>(args: Subset<T, SetupProfileAggregateArgs>): Prisma.PrismaPromise<GetSetupProfileAggregateType<T>>

    /**
     * Group by SetupProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SetupProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SetupProfileGroupByArgs['orderBy'] }
        : { orderBy?: SetupProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SetupProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSetupProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SetupProfile model
   */
  readonly fields: SetupProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SetupProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SetupProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SetupProfile model
   */ 
  interface SetupProfileFieldRefs {
    readonly id: FieldRef<"SetupProfile", 'String'>
    readonly username: FieldRef<"SetupProfile", 'String'>
    readonly matricNumber: FieldRef<"SetupProfile", 'String'>
    readonly usersId: FieldRef<"SetupProfile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SetupProfile findUnique
   */
  export type SetupProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * Filter, which SetupProfile to fetch.
     */
    where: SetupProfileWhereUniqueInput
  }

  /**
   * SetupProfile findUniqueOrThrow
   */
  export type SetupProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * Filter, which SetupProfile to fetch.
     */
    where: SetupProfileWhereUniqueInput
  }

  /**
   * SetupProfile findFirst
   */
  export type SetupProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * Filter, which SetupProfile to fetch.
     */
    where?: SetupProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SetupProfiles to fetch.
     */
    orderBy?: SetupProfileOrderByWithRelationInput | SetupProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SetupProfiles.
     */
    cursor?: SetupProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SetupProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SetupProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SetupProfiles.
     */
    distinct?: SetupProfileScalarFieldEnum | SetupProfileScalarFieldEnum[]
  }

  /**
   * SetupProfile findFirstOrThrow
   */
  export type SetupProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * Filter, which SetupProfile to fetch.
     */
    where?: SetupProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SetupProfiles to fetch.
     */
    orderBy?: SetupProfileOrderByWithRelationInput | SetupProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SetupProfiles.
     */
    cursor?: SetupProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SetupProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SetupProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SetupProfiles.
     */
    distinct?: SetupProfileScalarFieldEnum | SetupProfileScalarFieldEnum[]
  }

  /**
   * SetupProfile findMany
   */
  export type SetupProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * Filter, which SetupProfiles to fetch.
     */
    where?: SetupProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SetupProfiles to fetch.
     */
    orderBy?: SetupProfileOrderByWithRelationInput | SetupProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SetupProfiles.
     */
    cursor?: SetupProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SetupProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SetupProfiles.
     */
    skip?: number
    distinct?: SetupProfileScalarFieldEnum | SetupProfileScalarFieldEnum[]
  }

  /**
   * SetupProfile create
   */
  export type SetupProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a SetupProfile.
     */
    data: XOR<SetupProfileCreateInput, SetupProfileUncheckedCreateInput>
  }

  /**
   * SetupProfile createMany
   */
  export type SetupProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SetupProfiles.
     */
    data: SetupProfileCreateManyInput | SetupProfileCreateManyInput[]
  }

  /**
   * SetupProfile update
   */
  export type SetupProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a SetupProfile.
     */
    data: XOR<SetupProfileUpdateInput, SetupProfileUncheckedUpdateInput>
    /**
     * Choose, which SetupProfile to update.
     */
    where: SetupProfileWhereUniqueInput
  }

  /**
   * SetupProfile updateMany
   */
  export type SetupProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SetupProfiles.
     */
    data: XOR<SetupProfileUpdateManyMutationInput, SetupProfileUncheckedUpdateManyInput>
    /**
     * Filter which SetupProfiles to update
     */
    where?: SetupProfileWhereInput
  }

  /**
   * SetupProfile upsert
   */
  export type SetupProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the SetupProfile to update in case it exists.
     */
    where: SetupProfileWhereUniqueInput
    /**
     * In case the SetupProfile found by the `where` argument doesn't exist, create a new SetupProfile with this data.
     */
    create: XOR<SetupProfileCreateInput, SetupProfileUncheckedCreateInput>
    /**
     * In case the SetupProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SetupProfileUpdateInput, SetupProfileUncheckedUpdateInput>
  }

  /**
   * SetupProfile delete
   */
  export type SetupProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
    /**
     * Filter which SetupProfile to delete.
     */
    where: SetupProfileWhereUniqueInput
  }

  /**
   * SetupProfile deleteMany
   */
  export type SetupProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SetupProfiles to delete
     */
    where?: SetupProfileWhereInput
  }

  /**
   * SetupProfile findRaw
   */
  export type SetupProfileFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SetupProfile aggregateRaw
   */
  export type SetupProfileAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SetupProfile without action
   */
  export type SetupProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SetupProfile
     */
    select?: SetupProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SetupProfileInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    rating: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    rating: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    hasEnded: boolean | null
    period: $Enums.Period | null
    status: $Enums.AppointmentStatus | null
    appointmentType: string | null
    usersId: string | null
    doctorsId: string | null
    rating: number | null
    review: string | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    hasEnded: boolean | null
    period: $Enums.Period | null
    status: $Enums.AppointmentStatus | null
    appointmentType: string | null
    usersId: string | null
    doctorsId: string | null
    rating: number | null
    review: string | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    date: number
    startTime: number
    endTime: number
    hasEnded: number
    period: number
    status: number
    appointmentType: number
    usersId: number
    doctorsId: number
    rating: number
    review: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    rating?: true
  }

  export type AppointmentSumAggregateInputType = {
    rating?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    hasEnded?: true
    period?: true
    status?: true
    appointmentType?: true
    usersId?: true
    doctorsId?: true
    rating?: true
    review?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    hasEnded?: true
    period?: true
    status?: true
    appointmentType?: true
    usersId?: true
    doctorsId?: true
    rating?: true
    review?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    hasEnded?: true
    period?: true
    status?: true
    appointmentType?: true
    usersId?: true
    doctorsId?: true
    rating?: true
    review?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    date: Date
    startTime: string
    endTime: string
    hasEnded: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    usersId: string
    doctorsId: string
    rating: number | null
    review: string | null
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    hasEnded?: boolean
    period?: boolean
    status?: boolean
    appointmentType?: boolean
    usersId?: boolean
    doctorsId?: boolean
    rating?: boolean
    review?: boolean
    Doctors?: boolean | DoctorsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    hasEnded?: boolean
    period?: boolean
    status?: boolean
    appointmentType?: boolean
    usersId?: boolean
    doctorsId?: boolean
    rating?: boolean
    review?: boolean
  }


  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Doctors?: boolean | DoctorsDefaultArgs<ExtArgs>
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      Doctors: Prisma.$DoctorsPayload<ExtArgs>
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      startTime: string
      endTime: string
      hasEnded: boolean | null
      period: $Enums.Period
      status: $Enums.AppointmentStatus
      appointmentType: string
      usersId: string
      doctorsId: string
      rating: number | null
      review: string | null
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }


  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppointmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
    **/
    create<T extends AppointmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AppointmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
    **/
    delete<T extends AppointmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
    **/
    upsert<T extends AppointmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Appointments that matches the filter.
     * @param {AppointmentFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const appointment = await prisma.appointment.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AppointmentFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Appointment.
     * @param {AppointmentAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const appointment = await prisma.appointment.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AppointmentAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Doctors<T extends DoctorsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorsDefaultArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Appointment model
   */ 
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly date: FieldRef<"Appointment", 'DateTime'>
    readonly startTime: FieldRef<"Appointment", 'String'>
    readonly endTime: FieldRef<"Appointment", 'String'>
    readonly hasEnded: FieldRef<"Appointment", 'Boolean'>
    readonly period: FieldRef<"Appointment", 'Period'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly appointmentType: FieldRef<"Appointment", 'String'>
    readonly usersId: FieldRef<"Appointment", 'String'>
    readonly doctorsId: FieldRef<"Appointment", 'String'>
    readonly rating: FieldRef<"Appointment", 'Int'>
    readonly review: FieldRef<"Appointment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
  }

  /**
   * Appointment findRaw
   */
  export type AppointmentFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Appointment aggregateRaw
   */
  export type AppointmentAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Doctors
   */

  export type AggregateDoctors = {
    _count: DoctorsCountAggregateOutputType | null
    _avg: DoctorsAvgAggregateOutputType | null
    _sum: DoctorsSumAggregateOutputType | null
    _min: DoctorsMinAggregateOutputType | null
    _max: DoctorsMaxAggregateOutputType | null
  }

  export type DoctorsAvgAggregateOutputType = {
    yearsOfExperience: number | null
    graduationYear: number | null
  }

  export type DoctorsSumAggregateOutputType = {
    yearsOfExperience: number | null
    graduationYear: number | null
  }

  export type DoctorsMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    specialization: string | null
    country: string | null
    state: string | null
    certificate: string | null
    isApproved: boolean | null
    soundEnabled: boolean | null
    inviteFriendsEnabled: boolean | null
    vibrationEnabled: boolean | null
    profilePicture: string | null
    yearsOfExperience: number | null
    graduationYear: number | null
    school: string | null
    medicalLicensePicture: string | null
    about: string | null
    appointmentId: string | null
  }

  export type DoctorsMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    specialization: string | null
    country: string | null
    state: string | null
    certificate: string | null
    isApproved: boolean | null
    soundEnabled: boolean | null
    inviteFriendsEnabled: boolean | null
    vibrationEnabled: boolean | null
    profilePicture: string | null
    yearsOfExperience: number | null
    graduationYear: number | null
    school: string | null
    medicalLicensePicture: string | null
    about: string | null
    appointmentId: string | null
  }

  export type DoctorsCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phoneNumber: number
    password: number
    specialization: number
    country: number
    state: number
    certificate: number
    isApproved: number
    soundEnabled: number
    inviteFriendsEnabled: number
    vibrationEnabled: number
    profilePicture: number
    yearsOfExperience: number
    graduationYear: number
    school: number
    medicalLicensePicture: number
    about: number
    appointmentId: number
    _all: number
  }


  export type DoctorsAvgAggregateInputType = {
    yearsOfExperience?: true
    graduationYear?: true
  }

  export type DoctorsSumAggregateInputType = {
    yearsOfExperience?: true
    graduationYear?: true
  }

  export type DoctorsMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    password?: true
    specialization?: true
    country?: true
    state?: true
    certificate?: true
    isApproved?: true
    soundEnabled?: true
    inviteFriendsEnabled?: true
    vibrationEnabled?: true
    profilePicture?: true
    yearsOfExperience?: true
    graduationYear?: true
    school?: true
    medicalLicensePicture?: true
    about?: true
    appointmentId?: true
  }

  export type DoctorsMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    password?: true
    specialization?: true
    country?: true
    state?: true
    certificate?: true
    isApproved?: true
    soundEnabled?: true
    inviteFriendsEnabled?: true
    vibrationEnabled?: true
    profilePicture?: true
    yearsOfExperience?: true
    graduationYear?: true
    school?: true
    medicalLicensePicture?: true
    about?: true
    appointmentId?: true
  }

  export type DoctorsCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    password?: true
    specialization?: true
    country?: true
    state?: true
    certificate?: true
    isApproved?: true
    soundEnabled?: true
    inviteFriendsEnabled?: true
    vibrationEnabled?: true
    profilePicture?: true
    yearsOfExperience?: true
    graduationYear?: true
    school?: true
    medicalLicensePicture?: true
    about?: true
    appointmentId?: true
    _all?: true
  }

  export type DoctorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to aggregate.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorsMaxAggregateInputType
  }

  export type GetDoctorsAggregateType<T extends DoctorsAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctors[P]>
      : GetScalarType<T[P], AggregateDoctors[P]>
  }




  export type DoctorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorsWhereInput
    orderBy?: DoctorsOrderByWithAggregationInput | DoctorsOrderByWithAggregationInput[]
    by: DoctorsScalarFieldEnum[] | DoctorsScalarFieldEnum
    having?: DoctorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorsCountAggregateInputType | true
    _avg?: DoctorsAvgAggregateInputType
    _sum?: DoctorsSumAggregateInputType
    _min?: DoctorsMinAggregateInputType
    _max?: DoctorsMaxAggregateInputType
  }

  export type DoctorsGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved: boolean
    soundEnabled: boolean
    inviteFriendsEnabled: boolean
    vibrationEnabled: boolean
    profilePicture: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about: string | null
    appointmentId: string | null
    _count: DoctorsCountAggregateOutputType | null
    _avg: DoctorsAvgAggregateOutputType | null
    _sum: DoctorsSumAggregateOutputType | null
    _min: DoctorsMinAggregateOutputType | null
    _max: DoctorsMaxAggregateOutputType | null
  }

  type GetDoctorsGroupByPayload<T extends DoctorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorsGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorsGroupByOutputType[P]>
        }
      >
    >


  export type DoctorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    specialization?: boolean
    country?: boolean
    state?: boolean
    certificate?: boolean
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: boolean
    yearsOfExperience?: boolean
    graduationYear?: boolean
    school?: boolean
    medicalLicensePicture?: boolean
    about?: boolean
    appointmentId?: boolean
    workingHours?: boolean | Doctors$workingHoursArgs<ExtArgs>
    Appointment?: boolean | Doctors$AppointmentArgs<ExtArgs>
    _count?: boolean | DoctorsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctors"]>

  export type DoctorsSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    specialization?: boolean
    country?: boolean
    state?: boolean
    certificate?: boolean
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: boolean
    yearsOfExperience?: boolean
    graduationYear?: boolean
    school?: boolean
    medicalLicensePicture?: boolean
    about?: boolean
    appointmentId?: boolean
  }


  export type DoctorsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workingHours?: boolean | Doctors$workingHoursArgs<ExtArgs>
    Appointment?: boolean | Doctors$AppointmentArgs<ExtArgs>
    _count?: boolean | DoctorsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DoctorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctors"
    objects: {
      workingHours: Prisma.$WorkingHoursPayload<ExtArgs>[]
      Appointment: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      phoneNumber: string
      password: string
      specialization: string
      country: string
      state: string
      certificate: string
      isApproved: boolean
      soundEnabled: boolean
      inviteFriendsEnabled: boolean
      vibrationEnabled: boolean
      profilePicture: string | null
      yearsOfExperience: number
      graduationYear: number
      school: string
      medicalLicensePicture: string
      about: string | null
      appointmentId: string | null
    }, ExtArgs["result"]["doctors"]>
    composites: {}
  }


  type DoctorsGetPayload<S extends boolean | null | undefined | DoctorsDefaultArgs> = $Result.GetResult<Prisma.$DoctorsPayload, S>

  type DoctorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoctorsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorsCountAggregateInputType | true
    }

  export interface DoctorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctors'], meta: { name: 'Doctors' } }
    /**
     * Find zero or one Doctors that matches the filter.
     * @param {DoctorsFindUniqueArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorsFindUniqueArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Doctors that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoctorsFindUniqueOrThrowArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DoctorsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsFindFirstArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorsFindFirstArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Doctors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsFindFirstOrThrowArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DoctorsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctors.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorsWithIdOnly = await prisma.doctors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoctorsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Doctors.
     * @param {DoctorsCreateArgs} args - Arguments to create a Doctors.
     * @example
     * // Create one Doctors
     * const Doctors = await prisma.doctors.create({
     *   data: {
     *     // ... data to create a Doctors
     *   }
     * })
     * 
    **/
    create<T extends DoctorsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorsCreateArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Doctors.
     * @param {DoctorsCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctors = await prisma.doctors.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DoctorsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doctors.
     * @param {DoctorsDeleteArgs} args - Arguments to delete one Doctors.
     * @example
     * // Delete one Doctors
     * const Doctors = await prisma.doctors.delete({
     *   where: {
     *     // ... filter to delete one Doctors
     *   }
     * })
     * 
    **/
    delete<T extends DoctorsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorsDeleteArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Doctors.
     * @param {DoctorsUpdateArgs} args - Arguments to update one Doctors.
     * @example
     * // Update one Doctors
     * const doctors = await prisma.doctors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorsUpdateArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorsDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctors = await prisma.doctors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctors.
     * @param {DoctorsUpsertArgs} args - Arguments to update or create a Doctors.
     * @example
     * // Update or create a Doctors
     * const doctors = await prisma.doctors.upsert({
     *   create: {
     *     // ... data to create a Doctors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctors we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorsUpsertArgs<ExtArgs>>
    ): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * @param {DoctorsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const doctors = await prisma.doctors.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: DoctorsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Doctors.
     * @param {DoctorsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const doctors = await prisma.doctors.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: DoctorsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctors.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorsCountArgs>(
      args?: Subset<T, DoctorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorsAggregateArgs>(args: Subset<T, DoctorsAggregateArgs>): Prisma.PrismaPromise<GetDoctorsAggregateType<T>>

    /**
     * Group by Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorsGroupByArgs['orderBy'] }
        : { orderBy?: DoctorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctors model
   */
  readonly fields: DoctorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    workingHours<T extends Doctors$workingHoursArgs<ExtArgs> = {}>(args?: Subset<T, Doctors$workingHoursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'findMany'> | Null>;

    Appointment<T extends Doctors$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Doctors$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Doctors model
   */ 
  interface DoctorsFieldRefs {
    readonly id: FieldRef<"Doctors", 'String'>
    readonly firstName: FieldRef<"Doctors", 'String'>
    readonly lastName: FieldRef<"Doctors", 'String'>
    readonly email: FieldRef<"Doctors", 'String'>
    readonly phoneNumber: FieldRef<"Doctors", 'String'>
    readonly password: FieldRef<"Doctors", 'String'>
    readonly specialization: FieldRef<"Doctors", 'String'>
    readonly country: FieldRef<"Doctors", 'String'>
    readonly state: FieldRef<"Doctors", 'String'>
    readonly certificate: FieldRef<"Doctors", 'String'>
    readonly isApproved: FieldRef<"Doctors", 'Boolean'>
    readonly soundEnabled: FieldRef<"Doctors", 'Boolean'>
    readonly inviteFriendsEnabled: FieldRef<"Doctors", 'Boolean'>
    readonly vibrationEnabled: FieldRef<"Doctors", 'Boolean'>
    readonly profilePicture: FieldRef<"Doctors", 'String'>
    readonly yearsOfExperience: FieldRef<"Doctors", 'Int'>
    readonly graduationYear: FieldRef<"Doctors", 'Int'>
    readonly school: FieldRef<"Doctors", 'String'>
    readonly medicalLicensePicture: FieldRef<"Doctors", 'String'>
    readonly about: FieldRef<"Doctors", 'String'>
    readonly appointmentId: FieldRef<"Doctors", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Doctors findUnique
   */
  export type DoctorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors findUniqueOrThrow
   */
  export type DoctorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors findFirst
   */
  export type DoctorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * Doctors findFirstOrThrow
   */
  export type DoctorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * Doctors findMany
   */
  export type DoctorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * Doctors create
   */
  export type DoctorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctors.
     */
    data: XOR<DoctorsCreateInput, DoctorsUncheckedCreateInput>
  }

  /**
   * Doctors createMany
   */
  export type DoctorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorsCreateManyInput | DoctorsCreateManyInput[]
  }

  /**
   * Doctors update
   */
  export type DoctorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctors.
     */
    data: XOR<DoctorsUpdateInput, DoctorsUncheckedUpdateInput>
    /**
     * Choose, which Doctors to update.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors updateMany
   */
  export type DoctorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorsUpdateManyMutationInput, DoctorsUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorsWhereInput
  }

  /**
   * Doctors upsert
   */
  export type DoctorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctors to update in case it exists.
     */
    where: DoctorsWhereUniqueInput
    /**
     * In case the Doctors found by the `where` argument doesn't exist, create a new Doctors with this data.
     */
    create: XOR<DoctorsCreateInput, DoctorsUncheckedCreateInput>
    /**
     * In case the Doctors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorsUpdateInput, DoctorsUncheckedUpdateInput>
  }

  /**
   * Doctors delete
   */
  export type DoctorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter which Doctors to delete.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors deleteMany
   */
  export type DoctorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorsWhereInput
  }

  /**
   * Doctors findRaw
   */
  export type DoctorsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Doctors aggregateRaw
   */
  export type DoctorsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Doctors.workingHours
   */
  export type Doctors$workingHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    where?: WorkingHoursWhereInput
    orderBy?: WorkingHoursOrderByWithRelationInput | WorkingHoursOrderByWithRelationInput[]
    cursor?: WorkingHoursWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkingHoursScalarFieldEnum | WorkingHoursScalarFieldEnum[]
  }

  /**
   * Doctors.Appointment
   */
  export type Doctors$AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Doctors without action
   */
  export type DoctorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
  }


  /**
   * Model WorkingHours
   */

  export type AggregateWorkingHours = {
    _count: WorkingHoursCountAggregateOutputType | null
    _min: WorkingHoursMinAggregateOutputType | null
    _max: WorkingHoursMaxAggregateOutputType | null
  }

  export type WorkingHoursMinAggregateOutputType = {
    id: string | null
    day: string | null
    startTime: string | null
    endTime: string | null
    doctorId: string | null
  }

  export type WorkingHoursMaxAggregateOutputType = {
    id: string | null
    day: string | null
    startTime: string | null
    endTime: string | null
    doctorId: string | null
  }

  export type WorkingHoursCountAggregateOutputType = {
    id: number
    day: number
    startTime: number
    endTime: number
    doctorId: number
    _all: number
  }


  export type WorkingHoursMinAggregateInputType = {
    id?: true
    day?: true
    startTime?: true
    endTime?: true
    doctorId?: true
  }

  export type WorkingHoursMaxAggregateInputType = {
    id?: true
    day?: true
    startTime?: true
    endTime?: true
    doctorId?: true
  }

  export type WorkingHoursCountAggregateInputType = {
    id?: true
    day?: true
    startTime?: true
    endTime?: true
    doctorId?: true
    _all?: true
  }

  export type WorkingHoursAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkingHours to aggregate.
     */
    where?: WorkingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingHours to fetch.
     */
    orderBy?: WorkingHoursOrderByWithRelationInput | WorkingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkingHours
    **/
    _count?: true | WorkingHoursCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkingHoursMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkingHoursMaxAggregateInputType
  }

  export type GetWorkingHoursAggregateType<T extends WorkingHoursAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkingHours]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkingHours[P]>
      : GetScalarType<T[P], AggregateWorkingHours[P]>
  }




  export type WorkingHoursGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkingHoursWhereInput
    orderBy?: WorkingHoursOrderByWithAggregationInput | WorkingHoursOrderByWithAggregationInput[]
    by: WorkingHoursScalarFieldEnum[] | WorkingHoursScalarFieldEnum
    having?: WorkingHoursScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkingHoursCountAggregateInputType | true
    _min?: WorkingHoursMinAggregateInputType
    _max?: WorkingHoursMaxAggregateInputType
  }

  export type WorkingHoursGroupByOutputType = {
    id: string
    day: string
    startTime: string
    endTime: string
    doctorId: string
    _count: WorkingHoursCountAggregateOutputType | null
    _min: WorkingHoursMinAggregateOutputType | null
    _max: WorkingHoursMaxAggregateOutputType | null
  }

  type GetWorkingHoursGroupByPayload<T extends WorkingHoursGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkingHoursGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkingHoursGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkingHoursGroupByOutputType[P]>
            : GetScalarType<T[P], WorkingHoursGroupByOutputType[P]>
        }
      >
    >


  export type WorkingHoursSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    day?: boolean
    startTime?: boolean
    endTime?: boolean
    doctorId?: boolean
    doctor?: boolean | DoctorsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workingHours"]>

  export type WorkingHoursSelectScalar = {
    id?: boolean
    day?: boolean
    startTime?: boolean
    endTime?: boolean
    doctorId?: boolean
  }


  export type WorkingHoursInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorsDefaultArgs<ExtArgs>
  }


  export type $WorkingHoursPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkingHours"
    objects: {
      doctor: Prisma.$DoctorsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      day: string
      startTime: string
      endTime: string
      doctorId: string
    }, ExtArgs["result"]["workingHours"]>
    composites: {}
  }


  type WorkingHoursGetPayload<S extends boolean | null | undefined | WorkingHoursDefaultArgs> = $Result.GetResult<Prisma.$WorkingHoursPayload, S>

  type WorkingHoursCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkingHoursFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkingHoursCountAggregateInputType | true
    }

  export interface WorkingHoursDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkingHours'], meta: { name: 'WorkingHours' } }
    /**
     * Find zero or one WorkingHours that matches the filter.
     * @param {WorkingHoursFindUniqueArgs} args - Arguments to find a WorkingHours
     * @example
     * // Get one WorkingHours
     * const workingHours = await prisma.workingHours.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkingHoursFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkingHoursFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WorkingHours that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkingHoursFindUniqueOrThrowArgs} args - Arguments to find a WorkingHours
     * @example
     * // Get one WorkingHours
     * const workingHours = await prisma.workingHours.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkingHoursFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkingHoursFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WorkingHours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingHoursFindFirstArgs} args - Arguments to find a WorkingHours
     * @example
     * // Get one WorkingHours
     * const workingHours = await prisma.workingHours.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkingHoursFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkingHoursFindFirstArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WorkingHours that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingHoursFindFirstOrThrowArgs} args - Arguments to find a WorkingHours
     * @example
     * // Get one WorkingHours
     * const workingHours = await prisma.workingHours.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkingHoursFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkingHoursFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WorkingHours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingHoursFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkingHours
     * const workingHours = await prisma.workingHours.findMany()
     * 
     * // Get first 10 WorkingHours
     * const workingHours = await prisma.workingHours.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workingHoursWithIdOnly = await prisma.workingHours.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkingHoursFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkingHoursFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WorkingHours.
     * @param {WorkingHoursCreateArgs} args - Arguments to create a WorkingHours.
     * @example
     * // Create one WorkingHours
     * const WorkingHours = await prisma.workingHours.create({
     *   data: {
     *     // ... data to create a WorkingHours
     *   }
     * })
     * 
    **/
    create<T extends WorkingHoursCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkingHoursCreateArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WorkingHours.
     * @param {WorkingHoursCreateManyArgs} args - Arguments to create many WorkingHours.
     * @example
     * // Create many WorkingHours
     * const workingHours = await prisma.workingHours.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends WorkingHoursCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkingHoursCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkingHours.
     * @param {WorkingHoursDeleteArgs} args - Arguments to delete one WorkingHours.
     * @example
     * // Delete one WorkingHours
     * const WorkingHours = await prisma.workingHours.delete({
     *   where: {
     *     // ... filter to delete one WorkingHours
     *   }
     * })
     * 
    **/
    delete<T extends WorkingHoursDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkingHoursDeleteArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WorkingHours.
     * @param {WorkingHoursUpdateArgs} args - Arguments to update one WorkingHours.
     * @example
     * // Update one WorkingHours
     * const workingHours = await prisma.workingHours.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkingHoursUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkingHoursUpdateArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WorkingHours.
     * @param {WorkingHoursDeleteManyArgs} args - Arguments to filter WorkingHours to delete.
     * @example
     * // Delete a few WorkingHours
     * const { count } = await prisma.workingHours.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkingHoursDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkingHoursDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingHoursUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkingHours
     * const workingHours = await prisma.workingHours.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkingHoursUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkingHoursUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkingHours.
     * @param {WorkingHoursUpsertArgs} args - Arguments to update or create a WorkingHours.
     * @example
     * // Update or create a WorkingHours
     * const workingHours = await prisma.workingHours.upsert({
     *   create: {
     *     // ... data to create a WorkingHours
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkingHours we want to update
     *   }
     * })
    **/
    upsert<T extends WorkingHoursUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkingHoursUpsertArgs<ExtArgs>>
    ): Prisma__WorkingHoursClient<$Result.GetResult<Prisma.$WorkingHoursPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more WorkingHours that matches the filter.
     * @param {WorkingHoursFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const workingHours = await prisma.workingHours.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: WorkingHoursFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a WorkingHours.
     * @param {WorkingHoursAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const workingHours = await prisma.workingHours.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: WorkingHoursAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of WorkingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingHoursCountArgs} args - Arguments to filter WorkingHours to count.
     * @example
     * // Count the number of WorkingHours
     * const count = await prisma.workingHours.count({
     *   where: {
     *     // ... the filter for the WorkingHours we want to count
     *   }
     * })
    **/
    count<T extends WorkingHoursCountArgs>(
      args?: Subset<T, WorkingHoursCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkingHoursCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingHoursAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkingHoursAggregateArgs>(args: Subset<T, WorkingHoursAggregateArgs>): Prisma.PrismaPromise<GetWorkingHoursAggregateType<T>>

    /**
     * Group by WorkingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkingHoursGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkingHoursGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkingHoursGroupByArgs['orderBy'] }
        : { orderBy?: WorkingHoursGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkingHoursGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkingHoursGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkingHours model
   */
  readonly fields: WorkingHoursFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkingHours.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkingHoursClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    doctor<T extends DoctorsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorsDefaultArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WorkingHours model
   */ 
  interface WorkingHoursFieldRefs {
    readonly id: FieldRef<"WorkingHours", 'String'>
    readonly day: FieldRef<"WorkingHours", 'String'>
    readonly startTime: FieldRef<"WorkingHours", 'String'>
    readonly endTime: FieldRef<"WorkingHours", 'String'>
    readonly doctorId: FieldRef<"WorkingHours", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WorkingHours findUnique
   */
  export type WorkingHoursFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * Filter, which WorkingHours to fetch.
     */
    where: WorkingHoursWhereUniqueInput
  }

  /**
   * WorkingHours findUniqueOrThrow
   */
  export type WorkingHoursFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * Filter, which WorkingHours to fetch.
     */
    where: WorkingHoursWhereUniqueInput
  }

  /**
   * WorkingHours findFirst
   */
  export type WorkingHoursFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * Filter, which WorkingHours to fetch.
     */
    where?: WorkingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingHours to fetch.
     */
    orderBy?: WorkingHoursOrderByWithRelationInput | WorkingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkingHours.
     */
    cursor?: WorkingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkingHours.
     */
    distinct?: WorkingHoursScalarFieldEnum | WorkingHoursScalarFieldEnum[]
  }

  /**
   * WorkingHours findFirstOrThrow
   */
  export type WorkingHoursFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * Filter, which WorkingHours to fetch.
     */
    where?: WorkingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingHours to fetch.
     */
    orderBy?: WorkingHoursOrderByWithRelationInput | WorkingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkingHours.
     */
    cursor?: WorkingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkingHours.
     */
    distinct?: WorkingHoursScalarFieldEnum | WorkingHoursScalarFieldEnum[]
  }

  /**
   * WorkingHours findMany
   */
  export type WorkingHoursFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * Filter, which WorkingHours to fetch.
     */
    where?: WorkingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkingHours to fetch.
     */
    orderBy?: WorkingHoursOrderByWithRelationInput | WorkingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkingHours.
     */
    cursor?: WorkingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkingHours.
     */
    skip?: number
    distinct?: WorkingHoursScalarFieldEnum | WorkingHoursScalarFieldEnum[]
  }

  /**
   * WorkingHours create
   */
  export type WorkingHoursCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkingHours.
     */
    data: XOR<WorkingHoursCreateInput, WorkingHoursUncheckedCreateInput>
  }

  /**
   * WorkingHours createMany
   */
  export type WorkingHoursCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkingHours.
     */
    data: WorkingHoursCreateManyInput | WorkingHoursCreateManyInput[]
  }

  /**
   * WorkingHours update
   */
  export type WorkingHoursUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkingHours.
     */
    data: XOR<WorkingHoursUpdateInput, WorkingHoursUncheckedUpdateInput>
    /**
     * Choose, which WorkingHours to update.
     */
    where: WorkingHoursWhereUniqueInput
  }

  /**
   * WorkingHours updateMany
   */
  export type WorkingHoursUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkingHours.
     */
    data: XOR<WorkingHoursUpdateManyMutationInput, WorkingHoursUncheckedUpdateManyInput>
    /**
     * Filter which WorkingHours to update
     */
    where?: WorkingHoursWhereInput
  }

  /**
   * WorkingHours upsert
   */
  export type WorkingHoursUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkingHours to update in case it exists.
     */
    where: WorkingHoursWhereUniqueInput
    /**
     * In case the WorkingHours found by the `where` argument doesn't exist, create a new WorkingHours with this data.
     */
    create: XOR<WorkingHoursCreateInput, WorkingHoursUncheckedCreateInput>
    /**
     * In case the WorkingHours was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkingHoursUpdateInput, WorkingHoursUncheckedUpdateInput>
  }

  /**
   * WorkingHours delete
   */
  export type WorkingHoursDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
    /**
     * Filter which WorkingHours to delete.
     */
    where: WorkingHoursWhereUniqueInput
  }

  /**
   * WorkingHours deleteMany
   */
  export type WorkingHoursDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkingHours to delete
     */
    where?: WorkingHoursWhereInput
  }

  /**
   * WorkingHours findRaw
   */
  export type WorkingHoursFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * WorkingHours aggregateRaw
   */
  export type WorkingHoursAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * WorkingHours without action
   */
  export type WorkingHoursDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkingHours
     */
    select?: WorkingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkingHoursInclude<ExtArgs> | null
  }


  /**
   * Model Products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    amount: number | null
    quantity: number | null
  }

  export type ProductsSumAggregateOutputType = {
    amount: number | null
    quantity: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: string | null
    image: string | null
    title: string | null
    amount: number | null
    delivery: string | null
    description: string | null
    howToUse: string | null
    quantity: number | null
    productCategory: $Enums.productCategory | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: string | null
    image: string | null
    title: string | null
    amount: number | null
    delivery: string | null
    description: string | null
    howToUse: string | null
    quantity: number | null
    productCategory: $Enums.productCategory | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    image: number
    title: number
    amount: number
    delivery: number
    description: number
    howToUse: number
    quantity: number
    productCategory: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    amount?: true
    quantity?: true
  }

  export type ProductsSumAggregateInputType = {
    amount?: true
    quantity?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    description?: true
    howToUse?: true
    quantity?: true
    productCategory?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    description?: true
    howToUse?: true
    quantity?: true
    productCategory?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    description?: true
    howToUse?: true
    quantity?: true
    productCategory?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to aggregate.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type ProductsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductsWhereInput
    orderBy?: ProductsOrderByWithAggregationInput | ProductsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: ProductsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends ProductsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type ProductsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    title?: boolean
    amount?: boolean
    delivery?: boolean
    description?: boolean
    howToUse?: boolean
    quantity?: boolean
    productCategory?: boolean
    CartItem?: boolean | Products$CartItemArgs<ExtArgs>
    SaveProduct?: boolean | Products$SaveProductArgs<ExtArgs>
    Ratings?: boolean | Products$RatingsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type ProductsSelectScalar = {
    id?: boolean
    image?: boolean
    title?: boolean
    amount?: boolean
    delivery?: boolean
    description?: boolean
    howToUse?: boolean
    quantity?: boolean
    productCategory?: boolean
  }


  export type ProductsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CartItem?: boolean | Products$CartItemArgs<ExtArgs>
    SaveProduct?: boolean | Products$SaveProductArgs<ExtArgs>
    Ratings?: boolean | Products$RatingsArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProductsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Products"
    objects: {
      CartItem: Prisma.$CartItemPayload<ExtArgs>[]
      SaveProduct: Prisma.$SaveProductPayload<ExtArgs>[]
      Ratings: Prisma.$RatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      image: string
      title: string
      amount: number
      delivery: string
      description: string
      howToUse: string
      quantity: number
      productCategory: $Enums.productCategory
    }, ExtArgs["result"]["products"]>
    composites: {}
  }


  type ProductsGetPayload<S extends boolean | null | undefined | ProductsDefaultArgs> = $Result.GetResult<Prisma.$ProductsPayload, S>

  type ProductsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface ProductsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Products'], meta: { name: 'Products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {ProductsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindFirstArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {ProductsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends ProductsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsCreateArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductsCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ProductsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {ProductsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends ProductsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsDeleteArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {ProductsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsUpdateArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {ProductsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends ProductsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductsUpsertArgs<ExtArgs>>
    ): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * @param {ProductsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const products = await prisma.products.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ProductsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Products.
     * @param {ProductsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const products = await prisma.products.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ProductsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductsCountArgs>(
      args?: Subset<T, ProductsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductsGroupByArgs['orderBy'] }
        : { orderBy?: ProductsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Products model
   */
  readonly fields: ProductsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    CartItem<T extends Products$CartItemArgs<ExtArgs> = {}>(args?: Subset<T, Products$CartItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    SaveProduct<T extends Products$SaveProductArgs<ExtArgs> = {}>(args?: Subset<T, Products$SaveProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    Ratings<T extends Products$RatingsArgs<ExtArgs> = {}>(args?: Subset<T, Products$RatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Products model
   */ 
  interface ProductsFieldRefs {
    readonly id: FieldRef<"Products", 'String'>
    readonly image: FieldRef<"Products", 'String'>
    readonly title: FieldRef<"Products", 'String'>
    readonly amount: FieldRef<"Products", 'Int'>
    readonly delivery: FieldRef<"Products", 'String'>
    readonly description: FieldRef<"Products", 'String'>
    readonly howToUse: FieldRef<"Products", 'String'>
    readonly quantity: FieldRef<"Products", 'Int'>
    readonly productCategory: FieldRef<"Products", 'productCategory'>
  }
    

  // Custom InputTypes
  /**
   * Products findUnique
   */
  export type ProductsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where: ProductsWhereUniqueInput
  }

  /**
   * Products findUniqueOrThrow
   */
  export type ProductsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where: ProductsWhereUniqueInput
  }

  /**
   * Products findFirst
   */
  export type ProductsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * Products findFirstOrThrow
   */
  export type ProductsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * Products findMany
   */
  export type ProductsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductsOrderByWithRelationInput | ProductsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * Products create
   */
  export type ProductsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * The data needed to create a Products.
     */
    data: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
  }

  /**
   * Products createMany
   */
  export type ProductsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductsCreateManyInput | ProductsCreateManyInput[]
  }

  /**
   * Products update
   */
  export type ProductsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * The data needed to update a Products.
     */
    data: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
    /**
     * Choose, which Products to update.
     */
    where: ProductsWhereUniqueInput
  }

  /**
   * Products updateMany
   */
  export type ProductsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductsUpdateManyMutationInput, ProductsUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductsWhereInput
  }

  /**
   * Products upsert
   */
  export type ProductsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * The filter to search for the Products to update in case it exists.
     */
    where: ProductsWhereUniqueInput
    /**
     * In case the Products found by the `where` argument doesn't exist, create a new Products with this data.
     */
    create: XOR<ProductsCreateInput, ProductsUncheckedCreateInput>
    /**
     * In case the Products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductsUpdateInput, ProductsUncheckedUpdateInput>
  }

  /**
   * Products delete
   */
  export type ProductsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
    /**
     * Filter which Products to delete.
     */
    where: ProductsWhereUniqueInput
  }

  /**
   * Products deleteMany
   */
  export type ProductsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductsWhereInput
  }

  /**
   * Products findRaw
   */
  export type ProductsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Products aggregateRaw
   */
  export type ProductsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Products.CartItem
   */
  export type Products$CartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Products.SaveProduct
   */
  export type Products$SaveProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    where?: SaveProductWhereInput
    orderBy?: SaveProductOrderByWithRelationInput | SaveProductOrderByWithRelationInput[]
    cursor?: SaveProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaveProductScalarFieldEnum | SaveProductScalarFieldEnum[]
  }

  /**
   * Products.Ratings
   */
  export type Products$RatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Products without action
   */
  export type ProductsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Products
     */
    select?: ProductsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductsInclude<ExtArgs> | null
  }


  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    value: number | null
  }

  export type RatingSumAggregateOutputType = {
    value: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    value: number | null
    productId: string | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    value: number | null
    productId: string | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    value: number
    productId: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    value?: true
  }

  export type RatingSumAggregateInputType = {
    value?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    value?: true
    productId?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    value?: true
    productId?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    value?: true
    productId?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: string
    value: number
    productId: string
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    productId?: boolean
    product?: boolean | ProductsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectScalar = {
    id?: boolean
    value?: boolean
    productId?: boolean
  }


  export type RatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductsDefaultArgs<ExtArgs>
  }


  export type $RatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      product: Prisma.$ProductsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      value: number
      productId: string
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }


  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RatingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RatingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RatingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends RatingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingCreateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ratings.
     * @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RatingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends RatingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RatingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RatingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RatingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends RatingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * @param {RatingFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const rating = await prisma.rating.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: RatingFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Rating.
     * @param {RatingAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const rating = await prisma.rating.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: RatingAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends ProductsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductsDefaultArgs<ExtArgs>>): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rating model
   */ 
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'String'>
    readonly value: FieldRef<"Rating", 'Int'>
    readonly productId: FieldRef<"Rating", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }

  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
  }

  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }

  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }

  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }

  /**
   * Rating findRaw
   */
  export type RatingFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Rating aggregateRaw
   */
  export type RatingAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
  }


  /**
   * Model CartItem
   */

  export type AggregateCartItem = {
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  export type CartItemAvgAggregateOutputType = {
    amount: number | null
    quantity: number | null
  }

  export type CartItemSumAggregateOutputType = {
    amount: number | null
    quantity: number | null
  }

  export type CartItemMinAggregateOutputType = {
    id: string | null
    image: string | null
    title: string | null
    amount: number | null
    delivery: string | null
    quantity: number | null
    userId: string | null
    productId: string | null
  }

  export type CartItemMaxAggregateOutputType = {
    id: string | null
    image: string | null
    title: string | null
    amount: number | null
    delivery: string | null
    quantity: number | null
    userId: string | null
    productId: string | null
  }

  export type CartItemCountAggregateOutputType = {
    id: number
    image: number
    title: number
    amount: number
    delivery: number
    quantity: number
    userId: number
    productId: number
    _all: number
  }


  export type CartItemAvgAggregateInputType = {
    amount?: true
    quantity?: true
  }

  export type CartItemSumAggregateInputType = {
    amount?: true
    quantity?: true
  }

  export type CartItemMinAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type CartItemMaxAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    quantity?: true
    userId?: true
    productId?: true
  }

  export type CartItemCountAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    quantity?: true
    userId?: true
    productId?: true
    _all?: true
  }

  export type CartItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItem to aggregate.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartItems
    **/
    _count?: true | CartItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartItemMaxAggregateInputType
  }

  export type GetCartItemAggregateType<T extends CartItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCartItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartItem[P]>
      : GetScalarType<T[P], AggregateCartItem[P]>
  }




  export type CartItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithAggregationInput | CartItemOrderByWithAggregationInput[]
    by: CartItemScalarFieldEnum[] | CartItemScalarFieldEnum
    having?: CartItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartItemCountAggregateInputType | true
    _avg?: CartItemAvgAggregateInputType
    _sum?: CartItemSumAggregateInputType
    _min?: CartItemMinAggregateInputType
    _max?: CartItemMaxAggregateInputType
  }

  export type CartItemGroupByOutputType = {
    id: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    userId: string
    productId: string
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  type GetCartItemGroupByPayload<T extends CartItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartItemGroupByOutputType[P]>
            : GetScalarType<T[P], CartItemGroupByOutputType[P]>
        }
      >
    >


  export type CartItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    title?: boolean
    amount?: boolean
    delivery?: boolean
    quantity?: boolean
    userId?: boolean
    productId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectScalar = {
    id?: boolean
    image?: boolean
    title?: boolean
    amount?: boolean
    delivery?: boolean
    quantity?: boolean
    userId?: boolean
    productId?: boolean
  }


  export type CartItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductsDefaultArgs<ExtArgs>
  }


  export type $CartItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartItem"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      product: Prisma.$ProductsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      image: string
      title: string
      amount: number
      delivery: string
      quantity: number
      userId: string
      productId: string
    }, ExtArgs["result"]["cartItem"]>
    composites: {}
  }


  type CartItemGetPayload<S extends boolean | null | undefined | CartItemDefaultArgs> = $Result.GetResult<Prisma.$CartItemPayload, S>

  type CartItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CartItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CartItemCountAggregateInputType | true
    }

  export interface CartItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartItem'], meta: { name: 'CartItem' } }
    /**
     * Find zero or one CartItem that matches the filter.
     * @param {CartItemFindUniqueArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CartItemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CartItemFindUniqueArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CartItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CartItemFindUniqueOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CartItemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CartItemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CartItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CartItemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CartItemFindFirstArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CartItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CartItemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CartItemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartItems
     * const cartItems = await prisma.cartItem.findMany()
     * 
     * // Get first 10 CartItems
     * const cartItems = await prisma.cartItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CartItemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartItemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CartItem.
     * @param {CartItemCreateArgs} args - Arguments to create a CartItem.
     * @example
     * // Create one CartItem
     * const CartItem = await prisma.cartItem.create({
     *   data: {
     *     // ... data to create a CartItem
     *   }
     * })
     * 
    **/
    create<T extends CartItemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CartItemCreateArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CartItems.
     * @param {CartItemCreateManyArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CartItemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartItemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CartItem.
     * @param {CartItemDeleteArgs} args - Arguments to delete one CartItem.
     * @example
     * // Delete one CartItem
     * const CartItem = await prisma.cartItem.delete({
     *   where: {
     *     // ... filter to delete one CartItem
     *   }
     * })
     * 
    **/
    delete<T extends CartItemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CartItemDeleteArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CartItem.
     * @param {CartItemUpdateArgs} args - Arguments to update one CartItem.
     * @example
     * // Update one CartItem
     * const cartItem = await prisma.cartItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CartItemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CartItemUpdateArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CartItems.
     * @param {CartItemDeleteManyArgs} args - Arguments to filter CartItems to delete.
     * @example
     * // Delete a few CartItems
     * const { count } = await prisma.cartItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CartItemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CartItemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CartItemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CartItemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CartItem.
     * @param {CartItemUpsertArgs} args - Arguments to update or create a CartItem.
     * @example
     * // Update or create a CartItem
     * const cartItem = await prisma.cartItem.upsert({
     *   create: {
     *     // ... data to create a CartItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartItem we want to update
     *   }
     * })
    **/
    upsert<T extends CartItemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CartItemUpsertArgs<ExtArgs>>
    ): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more CartItems that matches the filter.
     * @param {CartItemFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const cartItem = await prisma.cartItem.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: CartItemFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a CartItem.
     * @param {CartItemAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const cartItem = await prisma.cartItem.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: CartItemAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemCountArgs} args - Arguments to filter CartItems to count.
     * @example
     * // Count the number of CartItems
     * const count = await prisma.cartItem.count({
     *   where: {
     *     // ... the filter for the CartItems we want to count
     *   }
     * })
    **/
    count<T extends CartItemCountArgs>(
      args?: Subset<T, CartItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartItemAggregateArgs>(args: Subset<T, CartItemAggregateArgs>): Prisma.PrismaPromise<GetCartItemAggregateType<T>>

    /**
     * Group by CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartItemGroupByArgs['orderBy'] }
        : { orderBy?: CartItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartItem model
   */
  readonly fields: CartItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductsDefaultArgs<ExtArgs>>): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CartItem model
   */ 
  interface CartItemFieldRefs {
    readonly id: FieldRef<"CartItem", 'String'>
    readonly image: FieldRef<"CartItem", 'String'>
    readonly title: FieldRef<"CartItem", 'String'>
    readonly amount: FieldRef<"CartItem", 'Int'>
    readonly delivery: FieldRef<"CartItem", 'String'>
    readonly quantity: FieldRef<"CartItem", 'Int'>
    readonly userId: FieldRef<"CartItem", 'String'>
    readonly productId: FieldRef<"CartItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CartItem findUnique
   */
  export type CartItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findUniqueOrThrow
   */
  export type CartItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findFirst
   */
  export type CartItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findFirstOrThrow
   */
  export type CartItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findMany
   */
  export type CartItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItems to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem create
   */
  export type CartItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CartItem.
     */
    data: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
  }

  /**
   * CartItem createMany
   */
  export type CartItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
  }

  /**
   * CartItem update
   */
  export type CartItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CartItem.
     */
    data: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
    /**
     * Choose, which CartItem to update.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem updateMany
   */
  export type CartItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
  }

  /**
   * CartItem upsert
   */
  export type CartItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CartItem to update in case it exists.
     */
    where: CartItemWhereUniqueInput
    /**
     * In case the CartItem found by the `where` argument doesn't exist, create a new CartItem with this data.
     */
    create: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
    /**
     * In case the CartItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
  }

  /**
   * CartItem delete
   */
  export type CartItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter which CartItem to delete.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem deleteMany
   */
  export type CartItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItems to delete
     */
    where?: CartItemWhereInput
  }

  /**
   * CartItem findRaw
   */
  export type CartItemFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CartItem aggregateRaw
   */
  export type CartItemAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * CartItem without action
   */
  export type CartItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
  }


  /**
   * Model SaveProduct
   */

  export type AggregateSaveProduct = {
    _count: SaveProductCountAggregateOutputType | null
    _avg: SaveProductAvgAggregateOutputType | null
    _sum: SaveProductSumAggregateOutputType | null
    _min: SaveProductMinAggregateOutputType | null
    _max: SaveProductMaxAggregateOutputType | null
  }

  export type SaveProductAvgAggregateOutputType = {
    amount: number | null
  }

  export type SaveProductSumAggregateOutputType = {
    amount: number | null
  }

  export type SaveProductMinAggregateOutputType = {
    id: string | null
    image: string | null
    title: string | null
    amount: number | null
    delivery: string | null
    userId: string | null
    productId: string | null
  }

  export type SaveProductMaxAggregateOutputType = {
    id: string | null
    image: string | null
    title: string | null
    amount: number | null
    delivery: string | null
    userId: string | null
    productId: string | null
  }

  export type SaveProductCountAggregateOutputType = {
    id: number
    image: number
    title: number
    amount: number
    delivery: number
    userId: number
    productId: number
    _all: number
  }


  export type SaveProductAvgAggregateInputType = {
    amount?: true
  }

  export type SaveProductSumAggregateInputType = {
    amount?: true
  }

  export type SaveProductMinAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    userId?: true
    productId?: true
  }

  export type SaveProductMaxAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    userId?: true
    productId?: true
  }

  export type SaveProductCountAggregateInputType = {
    id?: true
    image?: true
    title?: true
    amount?: true
    delivery?: true
    userId?: true
    productId?: true
    _all?: true
  }

  export type SaveProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaveProduct to aggregate.
     */
    where?: SaveProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaveProducts to fetch.
     */
    orderBy?: SaveProductOrderByWithRelationInput | SaveProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaveProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaveProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaveProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaveProducts
    **/
    _count?: true | SaveProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaveProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaveProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaveProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaveProductMaxAggregateInputType
  }

  export type GetSaveProductAggregateType<T extends SaveProductAggregateArgs> = {
        [P in keyof T & keyof AggregateSaveProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaveProduct[P]>
      : GetScalarType<T[P], AggregateSaveProduct[P]>
  }




  export type SaveProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaveProductWhereInput
    orderBy?: SaveProductOrderByWithAggregationInput | SaveProductOrderByWithAggregationInput[]
    by: SaveProductScalarFieldEnum[] | SaveProductScalarFieldEnum
    having?: SaveProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaveProductCountAggregateInputType | true
    _avg?: SaveProductAvgAggregateInputType
    _sum?: SaveProductSumAggregateInputType
    _min?: SaveProductMinAggregateInputType
    _max?: SaveProductMaxAggregateInputType
  }

  export type SaveProductGroupByOutputType = {
    id: string
    image: string
    title: string
    amount: number
    delivery: string
    userId: string
    productId: string
    _count: SaveProductCountAggregateOutputType | null
    _avg: SaveProductAvgAggregateOutputType | null
    _sum: SaveProductSumAggregateOutputType | null
    _min: SaveProductMinAggregateOutputType | null
    _max: SaveProductMaxAggregateOutputType | null
  }

  type GetSaveProductGroupByPayload<T extends SaveProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaveProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaveProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaveProductGroupByOutputType[P]>
            : GetScalarType<T[P], SaveProductGroupByOutputType[P]>
        }
      >
    >


  export type SaveProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    image?: boolean
    title?: boolean
    amount?: boolean
    delivery?: boolean
    userId?: boolean
    productId?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["saveProduct"]>

  export type SaveProductSelectScalar = {
    id?: boolean
    image?: boolean
    title?: boolean
    amount?: boolean
    delivery?: boolean
    userId?: boolean
    productId?: boolean
  }


  export type SaveProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductsDefaultArgs<ExtArgs>
  }


  export type $SaveProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaveProduct"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      product: Prisma.$ProductsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      image: string
      title: string
      amount: number
      delivery: string
      userId: string
      productId: string
    }, ExtArgs["result"]["saveProduct"]>
    composites: {}
  }


  type SaveProductGetPayload<S extends boolean | null | undefined | SaveProductDefaultArgs> = $Result.GetResult<Prisma.$SaveProductPayload, S>

  type SaveProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SaveProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SaveProductCountAggregateInputType | true
    }

  export interface SaveProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaveProduct'], meta: { name: 'SaveProduct' } }
    /**
     * Find zero or one SaveProduct that matches the filter.
     * @param {SaveProductFindUniqueArgs} args - Arguments to find a SaveProduct
     * @example
     * // Get one SaveProduct
     * const saveProduct = await prisma.saveProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SaveProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SaveProductFindUniqueArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SaveProduct that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SaveProductFindUniqueOrThrowArgs} args - Arguments to find a SaveProduct
     * @example
     * // Get one SaveProduct
     * const saveProduct = await prisma.saveProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SaveProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SaveProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SaveProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveProductFindFirstArgs} args - Arguments to find a SaveProduct
     * @example
     * // Get one SaveProduct
     * const saveProduct = await prisma.saveProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SaveProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SaveProductFindFirstArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SaveProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveProductFindFirstOrThrowArgs} args - Arguments to find a SaveProduct
     * @example
     * // Get one SaveProduct
     * const saveProduct = await prisma.saveProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SaveProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SaveProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SaveProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaveProducts
     * const saveProducts = await prisma.saveProduct.findMany()
     * 
     * // Get first 10 SaveProducts
     * const saveProducts = await prisma.saveProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saveProductWithIdOnly = await prisma.saveProduct.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SaveProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaveProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SaveProduct.
     * @param {SaveProductCreateArgs} args - Arguments to create a SaveProduct.
     * @example
     * // Create one SaveProduct
     * const SaveProduct = await prisma.saveProduct.create({
     *   data: {
     *     // ... data to create a SaveProduct
     *   }
     * })
     * 
    **/
    create<T extends SaveProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SaveProductCreateArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SaveProducts.
     * @param {SaveProductCreateManyArgs} args - Arguments to create many SaveProducts.
     * @example
     * // Create many SaveProducts
     * const saveProduct = await prisma.saveProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SaveProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaveProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SaveProduct.
     * @param {SaveProductDeleteArgs} args - Arguments to delete one SaveProduct.
     * @example
     * // Delete one SaveProduct
     * const SaveProduct = await prisma.saveProduct.delete({
     *   where: {
     *     // ... filter to delete one SaveProduct
     *   }
     * })
     * 
    **/
    delete<T extends SaveProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SaveProductDeleteArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SaveProduct.
     * @param {SaveProductUpdateArgs} args - Arguments to update one SaveProduct.
     * @example
     * // Update one SaveProduct
     * const saveProduct = await prisma.saveProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SaveProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SaveProductUpdateArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SaveProducts.
     * @param {SaveProductDeleteManyArgs} args - Arguments to filter SaveProducts to delete.
     * @example
     * // Delete a few SaveProducts
     * const { count } = await prisma.saveProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SaveProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SaveProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaveProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaveProducts
     * const saveProduct = await prisma.saveProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SaveProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SaveProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SaveProduct.
     * @param {SaveProductUpsertArgs} args - Arguments to update or create a SaveProduct.
     * @example
     * // Update or create a SaveProduct
     * const saveProduct = await prisma.saveProduct.upsert({
     *   create: {
     *     // ... data to create a SaveProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaveProduct we want to update
     *   }
     * })
    **/
    upsert<T extends SaveProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SaveProductUpsertArgs<ExtArgs>>
    ): Prisma__SaveProductClient<$Result.GetResult<Prisma.$SaveProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more SaveProducts that matches the filter.
     * @param {SaveProductFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const saveProduct = await prisma.saveProduct.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SaveProductFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SaveProduct.
     * @param {SaveProductAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const saveProduct = await prisma.saveProduct.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SaveProductAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of SaveProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveProductCountArgs} args - Arguments to filter SaveProducts to count.
     * @example
     * // Count the number of SaveProducts
     * const count = await prisma.saveProduct.count({
     *   where: {
     *     // ... the filter for the SaveProducts we want to count
     *   }
     * })
    **/
    count<T extends SaveProductCountArgs>(
      args?: Subset<T, SaveProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaveProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaveProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaveProductAggregateArgs>(args: Subset<T, SaveProductAggregateArgs>): Prisma.PrismaPromise<GetSaveProductAggregateType<T>>

    /**
     * Group by SaveProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaveProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaveProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaveProductGroupByArgs['orderBy'] }
        : { orderBy?: SaveProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaveProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaveProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaveProduct model
   */
  readonly fields: SaveProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaveProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaveProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    product<T extends ProductsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductsDefaultArgs<ExtArgs>>): Prisma__ProductsClient<$Result.GetResult<Prisma.$ProductsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SaveProduct model
   */ 
  interface SaveProductFieldRefs {
    readonly id: FieldRef<"SaveProduct", 'String'>
    readonly image: FieldRef<"SaveProduct", 'String'>
    readonly title: FieldRef<"SaveProduct", 'String'>
    readonly amount: FieldRef<"SaveProduct", 'Int'>
    readonly delivery: FieldRef<"SaveProduct", 'String'>
    readonly userId: FieldRef<"SaveProduct", 'String'>
    readonly productId: FieldRef<"SaveProduct", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SaveProduct findUnique
   */
  export type SaveProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * Filter, which SaveProduct to fetch.
     */
    where: SaveProductWhereUniqueInput
  }

  /**
   * SaveProduct findUniqueOrThrow
   */
  export type SaveProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * Filter, which SaveProduct to fetch.
     */
    where: SaveProductWhereUniqueInput
  }

  /**
   * SaveProduct findFirst
   */
  export type SaveProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * Filter, which SaveProduct to fetch.
     */
    where?: SaveProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaveProducts to fetch.
     */
    orderBy?: SaveProductOrderByWithRelationInput | SaveProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaveProducts.
     */
    cursor?: SaveProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaveProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaveProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaveProducts.
     */
    distinct?: SaveProductScalarFieldEnum | SaveProductScalarFieldEnum[]
  }

  /**
   * SaveProduct findFirstOrThrow
   */
  export type SaveProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * Filter, which SaveProduct to fetch.
     */
    where?: SaveProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaveProducts to fetch.
     */
    orderBy?: SaveProductOrderByWithRelationInput | SaveProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaveProducts.
     */
    cursor?: SaveProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaveProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaveProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaveProducts.
     */
    distinct?: SaveProductScalarFieldEnum | SaveProductScalarFieldEnum[]
  }

  /**
   * SaveProduct findMany
   */
  export type SaveProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * Filter, which SaveProducts to fetch.
     */
    where?: SaveProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaveProducts to fetch.
     */
    orderBy?: SaveProductOrderByWithRelationInput | SaveProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaveProducts.
     */
    cursor?: SaveProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaveProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaveProducts.
     */
    skip?: number
    distinct?: SaveProductScalarFieldEnum | SaveProductScalarFieldEnum[]
  }

  /**
   * SaveProduct create
   */
  export type SaveProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * The data needed to create a SaveProduct.
     */
    data: XOR<SaveProductCreateInput, SaveProductUncheckedCreateInput>
  }

  /**
   * SaveProduct createMany
   */
  export type SaveProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaveProducts.
     */
    data: SaveProductCreateManyInput | SaveProductCreateManyInput[]
  }

  /**
   * SaveProduct update
   */
  export type SaveProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * The data needed to update a SaveProduct.
     */
    data: XOR<SaveProductUpdateInput, SaveProductUncheckedUpdateInput>
    /**
     * Choose, which SaveProduct to update.
     */
    where: SaveProductWhereUniqueInput
  }

  /**
   * SaveProduct updateMany
   */
  export type SaveProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaveProducts.
     */
    data: XOR<SaveProductUpdateManyMutationInput, SaveProductUncheckedUpdateManyInput>
    /**
     * Filter which SaveProducts to update
     */
    where?: SaveProductWhereInput
  }

  /**
   * SaveProduct upsert
   */
  export type SaveProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * The filter to search for the SaveProduct to update in case it exists.
     */
    where: SaveProductWhereUniqueInput
    /**
     * In case the SaveProduct found by the `where` argument doesn't exist, create a new SaveProduct with this data.
     */
    create: XOR<SaveProductCreateInput, SaveProductUncheckedCreateInput>
    /**
     * In case the SaveProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaveProductUpdateInput, SaveProductUncheckedUpdateInput>
  }

  /**
   * SaveProduct delete
   */
  export type SaveProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
    /**
     * Filter which SaveProduct to delete.
     */
    where: SaveProductWhereUniqueInput
  }

  /**
   * SaveProduct deleteMany
   */
  export type SaveProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaveProducts to delete
     */
    where?: SaveProductWhereInput
  }

  /**
   * SaveProduct findRaw
   */
  export type SaveProductFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SaveProduct aggregateRaw
   */
  export type SaveProductAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SaveProduct without action
   */
  export type SaveProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaveProduct
     */
    select?: SaveProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaveProductInclude<ExtArgs> | null
  }


  /**
   * Model DiagnosticTest
   */

  export type AggregateDiagnosticTest = {
    _count: DiagnosticTestCountAggregateOutputType | null
    _avg: DiagnosticTestAvgAggregateOutputType | null
    _sum: DiagnosticTestSumAggregateOutputType | null
    _min: DiagnosticTestMinAggregateOutputType | null
    _max: DiagnosticTestMaxAggregateOutputType | null
  }

  export type DiagnosticTestAvgAggregateOutputType = {
    price: number | null
  }

  export type DiagnosticTestSumAggregateOutputType = {
    price: number | null
  }

  export type DiagnosticTestMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: number | null
    dateCreated: Date | null
    type: string | null
  }

  export type DiagnosticTestMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: number | null
    dateCreated: Date | null
    type: string | null
  }

  export type DiagnosticTestCountAggregateOutputType = {
    id: number
    name: number
    price: number
    dateCreated: number
    type: number
    _all: number
  }


  export type DiagnosticTestAvgAggregateInputType = {
    price?: true
  }

  export type DiagnosticTestSumAggregateInputType = {
    price?: true
  }

  export type DiagnosticTestMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    dateCreated?: true
    type?: true
  }

  export type DiagnosticTestMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    dateCreated?: true
    type?: true
  }

  export type DiagnosticTestCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    dateCreated?: true
    type?: true
    _all?: true
  }

  export type DiagnosticTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiagnosticTest to aggregate.
     */
    where?: DiagnosticTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiagnosticTests to fetch.
     */
    orderBy?: DiagnosticTestOrderByWithRelationInput | DiagnosticTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiagnosticTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiagnosticTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiagnosticTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiagnosticTests
    **/
    _count?: true | DiagnosticTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiagnosticTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiagnosticTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiagnosticTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiagnosticTestMaxAggregateInputType
  }

  export type GetDiagnosticTestAggregateType<T extends DiagnosticTestAggregateArgs> = {
        [P in keyof T & keyof AggregateDiagnosticTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiagnosticTest[P]>
      : GetScalarType<T[P], AggregateDiagnosticTest[P]>
  }




  export type DiagnosticTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiagnosticTestWhereInput
    orderBy?: DiagnosticTestOrderByWithAggregationInput | DiagnosticTestOrderByWithAggregationInput[]
    by: DiagnosticTestScalarFieldEnum[] | DiagnosticTestScalarFieldEnum
    having?: DiagnosticTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiagnosticTestCountAggregateInputType | true
    _avg?: DiagnosticTestAvgAggregateInputType
    _sum?: DiagnosticTestSumAggregateInputType
    _min?: DiagnosticTestMinAggregateInputType
    _max?: DiagnosticTestMaxAggregateInputType
  }

  export type DiagnosticTestGroupByOutputType = {
    id: string
    name: string
    price: number
    dateCreated: Date
    type: string
    _count: DiagnosticTestCountAggregateOutputType | null
    _avg: DiagnosticTestAvgAggregateOutputType | null
    _sum: DiagnosticTestSumAggregateOutputType | null
    _min: DiagnosticTestMinAggregateOutputType | null
    _max: DiagnosticTestMaxAggregateOutputType | null
  }

  type GetDiagnosticTestGroupByPayload<T extends DiagnosticTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiagnosticTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiagnosticTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiagnosticTestGroupByOutputType[P]>
            : GetScalarType<T[P], DiagnosticTestGroupByOutputType[P]>
        }
      >
    >


  export type DiagnosticTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    dateCreated?: boolean
    type?: boolean
    selectedTests?: boolean | DiagnosticTest$selectedTestsArgs<ExtArgs>
    _count?: boolean | DiagnosticTestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["diagnosticTest"]>

  export type DiagnosticTestSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    dateCreated?: boolean
    type?: boolean
  }


  export type DiagnosticTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    selectedTests?: boolean | DiagnosticTest$selectedTestsArgs<ExtArgs>
    _count?: boolean | DiagnosticTestCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DiagnosticTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiagnosticTest"
    objects: {
      selectedTests: Prisma.$SelectedTestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      price: number
      dateCreated: Date
      type: string
    }, ExtArgs["result"]["diagnosticTest"]>
    composites: {}
  }


  type DiagnosticTestGetPayload<S extends boolean | null | undefined | DiagnosticTestDefaultArgs> = $Result.GetResult<Prisma.$DiagnosticTestPayload, S>

  type DiagnosticTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiagnosticTestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiagnosticTestCountAggregateInputType | true
    }

  export interface DiagnosticTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiagnosticTest'], meta: { name: 'DiagnosticTest' } }
    /**
     * Find zero or one DiagnosticTest that matches the filter.
     * @param {DiagnosticTestFindUniqueArgs} args - Arguments to find a DiagnosticTest
     * @example
     * // Get one DiagnosticTest
     * const diagnosticTest = await prisma.diagnosticTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DiagnosticTestFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DiagnosticTestFindUniqueArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DiagnosticTest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiagnosticTestFindUniqueOrThrowArgs} args - Arguments to find a DiagnosticTest
     * @example
     * // Get one DiagnosticTest
     * const diagnosticTest = await prisma.diagnosticTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DiagnosticTestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiagnosticTestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DiagnosticTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticTestFindFirstArgs} args - Arguments to find a DiagnosticTest
     * @example
     * // Get one DiagnosticTest
     * const diagnosticTest = await prisma.diagnosticTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DiagnosticTestFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DiagnosticTestFindFirstArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DiagnosticTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticTestFindFirstOrThrowArgs} args - Arguments to find a DiagnosticTest
     * @example
     * // Get one DiagnosticTest
     * const diagnosticTest = await prisma.diagnosticTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DiagnosticTestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DiagnosticTestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DiagnosticTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiagnosticTests
     * const diagnosticTests = await prisma.diagnosticTest.findMany()
     * 
     * // Get first 10 DiagnosticTests
     * const diagnosticTests = await prisma.diagnosticTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diagnosticTestWithIdOnly = await prisma.diagnosticTest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DiagnosticTestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiagnosticTestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DiagnosticTest.
     * @param {DiagnosticTestCreateArgs} args - Arguments to create a DiagnosticTest.
     * @example
     * // Create one DiagnosticTest
     * const DiagnosticTest = await prisma.diagnosticTest.create({
     *   data: {
     *     // ... data to create a DiagnosticTest
     *   }
     * })
     * 
    **/
    create<T extends DiagnosticTestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DiagnosticTestCreateArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DiagnosticTests.
     * @param {DiagnosticTestCreateManyArgs} args - Arguments to create many DiagnosticTests.
     * @example
     * // Create many DiagnosticTests
     * const diagnosticTest = await prisma.diagnosticTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DiagnosticTestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiagnosticTestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DiagnosticTest.
     * @param {DiagnosticTestDeleteArgs} args - Arguments to delete one DiagnosticTest.
     * @example
     * // Delete one DiagnosticTest
     * const DiagnosticTest = await prisma.diagnosticTest.delete({
     *   where: {
     *     // ... filter to delete one DiagnosticTest
     *   }
     * })
     * 
    **/
    delete<T extends DiagnosticTestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DiagnosticTestDeleteArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DiagnosticTest.
     * @param {DiagnosticTestUpdateArgs} args - Arguments to update one DiagnosticTest.
     * @example
     * // Update one DiagnosticTest
     * const diagnosticTest = await prisma.diagnosticTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DiagnosticTestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DiagnosticTestUpdateArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DiagnosticTests.
     * @param {DiagnosticTestDeleteManyArgs} args - Arguments to filter DiagnosticTests to delete.
     * @example
     * // Delete a few DiagnosticTests
     * const { count } = await prisma.diagnosticTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DiagnosticTestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DiagnosticTestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiagnosticTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiagnosticTests
     * const diagnosticTest = await prisma.diagnosticTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DiagnosticTestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DiagnosticTestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DiagnosticTest.
     * @param {DiagnosticTestUpsertArgs} args - Arguments to update or create a DiagnosticTest.
     * @example
     * // Update or create a DiagnosticTest
     * const diagnosticTest = await prisma.diagnosticTest.upsert({
     *   create: {
     *     // ... data to create a DiagnosticTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiagnosticTest we want to update
     *   }
     * })
    **/
    upsert<T extends DiagnosticTestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DiagnosticTestUpsertArgs<ExtArgs>>
    ): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more DiagnosticTests that matches the filter.
     * @param {DiagnosticTestFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const diagnosticTest = await prisma.diagnosticTest.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: DiagnosticTestFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a DiagnosticTest.
     * @param {DiagnosticTestAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const diagnosticTest = await prisma.diagnosticTest.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: DiagnosticTestAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of DiagnosticTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticTestCountArgs} args - Arguments to filter DiagnosticTests to count.
     * @example
     * // Count the number of DiagnosticTests
     * const count = await prisma.diagnosticTest.count({
     *   where: {
     *     // ... the filter for the DiagnosticTests we want to count
     *   }
     * })
    **/
    count<T extends DiagnosticTestCountArgs>(
      args?: Subset<T, DiagnosticTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiagnosticTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiagnosticTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiagnosticTestAggregateArgs>(args: Subset<T, DiagnosticTestAggregateArgs>): Prisma.PrismaPromise<GetDiagnosticTestAggregateType<T>>

    /**
     * Group by DiagnosticTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiagnosticTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiagnosticTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiagnosticTestGroupByArgs['orderBy'] }
        : { orderBy?: DiagnosticTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiagnosticTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiagnosticTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiagnosticTest model
   */
  readonly fields: DiagnosticTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiagnosticTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiagnosticTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    selectedTests<T extends DiagnosticTest$selectedTestsArgs<ExtArgs> = {}>(args?: Subset<T, DiagnosticTest$selectedTestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DiagnosticTest model
   */ 
  interface DiagnosticTestFieldRefs {
    readonly id: FieldRef<"DiagnosticTest", 'String'>
    readonly name: FieldRef<"DiagnosticTest", 'String'>
    readonly price: FieldRef<"DiagnosticTest", 'Int'>
    readonly dateCreated: FieldRef<"DiagnosticTest", 'DateTime'>
    readonly type: FieldRef<"DiagnosticTest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DiagnosticTest findUnique
   */
  export type DiagnosticTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * Filter, which DiagnosticTest to fetch.
     */
    where: DiagnosticTestWhereUniqueInput
  }

  /**
   * DiagnosticTest findUniqueOrThrow
   */
  export type DiagnosticTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * Filter, which DiagnosticTest to fetch.
     */
    where: DiagnosticTestWhereUniqueInput
  }

  /**
   * DiagnosticTest findFirst
   */
  export type DiagnosticTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * Filter, which DiagnosticTest to fetch.
     */
    where?: DiagnosticTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiagnosticTests to fetch.
     */
    orderBy?: DiagnosticTestOrderByWithRelationInput | DiagnosticTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiagnosticTests.
     */
    cursor?: DiagnosticTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiagnosticTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiagnosticTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiagnosticTests.
     */
    distinct?: DiagnosticTestScalarFieldEnum | DiagnosticTestScalarFieldEnum[]
  }

  /**
   * DiagnosticTest findFirstOrThrow
   */
  export type DiagnosticTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * Filter, which DiagnosticTest to fetch.
     */
    where?: DiagnosticTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiagnosticTests to fetch.
     */
    orderBy?: DiagnosticTestOrderByWithRelationInput | DiagnosticTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiagnosticTests.
     */
    cursor?: DiagnosticTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiagnosticTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiagnosticTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiagnosticTests.
     */
    distinct?: DiagnosticTestScalarFieldEnum | DiagnosticTestScalarFieldEnum[]
  }

  /**
   * DiagnosticTest findMany
   */
  export type DiagnosticTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * Filter, which DiagnosticTests to fetch.
     */
    where?: DiagnosticTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiagnosticTests to fetch.
     */
    orderBy?: DiagnosticTestOrderByWithRelationInput | DiagnosticTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiagnosticTests.
     */
    cursor?: DiagnosticTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiagnosticTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiagnosticTests.
     */
    skip?: number
    distinct?: DiagnosticTestScalarFieldEnum | DiagnosticTestScalarFieldEnum[]
  }

  /**
   * DiagnosticTest create
   */
  export type DiagnosticTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * The data needed to create a DiagnosticTest.
     */
    data: XOR<DiagnosticTestCreateInput, DiagnosticTestUncheckedCreateInput>
  }

  /**
   * DiagnosticTest createMany
   */
  export type DiagnosticTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiagnosticTests.
     */
    data: DiagnosticTestCreateManyInput | DiagnosticTestCreateManyInput[]
  }

  /**
   * DiagnosticTest update
   */
  export type DiagnosticTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * The data needed to update a DiagnosticTest.
     */
    data: XOR<DiagnosticTestUpdateInput, DiagnosticTestUncheckedUpdateInput>
    /**
     * Choose, which DiagnosticTest to update.
     */
    where: DiagnosticTestWhereUniqueInput
  }

  /**
   * DiagnosticTest updateMany
   */
  export type DiagnosticTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiagnosticTests.
     */
    data: XOR<DiagnosticTestUpdateManyMutationInput, DiagnosticTestUncheckedUpdateManyInput>
    /**
     * Filter which DiagnosticTests to update
     */
    where?: DiagnosticTestWhereInput
  }

  /**
   * DiagnosticTest upsert
   */
  export type DiagnosticTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * The filter to search for the DiagnosticTest to update in case it exists.
     */
    where: DiagnosticTestWhereUniqueInput
    /**
     * In case the DiagnosticTest found by the `where` argument doesn't exist, create a new DiagnosticTest with this data.
     */
    create: XOR<DiagnosticTestCreateInput, DiagnosticTestUncheckedCreateInput>
    /**
     * In case the DiagnosticTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiagnosticTestUpdateInput, DiagnosticTestUncheckedUpdateInput>
  }

  /**
   * DiagnosticTest delete
   */
  export type DiagnosticTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
    /**
     * Filter which DiagnosticTest to delete.
     */
    where: DiagnosticTestWhereUniqueInput
  }

  /**
   * DiagnosticTest deleteMany
   */
  export type DiagnosticTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiagnosticTests to delete
     */
    where?: DiagnosticTestWhereInput
  }

  /**
   * DiagnosticTest findRaw
   */
  export type DiagnosticTestFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * DiagnosticTest aggregateRaw
   */
  export type DiagnosticTestAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * DiagnosticTest.selectedTests
   */
  export type DiagnosticTest$selectedTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    where?: SelectedTestWhereInput
    orderBy?: SelectedTestOrderByWithRelationInput | SelectedTestOrderByWithRelationInput[]
    cursor?: SelectedTestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SelectedTestScalarFieldEnum | SelectedTestScalarFieldEnum[]
  }

  /**
   * DiagnosticTest without action
   */
  export type DiagnosticTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiagnosticTest
     */
    select?: DiagnosticTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiagnosticTestInclude<ExtArgs> | null
  }


  /**
   * Model SelectedTest
   */

  export type AggregateSelectedTest = {
    _count: SelectedTestCountAggregateOutputType | null
    _avg: SelectedTestAvgAggregateOutputType | null
    _sum: SelectedTestSumAggregateOutputType | null
    _min: SelectedTestMinAggregateOutputType | null
    _max: SelectedTestMaxAggregateOutputType | null
  }

  export type SelectedTestAvgAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type SelectedTestSumAggregateOutputType = {
    price: number | null
    quantity: number | null
  }

  export type SelectedTestMinAggregateOutputType = {
    id: string | null
    testName: string | null
    price: number | null
    quantity: number | null
    userId: string | null
    diagnosticTestId: string | null
  }

  export type SelectedTestMaxAggregateOutputType = {
    id: string | null
    testName: string | null
    price: number | null
    quantity: number | null
    userId: string | null
    diagnosticTestId: string | null
  }

  export type SelectedTestCountAggregateOutputType = {
    id: number
    testName: number
    price: number
    quantity: number
    userId: number
    diagnosticTestId: number
    _all: number
  }


  export type SelectedTestAvgAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type SelectedTestSumAggregateInputType = {
    price?: true
    quantity?: true
  }

  export type SelectedTestMinAggregateInputType = {
    id?: true
    testName?: true
    price?: true
    quantity?: true
    userId?: true
    diagnosticTestId?: true
  }

  export type SelectedTestMaxAggregateInputType = {
    id?: true
    testName?: true
    price?: true
    quantity?: true
    userId?: true
    diagnosticTestId?: true
  }

  export type SelectedTestCountAggregateInputType = {
    id?: true
    testName?: true
    price?: true
    quantity?: true
    userId?: true
    diagnosticTestId?: true
    _all?: true
  }

  export type SelectedTestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SelectedTest to aggregate.
     */
    where?: SelectedTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedTests to fetch.
     */
    orderBy?: SelectedTestOrderByWithRelationInput | SelectedTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SelectedTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SelectedTests
    **/
    _count?: true | SelectedTestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SelectedTestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SelectedTestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SelectedTestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SelectedTestMaxAggregateInputType
  }

  export type GetSelectedTestAggregateType<T extends SelectedTestAggregateArgs> = {
        [P in keyof T & keyof AggregateSelectedTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelectedTest[P]>
      : GetScalarType<T[P], AggregateSelectedTest[P]>
  }




  export type SelectedTestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SelectedTestWhereInput
    orderBy?: SelectedTestOrderByWithAggregationInput | SelectedTestOrderByWithAggregationInput[]
    by: SelectedTestScalarFieldEnum[] | SelectedTestScalarFieldEnum
    having?: SelectedTestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SelectedTestCountAggregateInputType | true
    _avg?: SelectedTestAvgAggregateInputType
    _sum?: SelectedTestSumAggregateInputType
    _min?: SelectedTestMinAggregateInputType
    _max?: SelectedTestMaxAggregateInputType
  }

  export type SelectedTestGroupByOutputType = {
    id: string
    testName: string
    price: number
    quantity: number
    userId: string
    diagnosticTestId: string
    _count: SelectedTestCountAggregateOutputType | null
    _avg: SelectedTestAvgAggregateOutputType | null
    _sum: SelectedTestSumAggregateOutputType | null
    _min: SelectedTestMinAggregateOutputType | null
    _max: SelectedTestMaxAggregateOutputType | null
  }

  type GetSelectedTestGroupByPayload<T extends SelectedTestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SelectedTestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SelectedTestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SelectedTestGroupByOutputType[P]>
            : GetScalarType<T[P], SelectedTestGroupByOutputType[P]>
        }
      >
    >


  export type SelectedTestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    testName?: boolean
    price?: boolean
    quantity?: boolean
    userId?: boolean
    diagnosticTestId?: boolean
    diagnosticTest?: boolean | DiagnosticTestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["selectedTest"]>

  export type SelectedTestSelectScalar = {
    id?: boolean
    testName?: boolean
    price?: boolean
    quantity?: boolean
    userId?: boolean
    diagnosticTestId?: boolean
  }


  export type SelectedTestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    diagnosticTest?: boolean | DiagnosticTestDefaultArgs<ExtArgs>
  }


  export type $SelectedTestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SelectedTest"
    objects: {
      diagnosticTest: Prisma.$DiagnosticTestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      testName: string
      price: number
      quantity: number
      userId: string
      diagnosticTestId: string
    }, ExtArgs["result"]["selectedTest"]>
    composites: {}
  }


  type SelectedTestGetPayload<S extends boolean | null | undefined | SelectedTestDefaultArgs> = $Result.GetResult<Prisma.$SelectedTestPayload, S>

  type SelectedTestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SelectedTestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SelectedTestCountAggregateInputType | true
    }

  export interface SelectedTestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SelectedTest'], meta: { name: 'SelectedTest' } }
    /**
     * Find zero or one SelectedTest that matches the filter.
     * @param {SelectedTestFindUniqueArgs} args - Arguments to find a SelectedTest
     * @example
     * // Get one SelectedTest
     * const selectedTest = await prisma.selectedTest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SelectedTestFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SelectedTestFindUniqueArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SelectedTest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SelectedTestFindUniqueOrThrowArgs} args - Arguments to find a SelectedTest
     * @example
     * // Get one SelectedTest
     * const selectedTest = await prisma.selectedTest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SelectedTestFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectedTestFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SelectedTest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedTestFindFirstArgs} args - Arguments to find a SelectedTest
     * @example
     * // Get one SelectedTest
     * const selectedTest = await prisma.selectedTest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SelectedTestFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectedTestFindFirstArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SelectedTest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedTestFindFirstOrThrowArgs} args - Arguments to find a SelectedTest
     * @example
     * // Get one SelectedTest
     * const selectedTest = await prisma.selectedTest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SelectedTestFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectedTestFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SelectedTests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedTestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SelectedTests
     * const selectedTests = await prisma.selectedTest.findMany()
     * 
     * // Get first 10 SelectedTests
     * const selectedTests = await prisma.selectedTest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const selectedTestWithIdOnly = await prisma.selectedTest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SelectedTestFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectedTestFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SelectedTest.
     * @param {SelectedTestCreateArgs} args - Arguments to create a SelectedTest.
     * @example
     * // Create one SelectedTest
     * const SelectedTest = await prisma.selectedTest.create({
     *   data: {
     *     // ... data to create a SelectedTest
     *   }
     * })
     * 
    **/
    create<T extends SelectedTestCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SelectedTestCreateArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SelectedTests.
     * @param {SelectedTestCreateManyArgs} args - Arguments to create many SelectedTests.
     * @example
     * // Create many SelectedTests
     * const selectedTest = await prisma.selectedTest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends SelectedTestCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectedTestCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SelectedTest.
     * @param {SelectedTestDeleteArgs} args - Arguments to delete one SelectedTest.
     * @example
     * // Delete one SelectedTest
     * const SelectedTest = await prisma.selectedTest.delete({
     *   where: {
     *     // ... filter to delete one SelectedTest
     *   }
     * })
     * 
    **/
    delete<T extends SelectedTestDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SelectedTestDeleteArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SelectedTest.
     * @param {SelectedTestUpdateArgs} args - Arguments to update one SelectedTest.
     * @example
     * // Update one SelectedTest
     * const selectedTest = await prisma.selectedTest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SelectedTestUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SelectedTestUpdateArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SelectedTests.
     * @param {SelectedTestDeleteManyArgs} args - Arguments to filter SelectedTests to delete.
     * @example
     * // Delete a few SelectedTests
     * const { count } = await prisma.selectedTest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SelectedTestDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SelectedTestDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SelectedTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedTestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SelectedTests
     * const selectedTest = await prisma.selectedTest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SelectedTestUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SelectedTestUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SelectedTest.
     * @param {SelectedTestUpsertArgs} args - Arguments to update or create a SelectedTest.
     * @example
     * // Update or create a SelectedTest
     * const selectedTest = await prisma.selectedTest.upsert({
     *   create: {
     *     // ... data to create a SelectedTest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SelectedTest we want to update
     *   }
     * })
    **/
    upsert<T extends SelectedTestUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SelectedTestUpsertArgs<ExtArgs>>
    ): Prisma__SelectedTestClient<$Result.GetResult<Prisma.$SelectedTestPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more SelectedTests that matches the filter.
     * @param {SelectedTestFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const selectedTest = await prisma.selectedTest.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SelectedTestFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SelectedTest.
     * @param {SelectedTestAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const selectedTest = await prisma.selectedTest.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SelectedTestAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of SelectedTests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedTestCountArgs} args - Arguments to filter SelectedTests to count.
     * @example
     * // Count the number of SelectedTests
     * const count = await prisma.selectedTest.count({
     *   where: {
     *     // ... the filter for the SelectedTests we want to count
     *   }
     * })
    **/
    count<T extends SelectedTestCountArgs>(
      args?: Subset<T, SelectedTestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SelectedTestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SelectedTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedTestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SelectedTestAggregateArgs>(args: Subset<T, SelectedTestAggregateArgs>): Prisma.PrismaPromise<GetSelectedTestAggregateType<T>>

    /**
     * Group by SelectedTest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedTestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SelectedTestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SelectedTestGroupByArgs['orderBy'] }
        : { orderBy?: SelectedTestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SelectedTestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelectedTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SelectedTest model
   */
  readonly fields: SelectedTestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SelectedTest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SelectedTestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    diagnosticTest<T extends DiagnosticTestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DiagnosticTestDefaultArgs<ExtArgs>>): Prisma__DiagnosticTestClient<$Result.GetResult<Prisma.$DiagnosticTestPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SelectedTest model
   */ 
  interface SelectedTestFieldRefs {
    readonly id: FieldRef<"SelectedTest", 'String'>
    readonly testName: FieldRef<"SelectedTest", 'String'>
    readonly price: FieldRef<"SelectedTest", 'Int'>
    readonly quantity: FieldRef<"SelectedTest", 'Int'>
    readonly userId: FieldRef<"SelectedTest", 'String'>
    readonly diagnosticTestId: FieldRef<"SelectedTest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SelectedTest findUnique
   */
  export type SelectedTestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * Filter, which SelectedTest to fetch.
     */
    where: SelectedTestWhereUniqueInput
  }

  /**
   * SelectedTest findUniqueOrThrow
   */
  export type SelectedTestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * Filter, which SelectedTest to fetch.
     */
    where: SelectedTestWhereUniqueInput
  }

  /**
   * SelectedTest findFirst
   */
  export type SelectedTestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * Filter, which SelectedTest to fetch.
     */
    where?: SelectedTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedTests to fetch.
     */
    orderBy?: SelectedTestOrderByWithRelationInput | SelectedTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SelectedTests.
     */
    cursor?: SelectedTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SelectedTests.
     */
    distinct?: SelectedTestScalarFieldEnum | SelectedTestScalarFieldEnum[]
  }

  /**
   * SelectedTest findFirstOrThrow
   */
  export type SelectedTestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * Filter, which SelectedTest to fetch.
     */
    where?: SelectedTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedTests to fetch.
     */
    orderBy?: SelectedTestOrderByWithRelationInput | SelectedTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SelectedTests.
     */
    cursor?: SelectedTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedTests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SelectedTests.
     */
    distinct?: SelectedTestScalarFieldEnum | SelectedTestScalarFieldEnum[]
  }

  /**
   * SelectedTest findMany
   */
  export type SelectedTestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * Filter, which SelectedTests to fetch.
     */
    where?: SelectedTestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedTests to fetch.
     */
    orderBy?: SelectedTestOrderByWithRelationInput | SelectedTestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SelectedTests.
     */
    cursor?: SelectedTestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedTests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedTests.
     */
    skip?: number
    distinct?: SelectedTestScalarFieldEnum | SelectedTestScalarFieldEnum[]
  }

  /**
   * SelectedTest create
   */
  export type SelectedTestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * The data needed to create a SelectedTest.
     */
    data: XOR<SelectedTestCreateInput, SelectedTestUncheckedCreateInput>
  }

  /**
   * SelectedTest createMany
   */
  export type SelectedTestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SelectedTests.
     */
    data: SelectedTestCreateManyInput | SelectedTestCreateManyInput[]
  }

  /**
   * SelectedTest update
   */
  export type SelectedTestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * The data needed to update a SelectedTest.
     */
    data: XOR<SelectedTestUpdateInput, SelectedTestUncheckedUpdateInput>
    /**
     * Choose, which SelectedTest to update.
     */
    where: SelectedTestWhereUniqueInput
  }

  /**
   * SelectedTest updateMany
   */
  export type SelectedTestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SelectedTests.
     */
    data: XOR<SelectedTestUpdateManyMutationInput, SelectedTestUncheckedUpdateManyInput>
    /**
     * Filter which SelectedTests to update
     */
    where?: SelectedTestWhereInput
  }

  /**
   * SelectedTest upsert
   */
  export type SelectedTestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * The filter to search for the SelectedTest to update in case it exists.
     */
    where: SelectedTestWhereUniqueInput
    /**
     * In case the SelectedTest found by the `where` argument doesn't exist, create a new SelectedTest with this data.
     */
    create: XOR<SelectedTestCreateInput, SelectedTestUncheckedCreateInput>
    /**
     * In case the SelectedTest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SelectedTestUpdateInput, SelectedTestUncheckedUpdateInput>
  }

  /**
   * SelectedTest delete
   */
  export type SelectedTestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
    /**
     * Filter which SelectedTest to delete.
     */
    where: SelectedTestWhereUniqueInput
  }

  /**
   * SelectedTest deleteMany
   */
  export type SelectedTestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SelectedTests to delete
     */
    where?: SelectedTestWhereInput
  }

  /**
   * SelectedTest findRaw
   */
  export type SelectedTestFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SelectedTest aggregateRaw
   */
  export type SelectedTestAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SelectedTest without action
   */
  export type SelectedTestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SelectedTest
     */
    select?: SelectedTestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SelectedTestInclude<ExtArgs> | null
  }


  /**
   * Model ChatSessions
   */

  export type AggregateChatSessions = {
    _count: ChatSessionsCountAggregateOutputType | null
    _min: ChatSessionsMinAggregateOutputType | null
    _max: ChatSessionsMaxAggregateOutputType | null
  }

  export type ChatSessionsMinAggregateOutputType = {
    session_id: string | null
    user_id: string | null
    doctor_id: string | null
    created_at: Date | null
  }

  export type ChatSessionsMaxAggregateOutputType = {
    session_id: string | null
    user_id: string | null
    doctor_id: string | null
    created_at: Date | null
  }

  export type ChatSessionsCountAggregateOutputType = {
    session_id: number
    user_id: number
    doctor_id: number
    created_at: number
    _all: number
  }


  export type ChatSessionsMinAggregateInputType = {
    session_id?: true
    user_id?: true
    doctor_id?: true
    created_at?: true
  }

  export type ChatSessionsMaxAggregateInputType = {
    session_id?: true
    user_id?: true
    doctor_id?: true
    created_at?: true
  }

  export type ChatSessionsCountAggregateInputType = {
    session_id?: true
    user_id?: true
    doctor_id?: true
    created_at?: true
    _all?: true
  }

  export type ChatSessionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to aggregate.
     */
    where?: ChatSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionsOrderByWithRelationInput | ChatSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSessions
    **/
    _count?: true | ChatSessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSessionsMaxAggregateInputType
  }

  export type GetChatSessionsAggregateType<T extends ChatSessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSessions[P]>
      : GetScalarType<T[P], AggregateChatSessions[P]>
  }




  export type ChatSessionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionsWhereInput
    orderBy?: ChatSessionsOrderByWithAggregationInput | ChatSessionsOrderByWithAggregationInput[]
    by: ChatSessionsScalarFieldEnum[] | ChatSessionsScalarFieldEnum
    having?: ChatSessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSessionsCountAggregateInputType | true
    _min?: ChatSessionsMinAggregateInputType
    _max?: ChatSessionsMaxAggregateInputType
  }

  export type ChatSessionsGroupByOutputType = {
    session_id: string
    user_id: string
    doctor_id: string
    created_at: Date
    _count: ChatSessionsCountAggregateOutputType | null
    _min: ChatSessionsMinAggregateOutputType | null
    _max: ChatSessionsMaxAggregateOutputType | null
  }

  type GetChatSessionsGroupByPayload<T extends ChatSessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatSessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSessionsGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSessionsGroupByOutputType[P]>
        }
      >
    >


  export type ChatSessionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    session_id?: boolean
    user_id?: boolean
    doctor_id?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["chatSessions"]>

  export type ChatSessionsSelectScalar = {
    session_id?: boolean
    user_id?: boolean
    doctor_id?: boolean
    created_at?: boolean
  }



  export type $ChatSessionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatSessions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      session_id: string
      user_id: string
      doctor_id: string
      created_at: Date
    }, ExtArgs["result"]["chatSessions"]>
    composites: {}
  }


  type ChatSessionsGetPayload<S extends boolean | null | undefined | ChatSessionsDefaultArgs> = $Result.GetResult<Prisma.$ChatSessionsPayload, S>

  type ChatSessionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatSessionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatSessionsCountAggregateInputType | true
    }

  export interface ChatSessionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSessions'], meta: { name: 'ChatSessions' } }
    /**
     * Find zero or one ChatSessions that matches the filter.
     * @param {ChatSessionsFindUniqueArgs} args - Arguments to find a ChatSessions
     * @example
     * // Get one ChatSessions
     * const chatSessions = await prisma.chatSessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatSessionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChatSessionsFindUniqueArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChatSessions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatSessionsFindUniqueOrThrowArgs} args - Arguments to find a ChatSessions
     * @example
     * // Get one ChatSessions
     * const chatSessions = await prisma.chatSessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatSessionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatSessionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionsFindFirstArgs} args - Arguments to find a ChatSessions
     * @example
     * // Get one ChatSessions
     * const chatSessions = await prisma.chatSessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatSessionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatSessionsFindFirstArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChatSessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionsFindFirstOrThrowArgs} args - Arguments to find a ChatSessions
     * @example
     * // Get one ChatSessions
     * const chatSessions = await prisma.chatSessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatSessionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatSessionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSessions
     * const chatSessions = await prisma.chatSessions.findMany()
     * 
     * // Get first 10 ChatSessions
     * const chatSessions = await prisma.chatSessions.findMany({ take: 10 })
     * 
     * // Only select the `session_id`
     * const chatSessionsWithSession_idOnly = await prisma.chatSessions.findMany({ select: { session_id: true } })
     * 
    **/
    findMany<T extends ChatSessionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatSessionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChatSessions.
     * @param {ChatSessionsCreateArgs} args - Arguments to create a ChatSessions.
     * @example
     * // Create one ChatSessions
     * const ChatSessions = await prisma.chatSessions.create({
     *   data: {
     *     // ... data to create a ChatSessions
     *   }
     * })
     * 
    **/
    create<T extends ChatSessionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatSessionsCreateArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChatSessions.
     * @param {ChatSessionsCreateManyArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSessions = await prisma.chatSessions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ChatSessionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatSessionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatSessions.
     * @param {ChatSessionsDeleteArgs} args - Arguments to delete one ChatSessions.
     * @example
     * // Delete one ChatSessions
     * const ChatSessions = await prisma.chatSessions.delete({
     *   where: {
     *     // ... filter to delete one ChatSessions
     *   }
     * })
     * 
    **/
    delete<T extends ChatSessionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatSessionsDeleteArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChatSessions.
     * @param {ChatSessionsUpdateArgs} args - Arguments to update one ChatSessions.
     * @example
     * // Update one ChatSessions
     * const chatSessions = await prisma.chatSessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatSessionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatSessionsUpdateArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChatSessions.
     * @param {ChatSessionsDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
     * @example
     * // Delete a few ChatSessions
     * const { count } = await prisma.chatSessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatSessionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatSessionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSessions
     * const chatSessions = await prisma.chatSessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatSessionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatSessionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatSessions.
     * @param {ChatSessionsUpsertArgs} args - Arguments to update or create a ChatSessions.
     * @example
     * // Update or create a ChatSessions
     * const chatSessions = await prisma.chatSessions.upsert({
     *   create: {
     *     // ... data to create a ChatSessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSessions we want to update
     *   }
     * })
    **/
    upsert<T extends ChatSessionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatSessionsUpsertArgs<ExtArgs>>
    ): Prisma__ChatSessionsClient<$Result.GetResult<Prisma.$ChatSessionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * @param {ChatSessionsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const chatSessions = await prisma.chatSessions.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ChatSessionsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ChatSessions.
     * @param {ChatSessionsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const chatSessions = await prisma.chatSessions.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ChatSessionsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionsCountArgs} args - Arguments to filter ChatSessions to count.
     * @example
     * // Count the number of ChatSessions
     * const count = await prisma.chatSessions.count({
     *   where: {
     *     // ... the filter for the ChatSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatSessionsCountArgs>(
      args?: Subset<T, ChatSessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSessionsAggregateArgs>(args: Subset<T, ChatSessionsAggregateArgs>): Prisma.PrismaPromise<GetChatSessionsAggregateType<T>>

    /**
     * Group by ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSessionsGroupByArgs['orderBy'] }
        : { orderBy?: ChatSessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatSessions model
   */
  readonly fields: ChatSessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatSessionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChatSessions model
   */ 
  interface ChatSessionsFieldRefs {
    readonly session_id: FieldRef<"ChatSessions", 'String'>
    readonly user_id: FieldRef<"ChatSessions", 'String'>
    readonly doctor_id: FieldRef<"ChatSessions", 'String'>
    readonly created_at: FieldRef<"ChatSessions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatSessions findUnique
   */
  export type ChatSessionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where: ChatSessionsWhereUniqueInput
  }

  /**
   * ChatSessions findUniqueOrThrow
   */
  export type ChatSessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where: ChatSessionsWhereUniqueInput
  }

  /**
   * ChatSessions findFirst
   */
  export type ChatSessionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionsOrderByWithRelationInput | ChatSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionsScalarFieldEnum | ChatSessionsScalarFieldEnum[]
  }

  /**
   * ChatSessions findFirstOrThrow
   */
  export type ChatSessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionsOrderByWithRelationInput | ChatSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionsScalarFieldEnum | ChatSessionsScalarFieldEnum[]
  }

  /**
   * ChatSessions findMany
   */
  export type ChatSessionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionsOrderByWithRelationInput | ChatSessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSessions.
     */
    cursor?: ChatSessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    distinct?: ChatSessionsScalarFieldEnum | ChatSessionsScalarFieldEnum[]
  }

  /**
   * ChatSessions create
   */
  export type ChatSessionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * The data needed to create a ChatSessions.
     */
    data: XOR<ChatSessionsCreateInput, ChatSessionsUncheckedCreateInput>
  }

  /**
   * ChatSessions createMany
   */
  export type ChatSessionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionsCreateManyInput | ChatSessionsCreateManyInput[]
  }

  /**
   * ChatSessions update
   */
  export type ChatSessionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * The data needed to update a ChatSessions.
     */
    data: XOR<ChatSessionsUpdateInput, ChatSessionsUncheckedUpdateInput>
    /**
     * Choose, which ChatSessions to update.
     */
    where: ChatSessionsWhereUniqueInput
  }

  /**
   * ChatSessions updateMany
   */
  export type ChatSessionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionsUpdateManyMutationInput, ChatSessionsUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionsWhereInput
  }

  /**
   * ChatSessions upsert
   */
  export type ChatSessionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * The filter to search for the ChatSessions to update in case it exists.
     */
    where: ChatSessionsWhereUniqueInput
    /**
     * In case the ChatSessions found by the `where` argument doesn't exist, create a new ChatSessions with this data.
     */
    create: XOR<ChatSessionsCreateInput, ChatSessionsUncheckedCreateInput>
    /**
     * In case the ChatSessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSessionsUpdateInput, ChatSessionsUncheckedUpdateInput>
  }

  /**
   * ChatSessions delete
   */
  export type ChatSessionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
    /**
     * Filter which ChatSessions to delete.
     */
    where: ChatSessionsWhereUniqueInput
  }

  /**
   * ChatSessions deleteMany
   */
  export type ChatSessionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to delete
     */
    where?: ChatSessionsWhereInput
  }

  /**
   * ChatSessions findRaw
   */
  export type ChatSessionsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ChatSessions aggregateRaw
   */
  export type ChatSessionsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ChatSessions without action
   */
  export type ChatSessionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessions
     */
    select?: ChatSessionsSelect<ExtArgs> | null
  }


  /**
   * Model ChatMessages
   */

  export type AggregateChatMessages = {
    _count: ChatMessagesCountAggregateOutputType | null
    _min: ChatMessagesMinAggregateOutputType | null
    _max: ChatMessagesMaxAggregateOutputType | null
  }

  export type ChatMessagesMinAggregateOutputType = {
    message_id: string | null
    session_id: string | null
    sender_id: string | null
    recipient_id: string | null
    message: string | null
    timestamp: Date | null
  }

  export type ChatMessagesMaxAggregateOutputType = {
    message_id: string | null
    session_id: string | null
    sender_id: string | null
    recipient_id: string | null
    message: string | null
    timestamp: Date | null
  }

  export type ChatMessagesCountAggregateOutputType = {
    message_id: number
    session_id: number
    sender_id: number
    recipient_id: number
    message: number
    timestamp: number
    _all: number
  }


  export type ChatMessagesMinAggregateInputType = {
    message_id?: true
    session_id?: true
    sender_id?: true
    recipient_id?: true
    message?: true
    timestamp?: true
  }

  export type ChatMessagesMaxAggregateInputType = {
    message_id?: true
    session_id?: true
    sender_id?: true
    recipient_id?: true
    message?: true
    timestamp?: true
  }

  export type ChatMessagesCountAggregateInputType = {
    message_id?: true
    session_id?: true
    sender_id?: true
    recipient_id?: true
    message?: true
    timestamp?: true
    _all?: true
  }

  export type ChatMessagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to aggregate.
     */
    where?: ChatMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessagesOrderByWithRelationInput | ChatMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessagesMaxAggregateInputType
  }

  export type GetChatMessagesAggregateType<T extends ChatMessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessages[P]>
      : GetScalarType<T[P], AggregateChatMessages[P]>
  }




  export type ChatMessagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessagesWhereInput
    orderBy?: ChatMessagesOrderByWithAggregationInput | ChatMessagesOrderByWithAggregationInput[]
    by: ChatMessagesScalarFieldEnum[] | ChatMessagesScalarFieldEnum
    having?: ChatMessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessagesCountAggregateInputType | true
    _min?: ChatMessagesMinAggregateInputType
    _max?: ChatMessagesMaxAggregateInputType
  }

  export type ChatMessagesGroupByOutputType = {
    message_id: string
    session_id: string
    sender_id: string
    recipient_id: string
    message: string
    timestamp: Date
    _count: ChatMessagesCountAggregateOutputType | null
    _min: ChatMessagesMinAggregateOutputType | null
    _max: ChatMessagesMaxAggregateOutputType | null
  }

  type GetChatMessagesGroupByPayload<T extends ChatMessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessagesGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessagesGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    message_id?: boolean
    session_id?: boolean
    sender_id?: boolean
    recipient_id?: boolean
    message?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["chatMessages"]>

  export type ChatMessagesSelectScalar = {
    message_id?: boolean
    session_id?: boolean
    sender_id?: boolean
    recipient_id?: boolean
    message?: boolean
    timestamp?: boolean
  }



  export type $ChatMessagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessages"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      message_id: string
      session_id: string
      sender_id: string
      recipient_id: string
      message: string
      timestamp: Date
    }, ExtArgs["result"]["chatMessages"]>
    composites: {}
  }


  type ChatMessagesGetPayload<S extends boolean | null | undefined | ChatMessagesDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagesPayload, S>

  type ChatMessagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatMessagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatMessagesCountAggregateInputType | true
    }

  export interface ChatMessagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessages'], meta: { name: 'ChatMessages' } }
    /**
     * Find zero or one ChatMessages that matches the filter.
     * @param {ChatMessagesFindUniqueArgs} args - Arguments to find a ChatMessages
     * @example
     * // Get one ChatMessages
     * const chatMessages = await prisma.chatMessages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatMessagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChatMessagesFindUniqueArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChatMessages that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatMessagesFindUniqueOrThrowArgs} args - Arguments to find a ChatMessages
     * @example
     * // Get one ChatMessages
     * const chatMessages = await prisma.chatMessages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatMessagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatMessagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessagesFindFirstArgs} args - Arguments to find a ChatMessages
     * @example
     * // Get one ChatMessages
     * const chatMessages = await prisma.chatMessages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatMessagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatMessagesFindFirstArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChatMessages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessagesFindFirstOrThrowArgs} args - Arguments to find a ChatMessages
     * @example
     * // Get one ChatMessages
     * const chatMessages = await prisma.chatMessages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatMessagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatMessagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessages.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessages.findMany({ take: 10 })
     * 
     * // Only select the `message_id`
     * const chatMessagesWithMessage_idOnly = await prisma.chatMessages.findMany({ select: { message_id: true } })
     * 
    **/
    findMany<T extends ChatMessagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatMessagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChatMessages.
     * @param {ChatMessagesCreateArgs} args - Arguments to create a ChatMessages.
     * @example
     * // Create one ChatMessages
     * const ChatMessages = await prisma.chatMessages.create({
     *   data: {
     *     // ... data to create a ChatMessages
     *   }
     * })
     * 
    **/
    create<T extends ChatMessagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatMessagesCreateArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChatMessages.
     * @param {ChatMessagesCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessages = await prisma.chatMessages.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ChatMessagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatMessagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatMessages.
     * @param {ChatMessagesDeleteArgs} args - Arguments to delete one ChatMessages.
     * @example
     * // Delete one ChatMessages
     * const ChatMessages = await prisma.chatMessages.delete({
     *   where: {
     *     // ... filter to delete one ChatMessages
     *   }
     * })
     * 
    **/
    delete<T extends ChatMessagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChatMessagesDeleteArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChatMessages.
     * @param {ChatMessagesUpdateArgs} args - Arguments to update one ChatMessages.
     * @example
     * // Update one ChatMessages
     * const chatMessages = await prisma.chatMessages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatMessagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChatMessagesUpdateArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessagesDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatMessagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChatMessagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessages = await prisma.chatMessages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatMessagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChatMessagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatMessages.
     * @param {ChatMessagesUpsertArgs} args - Arguments to update or create a ChatMessages.
     * @example
     * // Update or create a ChatMessages
     * const chatMessages = await prisma.chatMessages.upsert({
     *   create: {
     *     // ... data to create a ChatMessages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessages we want to update
     *   }
     * })
    **/
    upsert<T extends ChatMessagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChatMessagesUpsertArgs<ExtArgs>>
    ): Prisma__ChatMessagesClient<$Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * @param {ChatMessagesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const chatMessages = await prisma.chatMessages.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ChatMessagesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ChatMessages.
     * @param {ChatMessagesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const chatMessages = await prisma.chatMessages.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ChatMessagesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessagesCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessages.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessagesCountArgs>(
      args?: Subset<T, ChatMessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessagesAggregateArgs>(args: Subset<T, ChatMessagesAggregateArgs>): Prisma.PrismaPromise<GetChatMessagesAggregateType<T>>

    /**
     * Group by ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessagesGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessages model
   */
  readonly fields: ChatMessagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChatMessages model
   */ 
  interface ChatMessagesFieldRefs {
    readonly message_id: FieldRef<"ChatMessages", 'String'>
    readonly session_id: FieldRef<"ChatMessages", 'String'>
    readonly sender_id: FieldRef<"ChatMessages", 'String'>
    readonly recipient_id: FieldRef<"ChatMessages", 'String'>
    readonly message: FieldRef<"ChatMessages", 'String'>
    readonly timestamp: FieldRef<"ChatMessages", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessages findUnique
   */
  export type ChatMessagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where: ChatMessagesWhereUniqueInput
  }

  /**
   * ChatMessages findUniqueOrThrow
   */
  export type ChatMessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where: ChatMessagesWhereUniqueInput
  }

  /**
   * ChatMessages findFirst
   */
  export type ChatMessagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessagesOrderByWithRelationInput | ChatMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessagesScalarFieldEnum | ChatMessagesScalarFieldEnum[]
  }

  /**
   * ChatMessages findFirstOrThrow
   */
  export type ChatMessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessagesOrderByWithRelationInput | ChatMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessagesScalarFieldEnum | ChatMessagesScalarFieldEnum[]
  }

  /**
   * ChatMessages findMany
   */
  export type ChatMessagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessagesOrderByWithRelationInput | ChatMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessagesScalarFieldEnum | ChatMessagesScalarFieldEnum[]
  }

  /**
   * ChatMessages create
   */
  export type ChatMessagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * The data needed to create a ChatMessages.
     */
    data: XOR<ChatMessagesCreateInput, ChatMessagesUncheckedCreateInput>
  }

  /**
   * ChatMessages createMany
   */
  export type ChatMessagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessagesCreateManyInput | ChatMessagesCreateManyInput[]
  }

  /**
   * ChatMessages update
   */
  export type ChatMessagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * The data needed to update a ChatMessages.
     */
    data: XOR<ChatMessagesUpdateInput, ChatMessagesUncheckedUpdateInput>
    /**
     * Choose, which ChatMessages to update.
     */
    where: ChatMessagesWhereUniqueInput
  }

  /**
   * ChatMessages updateMany
   */
  export type ChatMessagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessagesUpdateManyMutationInput, ChatMessagesUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessagesWhereInput
  }

  /**
   * ChatMessages upsert
   */
  export type ChatMessagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * The filter to search for the ChatMessages to update in case it exists.
     */
    where: ChatMessagesWhereUniqueInput
    /**
     * In case the ChatMessages found by the `where` argument doesn't exist, create a new ChatMessages with this data.
     */
    create: XOR<ChatMessagesCreateInput, ChatMessagesUncheckedCreateInput>
    /**
     * In case the ChatMessages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessagesUpdateInput, ChatMessagesUncheckedUpdateInput>
  }

  /**
   * ChatMessages delete
   */
  export type ChatMessagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
    /**
     * Filter which ChatMessages to delete.
     */
    where: ChatMessagesWhereUniqueInput
  }

  /**
   * ChatMessages deleteMany
   */
  export type ChatMessagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessagesWhereInput
  }

  /**
   * ChatMessages findRaw
   */
  export type ChatMessagesFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ChatMessages aggregateRaw
   */
  export type ChatMessagesAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ChatMessages without action
   */
  export type ChatMessagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessages
     */
    select?: ChatMessagesSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UsersScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    country: 'country',
    phoneNumber: 'phoneNumber',
    schoolName: 'schoolName',
    email: 'email',
    password: 'password',
    verified: 'verified',
    otp: 'otp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isSuspended: 'isSuspended',
    isDeleted: 'isDeleted'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    city: 'city',
    state: 'state',
    local_government: 'local_government',
    usersId: 'usersId'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const TransactionPinScalarFieldEnum: {
    id: 'id',
    pin: 'pin',
    usersId: 'usersId'
  };

  export type TransactionPinScalarFieldEnum = (typeof TransactionPinScalarFieldEnum)[keyof typeof TransactionPinScalarFieldEnum]


  export const TransactionHistoryScalarFieldEnum: {
    id: 'id',
    email: 'email',
    paystack_ref: 'paystack_ref',
    payment_status: 'payment_status',
    time_paid: 'time_paid',
    date_paid: 'date_paid'
  };

  export type TransactionHistoryScalarFieldEnum = (typeof TransactionHistoryScalarFieldEnum)[keyof typeof TransactionHistoryScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    balance: 'balance',
    usersId: 'usersId'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const BvnScalarFieldEnum: {
    id: 'id',
    bvn: 'bvn',
    usersId: 'usersId'
  };

  export type BvnScalarFieldEnum = (typeof BvnScalarFieldEnum)[keyof typeof BvnScalarFieldEnum]


  export const SetupProfileScalarFieldEnum: {
    id: 'id',
    username: 'username',
    matricNumber: 'matricNumber',
    usersId: 'usersId'
  };

  export type SetupProfileScalarFieldEnum = (typeof SetupProfileScalarFieldEnum)[keyof typeof SetupProfileScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    hasEnded: 'hasEnded',
    period: 'period',
    status: 'status',
    appointmentType: 'appointmentType',
    usersId: 'usersId',
    doctorsId: 'doctorsId',
    rating: 'rating',
    review: 'review'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const DoctorsScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    password: 'password',
    specialization: 'specialization',
    country: 'country',
    state: 'state',
    certificate: 'certificate',
    isApproved: 'isApproved',
    soundEnabled: 'soundEnabled',
    inviteFriendsEnabled: 'inviteFriendsEnabled',
    vibrationEnabled: 'vibrationEnabled',
    profilePicture: 'profilePicture',
    yearsOfExperience: 'yearsOfExperience',
    graduationYear: 'graduationYear',
    school: 'school',
    medicalLicensePicture: 'medicalLicensePicture',
    about: 'about',
    appointmentId: 'appointmentId'
  };

  export type DoctorsScalarFieldEnum = (typeof DoctorsScalarFieldEnum)[keyof typeof DoctorsScalarFieldEnum]


  export const WorkingHoursScalarFieldEnum: {
    id: 'id',
    day: 'day',
    startTime: 'startTime',
    endTime: 'endTime',
    doctorId: 'doctorId'
  };

  export type WorkingHoursScalarFieldEnum = (typeof WorkingHoursScalarFieldEnum)[keyof typeof WorkingHoursScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    image: 'image',
    title: 'title',
    amount: 'amount',
    delivery: 'delivery',
    description: 'description',
    howToUse: 'howToUse',
    quantity: 'quantity',
    productCategory: 'productCategory'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    value: 'value',
    productId: 'productId'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const CartItemScalarFieldEnum: {
    id: 'id',
    image: 'image',
    title: 'title',
    amount: 'amount',
    delivery: 'delivery',
    quantity: 'quantity',
    userId: 'userId',
    productId: 'productId'
  };

  export type CartItemScalarFieldEnum = (typeof CartItemScalarFieldEnum)[keyof typeof CartItemScalarFieldEnum]


  export const SaveProductScalarFieldEnum: {
    id: 'id',
    image: 'image',
    title: 'title',
    amount: 'amount',
    delivery: 'delivery',
    userId: 'userId',
    productId: 'productId'
  };

  export type SaveProductScalarFieldEnum = (typeof SaveProductScalarFieldEnum)[keyof typeof SaveProductScalarFieldEnum]


  export const DiagnosticTestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    dateCreated: 'dateCreated',
    type: 'type'
  };

  export type DiagnosticTestScalarFieldEnum = (typeof DiagnosticTestScalarFieldEnum)[keyof typeof DiagnosticTestScalarFieldEnum]


  export const SelectedTestScalarFieldEnum: {
    id: 'id',
    testName: 'testName',
    price: 'price',
    quantity: 'quantity',
    userId: 'userId',
    diagnosticTestId: 'diagnosticTestId'
  };

  export type SelectedTestScalarFieldEnum = (typeof SelectedTestScalarFieldEnum)[keyof typeof SelectedTestScalarFieldEnum]


  export const ChatSessionsScalarFieldEnum: {
    session_id: 'session_id',
    user_id: 'user_id',
    doctor_id: 'doctor_id',
    created_at: 'created_at'
  };

  export type ChatSessionsScalarFieldEnum = (typeof ChatSessionsScalarFieldEnum)[keyof typeof ChatSessionsScalarFieldEnum]


  export const ChatMessagesScalarFieldEnum: {
    message_id: 'message_id',
    session_id: 'session_id',
    sender_id: 'sender_id',
    recipient_id: 'recipient_id',
    message: 'message',
    timestamp: 'timestamp'
  };

  export type ChatMessagesScalarFieldEnum = (typeof ChatMessagesScalarFieldEnum)[keyof typeof ChatMessagesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Period'
   */
  export type EnumPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Period'>
    


  /**
   * Reference to a field of type 'Period[]'
   */
  export type ListEnumPeriodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Period[]'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'productCategory'
   */
  export type EnumproductCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'productCategory'>
    


  /**
   * Reference to a field of type 'productCategory[]'
   */
  export type ListEnumproductCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'productCategory[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: StringFilter<"Users"> | string
    firstName?: StringFilter<"Users"> | string
    lastName?: StringFilter<"Users"> | string
    dateOfBirth?: StringFilter<"Users"> | string
    country?: StringFilter<"Users"> | string
    phoneNumber?: StringFilter<"Users"> | string
    schoolName?: StringNullableFilter<"Users"> | string | null
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    verified?: BoolNullableFilter<"Users"> | boolean | null
    otp?: IntNullableFilter<"Users"> | number | null
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    isSuspended?: BoolNullableFilter<"Users"> | boolean | null
    isDeleted?: BoolNullableFilter<"Users"> | boolean | null
    Wallet?: XOR<WalletNullableRelationFilter, WalletWhereInput> | null
    Bvn?: BvnListRelationFilter
    SetupProfile?: XOR<SetupProfileNullableRelationFilter, SetupProfileWhereInput> | null
    Appointment?: AppointmentListRelationFilter
    Cart?: CartItemListRelationFilter
    TransactionPin?: XOR<TransactionPinNullableRelationFilter, TransactionPinWhereInput> | null
    SaveProduct?: SaveProductListRelationFilter
    address?: AddressListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    country?: SortOrder
    phoneNumber?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isSuspended?: SortOrder
    isDeleted?: SortOrder
    Wallet?: WalletOrderByWithRelationInput
    Bvn?: BvnOrderByRelationAggregateInput
    SetupProfile?: SetupProfileOrderByWithRelationInput
    Appointment?: AppointmentOrderByRelationAggregateInput
    Cart?: CartItemOrderByRelationAggregateInput
    TransactionPin?: TransactionPinOrderByWithRelationInput
    SaveProduct?: SaveProductOrderByRelationAggregateInput
    address?: AddressOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    firstName?: StringFilter<"Users"> | string
    lastName?: StringFilter<"Users"> | string
    dateOfBirth?: StringFilter<"Users"> | string
    country?: StringFilter<"Users"> | string
    phoneNumber?: StringFilter<"Users"> | string
    schoolName?: StringNullableFilter<"Users"> | string | null
    password?: StringFilter<"Users"> | string
    verified?: BoolNullableFilter<"Users"> | boolean | null
    otp?: IntNullableFilter<"Users"> | number | null
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    isSuspended?: BoolNullableFilter<"Users"> | boolean | null
    isDeleted?: BoolNullableFilter<"Users"> | boolean | null
    Wallet?: XOR<WalletNullableRelationFilter, WalletWhereInput> | null
    Bvn?: BvnListRelationFilter
    SetupProfile?: XOR<SetupProfileNullableRelationFilter, SetupProfileWhereInput> | null
    Appointment?: AppointmentListRelationFilter
    Cart?: CartItemListRelationFilter
    TransactionPin?: XOR<TransactionPinNullableRelationFilter, TransactionPinWhereInput> | null
    SaveProduct?: SaveProductListRelationFilter
    address?: AddressListRelationFilter
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    country?: SortOrder
    phoneNumber?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isSuspended?: SortOrder
    isDeleted?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Users"> | string
    firstName?: StringWithAggregatesFilter<"Users"> | string
    lastName?: StringWithAggregatesFilter<"Users"> | string
    dateOfBirth?: StringWithAggregatesFilter<"Users"> | string
    country?: StringWithAggregatesFilter<"Users"> | string
    phoneNumber?: StringWithAggregatesFilter<"Users"> | string
    schoolName?: StringNullableWithAggregatesFilter<"Users"> | string | null
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    verified?: BoolNullableWithAggregatesFilter<"Users"> | boolean | null
    otp?: IntNullableWithAggregatesFilter<"Users"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    isSuspended?: BoolNullableWithAggregatesFilter<"Users"> | boolean | null
    isDeleted?: BoolNullableWithAggregatesFilter<"Users"> | boolean | null
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    street?: StringNullableFilter<"Address"> | string | null
    city?: StringNullableFilter<"Address"> | string | null
    state?: StringFilter<"Address"> | string
    local_government?: StringFilter<"Address"> | string
    usersId?: StringFilter<"Address"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    local_government?: SortOrder
    usersId?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    street?: StringNullableFilter<"Address"> | string | null
    city?: StringNullableFilter<"Address"> | string | null
    state?: StringFilter<"Address"> | string
    local_government?: StringFilter<"Address"> | string
    usersId?: StringFilter<"Address"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    local_government?: SortOrder
    usersId?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    street?: StringNullableWithAggregatesFilter<"Address"> | string | null
    city?: StringNullableWithAggregatesFilter<"Address"> | string | null
    state?: StringWithAggregatesFilter<"Address"> | string
    local_government?: StringWithAggregatesFilter<"Address"> | string
    usersId?: StringWithAggregatesFilter<"Address"> | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }, "id">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type TransactionPinWhereInput = {
    AND?: TransactionPinWhereInput | TransactionPinWhereInput[]
    OR?: TransactionPinWhereInput[]
    NOT?: TransactionPinWhereInput | TransactionPinWhereInput[]
    id?: StringFilter<"TransactionPin"> | string
    pin?: StringFilter<"TransactionPin"> | string
    usersId?: StringFilter<"TransactionPin"> | string
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type TransactionPinOrderByWithRelationInput = {
    id?: SortOrder
    pin?: SortOrder
    usersId?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type TransactionPinWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usersId?: string
    AND?: TransactionPinWhereInput | TransactionPinWhereInput[]
    OR?: TransactionPinWhereInput[]
    NOT?: TransactionPinWhereInput | TransactionPinWhereInput[]
    pin?: StringFilter<"TransactionPin"> | string
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id" | "usersId">

  export type TransactionPinOrderByWithAggregationInput = {
    id?: SortOrder
    pin?: SortOrder
    usersId?: SortOrder
    _count?: TransactionPinCountOrderByAggregateInput
    _max?: TransactionPinMaxOrderByAggregateInput
    _min?: TransactionPinMinOrderByAggregateInput
  }

  export type TransactionPinScalarWhereWithAggregatesInput = {
    AND?: TransactionPinScalarWhereWithAggregatesInput | TransactionPinScalarWhereWithAggregatesInput[]
    OR?: TransactionPinScalarWhereWithAggregatesInput[]
    NOT?: TransactionPinScalarWhereWithAggregatesInput | TransactionPinScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TransactionPin"> | string
    pin?: StringWithAggregatesFilter<"TransactionPin"> | string
    usersId?: StringWithAggregatesFilter<"TransactionPin"> | string
  }

  export type TransactionHistoryWhereInput = {
    AND?: TransactionHistoryWhereInput | TransactionHistoryWhereInput[]
    OR?: TransactionHistoryWhereInput[]
    NOT?: TransactionHistoryWhereInput | TransactionHistoryWhereInput[]
    id?: StringFilter<"TransactionHistory"> | string
    email?: StringFilter<"TransactionHistory"> | string
    paystack_ref?: StringFilter<"TransactionHistory"> | string
    payment_status?: StringFilter<"TransactionHistory"> | string
    time_paid?: DateTimeFilter<"TransactionHistory"> | Date | string
    date_paid?: DateTimeFilter<"TransactionHistory"> | Date | string
  }

  export type TransactionHistoryOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    paystack_ref?: SortOrder
    payment_status?: SortOrder
    time_paid?: SortOrder
    date_paid?: SortOrder
  }

  export type TransactionHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: TransactionHistoryWhereInput | TransactionHistoryWhereInput[]
    OR?: TransactionHistoryWhereInput[]
    NOT?: TransactionHistoryWhereInput | TransactionHistoryWhereInput[]
    paystack_ref?: StringFilter<"TransactionHistory"> | string
    payment_status?: StringFilter<"TransactionHistory"> | string
    time_paid?: DateTimeFilter<"TransactionHistory"> | Date | string
    date_paid?: DateTimeFilter<"TransactionHistory"> | Date | string
  }, "id" | "email">

  export type TransactionHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    paystack_ref?: SortOrder
    payment_status?: SortOrder
    time_paid?: SortOrder
    date_paid?: SortOrder
    _count?: TransactionHistoryCountOrderByAggregateInput
    _max?: TransactionHistoryMaxOrderByAggregateInput
    _min?: TransactionHistoryMinOrderByAggregateInput
  }

  export type TransactionHistoryScalarWhereWithAggregatesInput = {
    AND?: TransactionHistoryScalarWhereWithAggregatesInput | TransactionHistoryScalarWhereWithAggregatesInput[]
    OR?: TransactionHistoryScalarWhereWithAggregatesInput[]
    NOT?: TransactionHistoryScalarWhereWithAggregatesInput | TransactionHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TransactionHistory"> | string
    email?: StringWithAggregatesFilter<"TransactionHistory"> | string
    paystack_ref?: StringWithAggregatesFilter<"TransactionHistory"> | string
    payment_status?: StringWithAggregatesFilter<"TransactionHistory"> | string
    time_paid?: DateTimeWithAggregatesFilter<"TransactionHistory"> | Date | string
    date_paid?: DateTimeWithAggregatesFilter<"TransactionHistory"> | Date | string
  }

  export type WalletWhereInput = {
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    id?: StringFilter<"Wallet"> | string
    balance?: IntFilter<"Wallet"> | number
    usersId?: StringFilter<"Wallet"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    balance?: SortOrder
    usersId?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type WalletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usersId?: string
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    balance?: IntFilter<"Wallet"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "usersId">

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    balance?: SortOrder
    usersId?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    OR?: WalletScalarWhereWithAggregatesInput[]
    NOT?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wallet"> | string
    balance?: IntWithAggregatesFilter<"Wallet"> | number
    usersId?: StringWithAggregatesFilter<"Wallet"> | string
  }

  export type BvnWhereInput = {
    AND?: BvnWhereInput | BvnWhereInput[]
    OR?: BvnWhereInput[]
    NOT?: BvnWhereInput | BvnWhereInput[]
    id?: StringFilter<"Bvn"> | string
    bvn?: IntFilter<"Bvn"> | number
    usersId?: StringFilter<"Bvn"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type BvnOrderByWithRelationInput = {
    id?: SortOrder
    bvn?: SortOrder
    usersId?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type BvnWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BvnWhereInput | BvnWhereInput[]
    OR?: BvnWhereInput[]
    NOT?: BvnWhereInput | BvnWhereInput[]
    bvn?: IntFilter<"Bvn"> | number
    usersId?: StringFilter<"Bvn"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type BvnOrderByWithAggregationInput = {
    id?: SortOrder
    bvn?: SortOrder
    usersId?: SortOrder
    _count?: BvnCountOrderByAggregateInput
    _avg?: BvnAvgOrderByAggregateInput
    _max?: BvnMaxOrderByAggregateInput
    _min?: BvnMinOrderByAggregateInput
    _sum?: BvnSumOrderByAggregateInput
  }

  export type BvnScalarWhereWithAggregatesInput = {
    AND?: BvnScalarWhereWithAggregatesInput | BvnScalarWhereWithAggregatesInput[]
    OR?: BvnScalarWhereWithAggregatesInput[]
    NOT?: BvnScalarWhereWithAggregatesInput | BvnScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bvn"> | string
    bvn?: IntWithAggregatesFilter<"Bvn"> | number
    usersId?: StringWithAggregatesFilter<"Bvn"> | string
  }

  export type SetupProfileWhereInput = {
    AND?: SetupProfileWhereInput | SetupProfileWhereInput[]
    OR?: SetupProfileWhereInput[]
    NOT?: SetupProfileWhereInput | SetupProfileWhereInput[]
    id?: StringFilter<"SetupProfile"> | string
    username?: StringFilter<"SetupProfile"> | string
    matricNumber?: StringFilter<"SetupProfile"> | string
    usersId?: StringFilter<"SetupProfile"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type SetupProfileOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    matricNumber?: SortOrder
    usersId?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type SetupProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    usersId?: string
    AND?: SetupProfileWhereInput | SetupProfileWhereInput[]
    OR?: SetupProfileWhereInput[]
    NOT?: SetupProfileWhereInput | SetupProfileWhereInput[]
    username?: StringFilter<"SetupProfile"> | string
    matricNumber?: StringFilter<"SetupProfile"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "usersId">

  export type SetupProfileOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    matricNumber?: SortOrder
    usersId?: SortOrder
    _count?: SetupProfileCountOrderByAggregateInput
    _max?: SetupProfileMaxOrderByAggregateInput
    _min?: SetupProfileMinOrderByAggregateInput
  }

  export type SetupProfileScalarWhereWithAggregatesInput = {
    AND?: SetupProfileScalarWhereWithAggregatesInput | SetupProfileScalarWhereWithAggregatesInput[]
    OR?: SetupProfileScalarWhereWithAggregatesInput[]
    NOT?: SetupProfileScalarWhereWithAggregatesInput | SetupProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SetupProfile"> | string
    username?: StringWithAggregatesFilter<"SetupProfile"> | string
    matricNumber?: StringWithAggregatesFilter<"SetupProfile"> | string
    usersId?: StringWithAggregatesFilter<"SetupProfile"> | string
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    date?: DateTimeFilter<"Appointment"> | Date | string
    startTime?: StringFilter<"Appointment"> | string
    endTime?: StringFilter<"Appointment"> | string
    hasEnded?: BoolNullableFilter<"Appointment"> | boolean | null
    period?: EnumPeriodFilter<"Appointment"> | $Enums.Period
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    appointmentType?: StringFilter<"Appointment"> | string
    usersId?: StringFilter<"Appointment"> | string
    doctorsId?: StringFilter<"Appointment"> | string
    rating?: IntNullableFilter<"Appointment"> | number | null
    review?: StringNullableFilter<"Appointment"> | string | null
    Doctors?: XOR<DoctorsRelationFilter, DoctorsWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    hasEnded?: SortOrder
    period?: SortOrder
    status?: SortOrder
    appointmentType?: SortOrder
    usersId?: SortOrder
    doctorsId?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    Doctors?: DoctorsOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    date?: DateTimeFilter<"Appointment"> | Date | string
    startTime?: StringFilter<"Appointment"> | string
    endTime?: StringFilter<"Appointment"> | string
    hasEnded?: BoolNullableFilter<"Appointment"> | boolean | null
    period?: EnumPeriodFilter<"Appointment"> | $Enums.Period
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    appointmentType?: StringFilter<"Appointment"> | string
    usersId?: StringFilter<"Appointment"> | string
    doctorsId?: StringFilter<"Appointment"> | string
    rating?: IntNullableFilter<"Appointment"> | number | null
    review?: StringNullableFilter<"Appointment"> | string | null
    Doctors?: XOR<DoctorsRelationFilter, DoctorsWhereInput>
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    hasEnded?: SortOrder
    period?: SortOrder
    status?: SortOrder
    appointmentType?: SortOrder
    usersId?: SortOrder
    doctorsId?: SortOrder
    rating?: SortOrder
    review?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    date?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    startTime?: StringWithAggregatesFilter<"Appointment"> | string
    endTime?: StringWithAggregatesFilter<"Appointment"> | string
    hasEnded?: BoolNullableWithAggregatesFilter<"Appointment"> | boolean | null
    period?: EnumPeriodWithAggregatesFilter<"Appointment"> | $Enums.Period
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    appointmentType?: StringWithAggregatesFilter<"Appointment"> | string
    usersId?: StringWithAggregatesFilter<"Appointment"> | string
    doctorsId?: StringWithAggregatesFilter<"Appointment"> | string
    rating?: IntNullableWithAggregatesFilter<"Appointment"> | number | null
    review?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
  }

  export type DoctorsWhereInput = {
    AND?: DoctorsWhereInput | DoctorsWhereInput[]
    OR?: DoctorsWhereInput[]
    NOT?: DoctorsWhereInput | DoctorsWhereInput[]
    id?: StringFilter<"Doctors"> | string
    firstName?: StringFilter<"Doctors"> | string
    lastName?: StringFilter<"Doctors"> | string
    email?: StringFilter<"Doctors"> | string
    phoneNumber?: StringFilter<"Doctors"> | string
    password?: StringFilter<"Doctors"> | string
    specialization?: StringFilter<"Doctors"> | string
    country?: StringFilter<"Doctors"> | string
    state?: StringFilter<"Doctors"> | string
    certificate?: StringFilter<"Doctors"> | string
    isApproved?: BoolFilter<"Doctors"> | boolean
    soundEnabled?: BoolFilter<"Doctors"> | boolean
    inviteFriendsEnabled?: BoolFilter<"Doctors"> | boolean
    vibrationEnabled?: BoolFilter<"Doctors"> | boolean
    profilePicture?: StringNullableFilter<"Doctors"> | string | null
    yearsOfExperience?: IntFilter<"Doctors"> | number
    graduationYear?: IntFilter<"Doctors"> | number
    school?: StringFilter<"Doctors"> | string
    medicalLicensePicture?: StringFilter<"Doctors"> | string
    about?: StringNullableFilter<"Doctors"> | string | null
    appointmentId?: StringNullableFilter<"Doctors"> | string | null
    workingHours?: WorkingHoursListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }

  export type DoctorsOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    specialization?: SortOrder
    country?: SortOrder
    state?: SortOrder
    certificate?: SortOrder
    isApproved?: SortOrder
    soundEnabled?: SortOrder
    inviteFriendsEnabled?: SortOrder
    vibrationEnabled?: SortOrder
    profilePicture?: SortOrder
    yearsOfExperience?: SortOrder
    graduationYear?: SortOrder
    school?: SortOrder
    medicalLicensePicture?: SortOrder
    about?: SortOrder
    appointmentId?: SortOrder
    workingHours?: WorkingHoursOrderByRelationAggregateInput
    Appointment?: AppointmentOrderByRelationAggregateInput
  }

  export type DoctorsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: DoctorsWhereInput | DoctorsWhereInput[]
    OR?: DoctorsWhereInput[]
    NOT?: DoctorsWhereInput | DoctorsWhereInput[]
    firstName?: StringFilter<"Doctors"> | string
    lastName?: StringFilter<"Doctors"> | string
    phoneNumber?: StringFilter<"Doctors"> | string
    password?: StringFilter<"Doctors"> | string
    specialization?: StringFilter<"Doctors"> | string
    country?: StringFilter<"Doctors"> | string
    state?: StringFilter<"Doctors"> | string
    certificate?: StringFilter<"Doctors"> | string
    isApproved?: BoolFilter<"Doctors"> | boolean
    soundEnabled?: BoolFilter<"Doctors"> | boolean
    inviteFriendsEnabled?: BoolFilter<"Doctors"> | boolean
    vibrationEnabled?: BoolFilter<"Doctors"> | boolean
    profilePicture?: StringNullableFilter<"Doctors"> | string | null
    yearsOfExperience?: IntFilter<"Doctors"> | number
    graduationYear?: IntFilter<"Doctors"> | number
    school?: StringFilter<"Doctors"> | string
    medicalLicensePicture?: StringFilter<"Doctors"> | string
    about?: StringNullableFilter<"Doctors"> | string | null
    appointmentId?: StringNullableFilter<"Doctors"> | string | null
    workingHours?: WorkingHoursListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }, "id" | "email">

  export type DoctorsOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    specialization?: SortOrder
    country?: SortOrder
    state?: SortOrder
    certificate?: SortOrder
    isApproved?: SortOrder
    soundEnabled?: SortOrder
    inviteFriendsEnabled?: SortOrder
    vibrationEnabled?: SortOrder
    profilePicture?: SortOrder
    yearsOfExperience?: SortOrder
    graduationYear?: SortOrder
    school?: SortOrder
    medicalLicensePicture?: SortOrder
    about?: SortOrder
    appointmentId?: SortOrder
    _count?: DoctorsCountOrderByAggregateInput
    _avg?: DoctorsAvgOrderByAggregateInput
    _max?: DoctorsMaxOrderByAggregateInput
    _min?: DoctorsMinOrderByAggregateInput
    _sum?: DoctorsSumOrderByAggregateInput
  }

  export type DoctorsScalarWhereWithAggregatesInput = {
    AND?: DoctorsScalarWhereWithAggregatesInput | DoctorsScalarWhereWithAggregatesInput[]
    OR?: DoctorsScalarWhereWithAggregatesInput[]
    NOT?: DoctorsScalarWhereWithAggregatesInput | DoctorsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doctors"> | string
    firstName?: StringWithAggregatesFilter<"Doctors"> | string
    lastName?: StringWithAggregatesFilter<"Doctors"> | string
    email?: StringWithAggregatesFilter<"Doctors"> | string
    phoneNumber?: StringWithAggregatesFilter<"Doctors"> | string
    password?: StringWithAggregatesFilter<"Doctors"> | string
    specialization?: StringWithAggregatesFilter<"Doctors"> | string
    country?: StringWithAggregatesFilter<"Doctors"> | string
    state?: StringWithAggregatesFilter<"Doctors"> | string
    certificate?: StringWithAggregatesFilter<"Doctors"> | string
    isApproved?: BoolWithAggregatesFilter<"Doctors"> | boolean
    soundEnabled?: BoolWithAggregatesFilter<"Doctors"> | boolean
    inviteFriendsEnabled?: BoolWithAggregatesFilter<"Doctors"> | boolean
    vibrationEnabled?: BoolWithAggregatesFilter<"Doctors"> | boolean
    profilePicture?: StringNullableWithAggregatesFilter<"Doctors"> | string | null
    yearsOfExperience?: IntWithAggregatesFilter<"Doctors"> | number
    graduationYear?: IntWithAggregatesFilter<"Doctors"> | number
    school?: StringWithAggregatesFilter<"Doctors"> | string
    medicalLicensePicture?: StringWithAggregatesFilter<"Doctors"> | string
    about?: StringNullableWithAggregatesFilter<"Doctors"> | string | null
    appointmentId?: StringNullableWithAggregatesFilter<"Doctors"> | string | null
  }

  export type WorkingHoursWhereInput = {
    AND?: WorkingHoursWhereInput | WorkingHoursWhereInput[]
    OR?: WorkingHoursWhereInput[]
    NOT?: WorkingHoursWhereInput | WorkingHoursWhereInput[]
    id?: StringFilter<"WorkingHours"> | string
    day?: StringFilter<"WorkingHours"> | string
    startTime?: StringFilter<"WorkingHours"> | string
    endTime?: StringFilter<"WorkingHours"> | string
    doctorId?: StringFilter<"WorkingHours"> | string
    doctor?: XOR<DoctorsRelationFilter, DoctorsWhereInput>
  }

  export type WorkingHoursOrderByWithRelationInput = {
    id?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    doctorId?: SortOrder
    doctor?: DoctorsOrderByWithRelationInput
  }

  export type WorkingHoursWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkingHoursWhereInput | WorkingHoursWhereInput[]
    OR?: WorkingHoursWhereInput[]
    NOT?: WorkingHoursWhereInput | WorkingHoursWhereInput[]
    day?: StringFilter<"WorkingHours"> | string
    startTime?: StringFilter<"WorkingHours"> | string
    endTime?: StringFilter<"WorkingHours"> | string
    doctorId?: StringFilter<"WorkingHours"> | string
    doctor?: XOR<DoctorsRelationFilter, DoctorsWhereInput>
  }, "id">

  export type WorkingHoursOrderByWithAggregationInput = {
    id?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    doctorId?: SortOrder
    _count?: WorkingHoursCountOrderByAggregateInput
    _max?: WorkingHoursMaxOrderByAggregateInput
    _min?: WorkingHoursMinOrderByAggregateInput
  }

  export type WorkingHoursScalarWhereWithAggregatesInput = {
    AND?: WorkingHoursScalarWhereWithAggregatesInput | WorkingHoursScalarWhereWithAggregatesInput[]
    OR?: WorkingHoursScalarWhereWithAggregatesInput[]
    NOT?: WorkingHoursScalarWhereWithAggregatesInput | WorkingHoursScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkingHours"> | string
    day?: StringWithAggregatesFilter<"WorkingHours"> | string
    startTime?: StringWithAggregatesFilter<"WorkingHours"> | string
    endTime?: StringWithAggregatesFilter<"WorkingHours"> | string
    doctorId?: StringWithAggregatesFilter<"WorkingHours"> | string
  }

  export type ProductsWhereInput = {
    AND?: ProductsWhereInput | ProductsWhereInput[]
    OR?: ProductsWhereInput[]
    NOT?: ProductsWhereInput | ProductsWhereInput[]
    id?: StringFilter<"Products"> | string
    image?: StringFilter<"Products"> | string
    title?: StringFilter<"Products"> | string
    amount?: IntFilter<"Products"> | number
    delivery?: StringFilter<"Products"> | string
    description?: StringFilter<"Products"> | string
    howToUse?: StringFilter<"Products"> | string
    quantity?: IntFilter<"Products"> | number
    productCategory?: EnumproductCategoryFilter<"Products"> | $Enums.productCategory
    CartItem?: CartItemListRelationFilter
    SaveProduct?: SaveProductListRelationFilter
    Ratings?: RatingListRelationFilter
  }

  export type ProductsOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    description?: SortOrder
    howToUse?: SortOrder
    quantity?: SortOrder
    productCategory?: SortOrder
    CartItem?: CartItemOrderByRelationAggregateInput
    SaveProduct?: SaveProductOrderByRelationAggregateInput
    Ratings?: RatingOrderByRelationAggregateInput
  }

  export type ProductsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductsWhereInput | ProductsWhereInput[]
    OR?: ProductsWhereInput[]
    NOT?: ProductsWhereInput | ProductsWhereInput[]
    image?: StringFilter<"Products"> | string
    title?: StringFilter<"Products"> | string
    amount?: IntFilter<"Products"> | number
    delivery?: StringFilter<"Products"> | string
    description?: StringFilter<"Products"> | string
    howToUse?: StringFilter<"Products"> | string
    quantity?: IntFilter<"Products"> | number
    productCategory?: EnumproductCategoryFilter<"Products"> | $Enums.productCategory
    CartItem?: CartItemListRelationFilter
    SaveProduct?: SaveProductListRelationFilter
    Ratings?: RatingListRelationFilter
  }, "id">

  export type ProductsOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    description?: SortOrder
    howToUse?: SortOrder
    quantity?: SortOrder
    productCategory?: SortOrder
    _count?: ProductsCountOrderByAggregateInput
    _avg?: ProductsAvgOrderByAggregateInput
    _max?: ProductsMaxOrderByAggregateInput
    _min?: ProductsMinOrderByAggregateInput
    _sum?: ProductsSumOrderByAggregateInput
  }

  export type ProductsScalarWhereWithAggregatesInput = {
    AND?: ProductsScalarWhereWithAggregatesInput | ProductsScalarWhereWithAggregatesInput[]
    OR?: ProductsScalarWhereWithAggregatesInput[]
    NOT?: ProductsScalarWhereWithAggregatesInput | ProductsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Products"> | string
    image?: StringWithAggregatesFilter<"Products"> | string
    title?: StringWithAggregatesFilter<"Products"> | string
    amount?: IntWithAggregatesFilter<"Products"> | number
    delivery?: StringWithAggregatesFilter<"Products"> | string
    description?: StringWithAggregatesFilter<"Products"> | string
    howToUse?: StringWithAggregatesFilter<"Products"> | string
    quantity?: IntWithAggregatesFilter<"Products"> | number
    productCategory?: EnumproductCategoryWithAggregatesFilter<"Products"> | $Enums.productCategory
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: StringFilter<"Rating"> | string
    value?: IntFilter<"Rating"> | number
    productId?: StringFilter<"Rating"> | string
    product?: XOR<ProductsRelationFilter, ProductsWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    productId?: SortOrder
    product?: ProductsOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    value?: IntFilter<"Rating"> | number
    productId?: StringFilter<"Rating"> | string
    product?: XOR<ProductsRelationFilter, ProductsWhereInput>
  }, "id">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    productId?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Rating"> | string
    value?: IntWithAggregatesFilter<"Rating"> | number
    productId?: StringWithAggregatesFilter<"Rating"> | string
  }

  export type CartItemWhereInput = {
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    id?: StringFilter<"CartItem"> | string
    image?: StringFilter<"CartItem"> | string
    title?: StringFilter<"CartItem"> | string
    amount?: IntFilter<"CartItem"> | number
    delivery?: StringFilter<"CartItem"> | string
    quantity?: IntFilter<"CartItem"> | number
    userId?: StringFilter<"CartItem"> | string
    productId?: StringFilter<"CartItem"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    product?: XOR<ProductsRelationFilter, ProductsWhereInput>
  }

  export type CartItemOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    user?: UsersOrderByWithRelationInput
    product?: ProductsOrderByWithRelationInput
  }

  export type CartItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    image?: StringFilter<"CartItem"> | string
    title?: StringFilter<"CartItem"> | string
    amount?: IntFilter<"CartItem"> | number
    delivery?: StringFilter<"CartItem"> | string
    quantity?: IntFilter<"CartItem"> | number
    userId?: StringFilter<"CartItem"> | string
    productId?: StringFilter<"CartItem"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    product?: XOR<ProductsRelationFilter, ProductsWhereInput>
  }, "id">

  export type CartItemOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    _count?: CartItemCountOrderByAggregateInput
    _avg?: CartItemAvgOrderByAggregateInput
    _max?: CartItemMaxOrderByAggregateInput
    _min?: CartItemMinOrderByAggregateInput
    _sum?: CartItemSumOrderByAggregateInput
  }

  export type CartItemScalarWhereWithAggregatesInput = {
    AND?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    OR?: CartItemScalarWhereWithAggregatesInput[]
    NOT?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CartItem"> | string
    image?: StringWithAggregatesFilter<"CartItem"> | string
    title?: StringWithAggregatesFilter<"CartItem"> | string
    amount?: IntWithAggregatesFilter<"CartItem"> | number
    delivery?: StringWithAggregatesFilter<"CartItem"> | string
    quantity?: IntWithAggregatesFilter<"CartItem"> | number
    userId?: StringWithAggregatesFilter<"CartItem"> | string
    productId?: StringWithAggregatesFilter<"CartItem"> | string
  }

  export type SaveProductWhereInput = {
    AND?: SaveProductWhereInput | SaveProductWhereInput[]
    OR?: SaveProductWhereInput[]
    NOT?: SaveProductWhereInput | SaveProductWhereInput[]
    id?: StringFilter<"SaveProduct"> | string
    image?: StringFilter<"SaveProduct"> | string
    title?: StringFilter<"SaveProduct"> | string
    amount?: IntFilter<"SaveProduct"> | number
    delivery?: StringFilter<"SaveProduct"> | string
    userId?: StringFilter<"SaveProduct"> | string
    productId?: StringFilter<"SaveProduct"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    product?: XOR<ProductsRelationFilter, ProductsWhereInput>
  }

  export type SaveProductOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    user?: UsersOrderByWithRelationInput
    product?: ProductsOrderByWithRelationInput
  }

  export type SaveProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SaveProductWhereInput | SaveProductWhereInput[]
    OR?: SaveProductWhereInput[]
    NOT?: SaveProductWhereInput | SaveProductWhereInput[]
    image?: StringFilter<"SaveProduct"> | string
    title?: StringFilter<"SaveProduct"> | string
    amount?: IntFilter<"SaveProduct"> | number
    delivery?: StringFilter<"SaveProduct"> | string
    userId?: StringFilter<"SaveProduct"> | string
    productId?: StringFilter<"SaveProduct"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    product?: XOR<ProductsRelationFilter, ProductsWhereInput>
  }, "id">

  export type SaveProductOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    _count?: SaveProductCountOrderByAggregateInput
    _avg?: SaveProductAvgOrderByAggregateInput
    _max?: SaveProductMaxOrderByAggregateInput
    _min?: SaveProductMinOrderByAggregateInput
    _sum?: SaveProductSumOrderByAggregateInput
  }

  export type SaveProductScalarWhereWithAggregatesInput = {
    AND?: SaveProductScalarWhereWithAggregatesInput | SaveProductScalarWhereWithAggregatesInput[]
    OR?: SaveProductScalarWhereWithAggregatesInput[]
    NOT?: SaveProductScalarWhereWithAggregatesInput | SaveProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SaveProduct"> | string
    image?: StringWithAggregatesFilter<"SaveProduct"> | string
    title?: StringWithAggregatesFilter<"SaveProduct"> | string
    amount?: IntWithAggregatesFilter<"SaveProduct"> | number
    delivery?: StringWithAggregatesFilter<"SaveProduct"> | string
    userId?: StringWithAggregatesFilter<"SaveProduct"> | string
    productId?: StringWithAggregatesFilter<"SaveProduct"> | string
  }

  export type DiagnosticTestWhereInput = {
    AND?: DiagnosticTestWhereInput | DiagnosticTestWhereInput[]
    OR?: DiagnosticTestWhereInput[]
    NOT?: DiagnosticTestWhereInput | DiagnosticTestWhereInput[]
    id?: StringFilter<"DiagnosticTest"> | string
    name?: StringFilter<"DiagnosticTest"> | string
    price?: IntFilter<"DiagnosticTest"> | number
    dateCreated?: DateTimeFilter<"DiagnosticTest"> | Date | string
    type?: StringFilter<"DiagnosticTest"> | string
    selectedTests?: SelectedTestListRelationFilter
  }

  export type DiagnosticTestOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    dateCreated?: SortOrder
    type?: SortOrder
    selectedTests?: SelectedTestOrderByRelationAggregateInput
  }

  export type DiagnosticTestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DiagnosticTestWhereInput | DiagnosticTestWhereInput[]
    OR?: DiagnosticTestWhereInput[]
    NOT?: DiagnosticTestWhereInput | DiagnosticTestWhereInput[]
    name?: StringFilter<"DiagnosticTest"> | string
    price?: IntFilter<"DiagnosticTest"> | number
    dateCreated?: DateTimeFilter<"DiagnosticTest"> | Date | string
    type?: StringFilter<"DiagnosticTest"> | string
    selectedTests?: SelectedTestListRelationFilter
  }, "id">

  export type DiagnosticTestOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    dateCreated?: SortOrder
    type?: SortOrder
    _count?: DiagnosticTestCountOrderByAggregateInput
    _avg?: DiagnosticTestAvgOrderByAggregateInput
    _max?: DiagnosticTestMaxOrderByAggregateInput
    _min?: DiagnosticTestMinOrderByAggregateInput
    _sum?: DiagnosticTestSumOrderByAggregateInput
  }

  export type DiagnosticTestScalarWhereWithAggregatesInput = {
    AND?: DiagnosticTestScalarWhereWithAggregatesInput | DiagnosticTestScalarWhereWithAggregatesInput[]
    OR?: DiagnosticTestScalarWhereWithAggregatesInput[]
    NOT?: DiagnosticTestScalarWhereWithAggregatesInput | DiagnosticTestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DiagnosticTest"> | string
    name?: StringWithAggregatesFilter<"DiagnosticTest"> | string
    price?: IntWithAggregatesFilter<"DiagnosticTest"> | number
    dateCreated?: DateTimeWithAggregatesFilter<"DiagnosticTest"> | Date | string
    type?: StringWithAggregatesFilter<"DiagnosticTest"> | string
  }

  export type SelectedTestWhereInput = {
    AND?: SelectedTestWhereInput | SelectedTestWhereInput[]
    OR?: SelectedTestWhereInput[]
    NOT?: SelectedTestWhereInput | SelectedTestWhereInput[]
    id?: StringFilter<"SelectedTest"> | string
    testName?: StringFilter<"SelectedTest"> | string
    price?: IntFilter<"SelectedTest"> | number
    quantity?: IntFilter<"SelectedTest"> | number
    userId?: StringFilter<"SelectedTest"> | string
    diagnosticTestId?: StringFilter<"SelectedTest"> | string
    diagnosticTest?: XOR<DiagnosticTestRelationFilter, DiagnosticTestWhereInput>
  }

  export type SelectedTestOrderByWithRelationInput = {
    id?: SortOrder
    testName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    diagnosticTestId?: SortOrder
    diagnosticTest?: DiagnosticTestOrderByWithRelationInput
  }

  export type SelectedTestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SelectedTestWhereInput | SelectedTestWhereInput[]
    OR?: SelectedTestWhereInput[]
    NOT?: SelectedTestWhereInput | SelectedTestWhereInput[]
    testName?: StringFilter<"SelectedTest"> | string
    price?: IntFilter<"SelectedTest"> | number
    quantity?: IntFilter<"SelectedTest"> | number
    userId?: StringFilter<"SelectedTest"> | string
    diagnosticTestId?: StringFilter<"SelectedTest"> | string
    diagnosticTest?: XOR<DiagnosticTestRelationFilter, DiagnosticTestWhereInput>
  }, "id">

  export type SelectedTestOrderByWithAggregationInput = {
    id?: SortOrder
    testName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    diagnosticTestId?: SortOrder
    _count?: SelectedTestCountOrderByAggregateInput
    _avg?: SelectedTestAvgOrderByAggregateInput
    _max?: SelectedTestMaxOrderByAggregateInput
    _min?: SelectedTestMinOrderByAggregateInput
    _sum?: SelectedTestSumOrderByAggregateInput
  }

  export type SelectedTestScalarWhereWithAggregatesInput = {
    AND?: SelectedTestScalarWhereWithAggregatesInput | SelectedTestScalarWhereWithAggregatesInput[]
    OR?: SelectedTestScalarWhereWithAggregatesInput[]
    NOT?: SelectedTestScalarWhereWithAggregatesInput | SelectedTestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SelectedTest"> | string
    testName?: StringWithAggregatesFilter<"SelectedTest"> | string
    price?: IntWithAggregatesFilter<"SelectedTest"> | number
    quantity?: IntWithAggregatesFilter<"SelectedTest"> | number
    userId?: StringWithAggregatesFilter<"SelectedTest"> | string
    diagnosticTestId?: StringWithAggregatesFilter<"SelectedTest"> | string
  }

  export type ChatSessionsWhereInput = {
    AND?: ChatSessionsWhereInput | ChatSessionsWhereInput[]
    OR?: ChatSessionsWhereInput[]
    NOT?: ChatSessionsWhereInput | ChatSessionsWhereInput[]
    session_id?: StringFilter<"ChatSessions"> | string
    user_id?: StringFilter<"ChatSessions"> | string
    doctor_id?: StringFilter<"ChatSessions"> | string
    created_at?: DateTimeFilter<"ChatSessions"> | Date | string
  }

  export type ChatSessionsOrderByWithRelationInput = {
    session_id?: SortOrder
    user_id?: SortOrder
    doctor_id?: SortOrder
    created_at?: SortOrder
  }

  export type ChatSessionsWhereUniqueInput = Prisma.AtLeast<{
    session_id?: string
    AND?: ChatSessionsWhereInput | ChatSessionsWhereInput[]
    OR?: ChatSessionsWhereInput[]
    NOT?: ChatSessionsWhereInput | ChatSessionsWhereInput[]
    user_id?: StringFilter<"ChatSessions"> | string
    doctor_id?: StringFilter<"ChatSessions"> | string
    created_at?: DateTimeFilter<"ChatSessions"> | Date | string
  }, "session_id">

  export type ChatSessionsOrderByWithAggregationInput = {
    session_id?: SortOrder
    user_id?: SortOrder
    doctor_id?: SortOrder
    created_at?: SortOrder
    _count?: ChatSessionsCountOrderByAggregateInput
    _max?: ChatSessionsMaxOrderByAggregateInput
    _min?: ChatSessionsMinOrderByAggregateInput
  }

  export type ChatSessionsScalarWhereWithAggregatesInput = {
    AND?: ChatSessionsScalarWhereWithAggregatesInput | ChatSessionsScalarWhereWithAggregatesInput[]
    OR?: ChatSessionsScalarWhereWithAggregatesInput[]
    NOT?: ChatSessionsScalarWhereWithAggregatesInput | ChatSessionsScalarWhereWithAggregatesInput[]
    session_id?: StringWithAggregatesFilter<"ChatSessions"> | string
    user_id?: StringWithAggregatesFilter<"ChatSessions"> | string
    doctor_id?: StringWithAggregatesFilter<"ChatSessions"> | string
    created_at?: DateTimeWithAggregatesFilter<"ChatSessions"> | Date | string
  }

  export type ChatMessagesWhereInput = {
    AND?: ChatMessagesWhereInput | ChatMessagesWhereInput[]
    OR?: ChatMessagesWhereInput[]
    NOT?: ChatMessagesWhereInput | ChatMessagesWhereInput[]
    message_id?: StringFilter<"ChatMessages"> | string
    session_id?: StringFilter<"ChatMessages"> | string
    sender_id?: StringFilter<"ChatMessages"> | string
    recipient_id?: StringFilter<"ChatMessages"> | string
    message?: StringFilter<"ChatMessages"> | string
    timestamp?: DateTimeFilter<"ChatMessages"> | Date | string
  }

  export type ChatMessagesOrderByWithRelationInput = {
    message_id?: SortOrder
    session_id?: SortOrder
    sender_id?: SortOrder
    recipient_id?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type ChatMessagesWhereUniqueInput = Prisma.AtLeast<{
    message_id?: string
    AND?: ChatMessagesWhereInput | ChatMessagesWhereInput[]
    OR?: ChatMessagesWhereInput[]
    NOT?: ChatMessagesWhereInput | ChatMessagesWhereInput[]
    session_id?: StringFilter<"ChatMessages"> | string
    sender_id?: StringFilter<"ChatMessages"> | string
    recipient_id?: StringFilter<"ChatMessages"> | string
    message?: StringFilter<"ChatMessages"> | string
    timestamp?: DateTimeFilter<"ChatMessages"> | Date | string
  }, "message_id">

  export type ChatMessagesOrderByWithAggregationInput = {
    message_id?: SortOrder
    session_id?: SortOrder
    sender_id?: SortOrder
    recipient_id?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
    _count?: ChatMessagesCountOrderByAggregateInput
    _max?: ChatMessagesMaxOrderByAggregateInput
    _min?: ChatMessagesMinOrderByAggregateInput
  }

  export type ChatMessagesScalarWhereWithAggregatesInput = {
    AND?: ChatMessagesScalarWhereWithAggregatesInput | ChatMessagesScalarWhereWithAggregatesInput[]
    OR?: ChatMessagesScalarWhereWithAggregatesInput[]
    NOT?: ChatMessagesScalarWhereWithAggregatesInput | ChatMessagesScalarWhereWithAggregatesInput[]
    message_id?: StringWithAggregatesFilter<"ChatMessages"> | string
    session_id?: StringWithAggregatesFilter<"ChatMessages"> | string
    sender_id?: StringWithAggregatesFilter<"ChatMessages"> | string
    recipient_id?: StringWithAggregatesFilter<"ChatMessages"> | string
    message?: StringWithAggregatesFilter<"ChatMessages"> | string
    timestamp?: DateTimeWithAggregatesFilter<"ChatMessages"> | Date | string
  }

  export type UsersCreateInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    Bvn?: BvnCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
  }

  export type UsersUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UsersUncheckedUpdateManyInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type AddressCreateInput = {
    id?: string
    street?: string | null
    city?: string | null
    state: string
    local_government: string
    user: UsersCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    street?: string | null
    city?: string | null
    state: string
    local_government: string
    usersId: string
  }

  export type AddressUpdateInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    local_government?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    local_government?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type AddressCreateManyInput = {
    id?: string
    street?: string | null
    city?: string | null
    state: string
    local_government: string
    usersId: string
  }

  export type AddressUpdateManyMutationInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    local_government?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateManyInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    local_government?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionPinCreateInput = {
    id?: string
    pin: string
    user?: UsersCreateNestedOneWithoutTransactionPinInput
  }

  export type TransactionPinUncheckedCreateInput = {
    id?: string
    pin: string
    usersId: string
  }

  export type TransactionPinUpdateInput = {
    pin?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneWithoutTransactionPinNestedInput
  }

  export type TransactionPinUncheckedUpdateInput = {
    pin?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionPinCreateManyInput = {
    id?: string
    pin: string
    usersId: string
  }

  export type TransactionPinUpdateManyMutationInput = {
    pin?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionPinUncheckedUpdateManyInput = {
    pin?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionHistoryCreateInput = {
    id?: string
    email: string
    paystack_ref: string
    payment_status: string
    time_paid?: Date | string
    date_paid?: Date | string
  }

  export type TransactionHistoryUncheckedCreateInput = {
    id?: string
    email: string
    paystack_ref: string
    payment_status: string
    time_paid?: Date | string
    date_paid?: Date | string
  }

  export type TransactionHistoryUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    paystack_ref?: StringFieldUpdateOperationsInput | string
    payment_status?: StringFieldUpdateOperationsInput | string
    time_paid?: DateTimeFieldUpdateOperationsInput | Date | string
    date_paid?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionHistoryUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    paystack_ref?: StringFieldUpdateOperationsInput | string
    payment_status?: StringFieldUpdateOperationsInput | string
    time_paid?: DateTimeFieldUpdateOperationsInput | Date | string
    date_paid?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionHistoryCreateManyInput = {
    id?: string
    email: string
    paystack_ref: string
    payment_status: string
    time_paid?: Date | string
    date_paid?: Date | string
  }

  export type TransactionHistoryUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    paystack_ref?: StringFieldUpdateOperationsInput | string
    payment_status?: StringFieldUpdateOperationsInput | string
    time_paid?: DateTimeFieldUpdateOperationsInput | Date | string
    date_paid?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionHistoryUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    paystack_ref?: StringFieldUpdateOperationsInput | string
    payment_status?: StringFieldUpdateOperationsInput | string
    time_paid?: DateTimeFieldUpdateOperationsInput | Date | string
    date_paid?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletCreateInput = {
    id?: string
    balance?: number
    user: UsersCreateNestedOneWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id?: string
    balance?: number
    usersId: string
  }

  export type WalletUpdateInput = {
    balance?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    balance?: IntFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type WalletCreateManyInput = {
    id?: string
    balance?: number
    usersId: string
  }

  export type WalletUpdateManyMutationInput = {
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type WalletUncheckedUpdateManyInput = {
    balance?: IntFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type BvnCreateInput = {
    id?: string
    bvn: number
    user: UsersCreateNestedOneWithoutBvnInput
  }

  export type BvnUncheckedCreateInput = {
    id?: string
    bvn: number
    usersId: string
  }

  export type BvnUpdateInput = {
    bvn?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutBvnNestedInput
  }

  export type BvnUncheckedUpdateInput = {
    bvn?: IntFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type BvnCreateManyInput = {
    id?: string
    bvn: number
    usersId: string
  }

  export type BvnUpdateManyMutationInput = {
    bvn?: IntFieldUpdateOperationsInput | number
  }

  export type BvnUncheckedUpdateManyInput = {
    bvn?: IntFieldUpdateOperationsInput | number
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type SetupProfileCreateInput = {
    id?: string
    username: string
    matricNumber: string
    user: UsersCreateNestedOneWithoutSetupProfileInput
  }

  export type SetupProfileUncheckedCreateInput = {
    id?: string
    username: string
    matricNumber: string
    usersId: string
  }

  export type SetupProfileUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    matricNumber?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutSetupProfileNestedInput
  }

  export type SetupProfileUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    matricNumber?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type SetupProfileCreateManyInput = {
    id?: string
    username: string
    matricNumber: string
    usersId: string
  }

  export type SetupProfileUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    matricNumber?: StringFieldUpdateOperationsInput | string
  }

  export type SetupProfileUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    matricNumber?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentCreateInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    rating?: number | null
    review?: string | null
    Doctors: DoctorsCreateNestedOneWithoutAppointmentInput
    user: UsersCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    usersId: string
    doctorsId: string
    rating?: number | null
    review?: string | null
  }

  export type AppointmentUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    Doctors?: DoctorsUpdateOneRequiredWithoutAppointmentNestedInput
    user?: UsersUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
    doctorsId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentCreateManyInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    usersId: string
    doctorsId: string
    rating?: number | null
    review?: string | null
  }

  export type AppointmentUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
    doctorsId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorsCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about?: string | null
    appointmentId?: string | null
    workingHours?: WorkingHoursCreateNestedManyWithoutDoctorInput
    Appointment?: AppointmentCreateNestedManyWithoutDoctorsInput
  }

  export type DoctorsUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about?: string | null
    appointmentId?: string | null
    workingHours?: WorkingHoursUncheckedCreateNestedManyWithoutDoctorInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutDoctorsInput
  }

  export type DoctorsUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHours?: WorkingHoursUpdateManyWithoutDoctorNestedInput
    Appointment?: AppointmentUpdateManyWithoutDoctorsNestedInput
  }

  export type DoctorsUncheckedUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHours?: WorkingHoursUncheckedUpdateManyWithoutDoctorNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutDoctorsNestedInput
  }

  export type DoctorsCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about?: string | null
    appointmentId?: string | null
  }

  export type DoctorsUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorsUncheckedUpdateManyInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkingHoursCreateInput = {
    id?: string
    day: string
    startTime: string
    endTime: string
    doctor: DoctorsCreateNestedOneWithoutWorkingHoursInput
  }

  export type WorkingHoursUncheckedCreateInput = {
    id?: string
    day: string
    startTime: string
    endTime: string
    doctorId: string
  }

  export type WorkingHoursUpdateInput = {
    day?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    doctor?: DoctorsUpdateOneRequiredWithoutWorkingHoursNestedInput
  }

  export type WorkingHoursUncheckedUpdateInput = {
    day?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingHoursCreateManyInput = {
    id?: string
    day: string
    startTime: string
    endTime: string
    doctorId: string
  }

  export type WorkingHoursUpdateManyMutationInput = {
    day?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingHoursUncheckedUpdateManyInput = {
    day?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductsCreateInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    SaveProduct?: SaveProductCreateNestedManyWithoutProductInput
    Ratings?: RatingCreateNestedManyWithoutProductInput
  }

  export type ProductsUncheckedCreateInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutProductInput
    Ratings?: RatingUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductsUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutProductNestedInput
    Ratings?: RatingUpdateManyWithoutProductNestedInput
  }

  export type ProductsUncheckedUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutProductNestedInput
    Ratings?: RatingUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductsCreateManyInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
  }

  export type ProductsUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
  }

  export type ProductsUncheckedUpdateManyInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
  }

  export type RatingCreateInput = {
    id?: string
    value: number
    product: ProductsCreateNestedOneWithoutRatingsInput
  }

  export type RatingUncheckedCreateInput = {
    id?: string
    value: number
    productId: string
  }

  export type RatingUpdateInput = {
    value?: IntFieldUpdateOperationsInput | number
    product?: ProductsUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    value?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingCreateManyInput = {
    id?: string
    value: number
    productId: string
  }

  export type RatingUpdateManyMutationInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateManyInput = {
    value?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type CartItemCreateInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    user: UsersCreateNestedOneWithoutCartInput
    product: ProductsCreateNestedOneWithoutCartItemInput
  }

  export type CartItemUncheckedCreateInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    userId: string
    productId: string
  }

  export type CartItemUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCartNestedInput
    product?: ProductsUpdateOneRequiredWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type CartItemCreateManyInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    userId: string
    productId: string
  }

  export type CartItemUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemUncheckedUpdateManyInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductCreateInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    user: UsersCreateNestedOneWithoutSaveProductInput
    product: ProductsCreateNestedOneWithoutSaveProductInput
  }

  export type SaveProductUncheckedCreateInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    userId: string
    productId: string
  }

  export type SaveProductUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutSaveProductNestedInput
    product?: ProductsUpdateOneRequiredWithoutSaveProductNestedInput
  }

  export type SaveProductUncheckedUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductCreateManyInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    userId: string
    productId: string
  }

  export type SaveProductUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductUncheckedUpdateManyInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type DiagnosticTestCreateInput = {
    id?: string
    name: string
    price: number
    dateCreated?: Date | string
    type: string
    selectedTests?: SelectedTestCreateNestedManyWithoutDiagnosticTestInput
  }

  export type DiagnosticTestUncheckedCreateInput = {
    id?: string
    name: string
    price: number
    dateCreated?: Date | string
    type: string
    selectedTests?: SelectedTestUncheckedCreateNestedManyWithoutDiagnosticTestInput
  }

  export type DiagnosticTestUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    selectedTests?: SelectedTestUpdateManyWithoutDiagnosticTestNestedInput
  }

  export type DiagnosticTestUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    selectedTests?: SelectedTestUncheckedUpdateManyWithoutDiagnosticTestNestedInput
  }

  export type DiagnosticTestCreateManyInput = {
    id?: string
    name: string
    price: number
    dateCreated?: Date | string
    type: string
  }

  export type DiagnosticTestUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type DiagnosticTestUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedTestCreateInput = {
    id?: string
    testName: string
    price: number
    quantity: number
    userId: string
    diagnosticTest: DiagnosticTestCreateNestedOneWithoutSelectedTestsInput
  }

  export type SelectedTestUncheckedCreateInput = {
    id?: string
    testName: string
    price: number
    quantity: number
    userId: string
    diagnosticTestId: string
  }

  export type SelectedTestUpdateInput = {
    testName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    diagnosticTest?: DiagnosticTestUpdateOneRequiredWithoutSelectedTestsNestedInput
  }

  export type SelectedTestUncheckedUpdateInput = {
    testName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    diagnosticTestId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedTestCreateManyInput = {
    id?: string
    testName: string
    price: number
    quantity: number
    userId: string
    diagnosticTestId: string
  }

  export type SelectedTestUpdateManyMutationInput = {
    testName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedTestUncheckedUpdateManyInput = {
    testName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    diagnosticTestId?: StringFieldUpdateOperationsInput | string
  }

  export type ChatSessionsCreateInput = {
    session_id?: string
    user_id: string
    doctor_id: string
    created_at?: Date | string
  }

  export type ChatSessionsUncheckedCreateInput = {
    session_id?: string
    user_id: string
    doctor_id: string
    created_at?: Date | string
  }

  export type ChatSessionsUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionsUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionsCreateManyInput = {
    session_id?: string
    user_id: string
    doctor_id: string
    created_at?: Date | string
  }

  export type ChatSessionsUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionsUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessagesCreateInput = {
    message_id?: string
    session_id: string
    sender_id: string
    recipient_id: string
    message: string
    timestamp?: Date | string
  }

  export type ChatMessagesUncheckedCreateInput = {
    message_id?: string
    session_id: string
    sender_id: string
    recipient_id: string
    message: string
    timestamp?: Date | string
  }

  export type ChatMessagesUpdateInput = {
    session_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    recipient_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessagesUncheckedUpdateInput = {
    session_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    recipient_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessagesCreateManyInput = {
    message_id?: string
    session_id: string
    sender_id: string
    recipient_id: string
    message: string
    timestamp?: Date | string
  }

  export type ChatMessagesUpdateManyMutationInput = {
    session_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    recipient_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessagesUncheckedUpdateManyInput = {
    session_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    recipient_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
    isSet?: boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WalletNullableRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type BvnListRelationFilter = {
    every?: BvnWhereInput
    some?: BvnWhereInput
    none?: BvnWhereInput
  }

  export type SetupProfileNullableRelationFilter = {
    is?: SetupProfileWhereInput | null
    isNot?: SetupProfileWhereInput | null
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type CartItemListRelationFilter = {
    every?: CartItemWhereInput
    some?: CartItemWhereInput
    none?: CartItemWhereInput
  }

  export type TransactionPinNullableRelationFilter = {
    is?: TransactionPinWhereInput | null
    isNot?: TransactionPinWhereInput | null
  }

  export type SaveProductListRelationFilter = {
    every?: SaveProductWhereInput
    some?: SaveProductWhereInput
    none?: SaveProductWhereInput
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type BvnOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SaveProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    country?: SortOrder
    phoneNumber?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isSuspended?: SortOrder
    isDeleted?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    otp?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    country?: SortOrder
    phoneNumber?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isSuspended?: SortOrder
    isDeleted?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    country?: SortOrder
    phoneNumber?: SortOrder
    schoolName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    verified?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isSuspended?: SortOrder
    isDeleted?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    otp?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    local_government?: SortOrder
    usersId?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    local_government?: SortOrder
    usersId?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    local_government?: SortOrder
    usersId?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type TransactionPinCountOrderByAggregateInput = {
    id?: SortOrder
    pin?: SortOrder
    usersId?: SortOrder
  }

  export type TransactionPinMaxOrderByAggregateInput = {
    id?: SortOrder
    pin?: SortOrder
    usersId?: SortOrder
  }

  export type TransactionPinMinOrderByAggregateInput = {
    id?: SortOrder
    pin?: SortOrder
    usersId?: SortOrder
  }

  export type TransactionHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    paystack_ref?: SortOrder
    payment_status?: SortOrder
    time_paid?: SortOrder
    date_paid?: SortOrder
  }

  export type TransactionHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    paystack_ref?: SortOrder
    payment_status?: SortOrder
    time_paid?: SortOrder
    date_paid?: SortOrder
  }

  export type TransactionHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    paystack_ref?: SortOrder
    payment_status?: SortOrder
    time_paid?: SortOrder
    date_paid?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    usersId?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    usersId?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    usersId?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    balance?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BvnCountOrderByAggregateInput = {
    id?: SortOrder
    bvn?: SortOrder
    usersId?: SortOrder
  }

  export type BvnAvgOrderByAggregateInput = {
    bvn?: SortOrder
  }

  export type BvnMaxOrderByAggregateInput = {
    id?: SortOrder
    bvn?: SortOrder
    usersId?: SortOrder
  }

  export type BvnMinOrderByAggregateInput = {
    id?: SortOrder
    bvn?: SortOrder
    usersId?: SortOrder
  }

  export type BvnSumOrderByAggregateInput = {
    bvn?: SortOrder
  }

  export type SetupProfileCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    matricNumber?: SortOrder
    usersId?: SortOrder
  }

  export type SetupProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    matricNumber?: SortOrder
    usersId?: SortOrder
  }

  export type SetupProfileMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    matricNumber?: SortOrder
    usersId?: SortOrder
  }

  export type EnumPeriodFilter<$PrismaModel = never> = {
    equals?: $Enums.Period | EnumPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodFilter<$PrismaModel> | $Enums.Period
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type DoctorsRelationFilter = {
    is?: DoctorsWhereInput
    isNot?: DoctorsWhereInput
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    hasEnded?: SortOrder
    period?: SortOrder
    status?: SortOrder
    appointmentType?: SortOrder
    usersId?: SortOrder
    doctorsId?: SortOrder
    rating?: SortOrder
    review?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    hasEnded?: SortOrder
    period?: SortOrder
    status?: SortOrder
    appointmentType?: SortOrder
    usersId?: SortOrder
    doctorsId?: SortOrder
    rating?: SortOrder
    review?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    hasEnded?: SortOrder
    period?: SortOrder
    status?: SortOrder
    appointmentType?: SortOrder
    usersId?: SortOrder
    doctorsId?: SortOrder
    rating?: SortOrder
    review?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumPeriodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Period | EnumPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodWithAggregatesFilter<$PrismaModel> | $Enums.Period
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPeriodFilter<$PrismaModel>
    _max?: NestedEnumPeriodFilter<$PrismaModel>
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type WorkingHoursListRelationFilter = {
    every?: WorkingHoursWhereInput
    some?: WorkingHoursWhereInput
    none?: WorkingHoursWhereInput
  }

  export type WorkingHoursOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorsCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    specialization?: SortOrder
    country?: SortOrder
    state?: SortOrder
    certificate?: SortOrder
    isApproved?: SortOrder
    soundEnabled?: SortOrder
    inviteFriendsEnabled?: SortOrder
    vibrationEnabled?: SortOrder
    profilePicture?: SortOrder
    yearsOfExperience?: SortOrder
    graduationYear?: SortOrder
    school?: SortOrder
    medicalLicensePicture?: SortOrder
    about?: SortOrder
    appointmentId?: SortOrder
  }

  export type DoctorsAvgOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
    graduationYear?: SortOrder
  }

  export type DoctorsMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    specialization?: SortOrder
    country?: SortOrder
    state?: SortOrder
    certificate?: SortOrder
    isApproved?: SortOrder
    soundEnabled?: SortOrder
    inviteFriendsEnabled?: SortOrder
    vibrationEnabled?: SortOrder
    profilePicture?: SortOrder
    yearsOfExperience?: SortOrder
    graduationYear?: SortOrder
    school?: SortOrder
    medicalLicensePicture?: SortOrder
    about?: SortOrder
    appointmentId?: SortOrder
  }

  export type DoctorsMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    specialization?: SortOrder
    country?: SortOrder
    state?: SortOrder
    certificate?: SortOrder
    isApproved?: SortOrder
    soundEnabled?: SortOrder
    inviteFriendsEnabled?: SortOrder
    vibrationEnabled?: SortOrder
    profilePicture?: SortOrder
    yearsOfExperience?: SortOrder
    graduationYear?: SortOrder
    school?: SortOrder
    medicalLicensePicture?: SortOrder
    about?: SortOrder
    appointmentId?: SortOrder
  }

  export type DoctorsSumOrderByAggregateInput = {
    yearsOfExperience?: SortOrder
    graduationYear?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type WorkingHoursCountOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    doctorId?: SortOrder
  }

  export type WorkingHoursMaxOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    doctorId?: SortOrder
  }

  export type WorkingHoursMinOrderByAggregateInput = {
    id?: SortOrder
    day?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    doctorId?: SortOrder
  }

  export type EnumproductCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.productCategory | EnumproductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumproductCategoryFilter<$PrismaModel> | $Enums.productCategory
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductsCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    description?: SortOrder
    howToUse?: SortOrder
    quantity?: SortOrder
    productCategory?: SortOrder
  }

  export type ProductsAvgOrderByAggregateInput = {
    amount?: SortOrder
    quantity?: SortOrder
  }

  export type ProductsMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    description?: SortOrder
    howToUse?: SortOrder
    quantity?: SortOrder
    productCategory?: SortOrder
  }

  export type ProductsMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    description?: SortOrder
    howToUse?: SortOrder
    quantity?: SortOrder
    productCategory?: SortOrder
  }

  export type ProductsSumOrderByAggregateInput = {
    amount?: SortOrder
    quantity?: SortOrder
  }

  export type EnumproductCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.productCategory | EnumproductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumproductCategoryWithAggregatesFilter<$PrismaModel> | $Enums.productCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumproductCategoryFilter<$PrismaModel>
    _max?: NestedEnumproductCategoryFilter<$PrismaModel>
  }

  export type ProductsRelationFilter = {
    is?: ProductsWhereInput
    isNot?: ProductsWhereInput
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    productId?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    productId?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    productId?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type CartItemCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type CartItemAvgOrderByAggregateInput = {
    amount?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type CartItemMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type CartItemSumOrderByAggregateInput = {
    amount?: SortOrder
    quantity?: SortOrder
  }

  export type SaveProductCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type SaveProductAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type SaveProductMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type SaveProductMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    delivery?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type SaveProductSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type SelectedTestListRelationFilter = {
    every?: SelectedTestWhereInput
    some?: SelectedTestWhereInput
    none?: SelectedTestWhereInput
  }

  export type SelectedTestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiagnosticTestCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    dateCreated?: SortOrder
    type?: SortOrder
  }

  export type DiagnosticTestAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type DiagnosticTestMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    dateCreated?: SortOrder
    type?: SortOrder
  }

  export type DiagnosticTestMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    dateCreated?: SortOrder
    type?: SortOrder
  }

  export type DiagnosticTestSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type DiagnosticTestRelationFilter = {
    is?: DiagnosticTestWhereInput
    isNot?: DiagnosticTestWhereInput
  }

  export type SelectedTestCountOrderByAggregateInput = {
    id?: SortOrder
    testName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    diagnosticTestId?: SortOrder
  }

  export type SelectedTestAvgOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type SelectedTestMaxOrderByAggregateInput = {
    id?: SortOrder
    testName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    diagnosticTestId?: SortOrder
  }

  export type SelectedTestMinOrderByAggregateInput = {
    id?: SortOrder
    testName?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    userId?: SortOrder
    diagnosticTestId?: SortOrder
  }

  export type SelectedTestSumOrderByAggregateInput = {
    price?: SortOrder
    quantity?: SortOrder
  }

  export type ChatSessionsCountOrderByAggregateInput = {
    session_id?: SortOrder
    user_id?: SortOrder
    doctor_id?: SortOrder
    created_at?: SortOrder
  }

  export type ChatSessionsMaxOrderByAggregateInput = {
    session_id?: SortOrder
    user_id?: SortOrder
    doctor_id?: SortOrder
    created_at?: SortOrder
  }

  export type ChatSessionsMinOrderByAggregateInput = {
    session_id?: SortOrder
    user_id?: SortOrder
    doctor_id?: SortOrder
    created_at?: SortOrder
  }

  export type ChatMessagesCountOrderByAggregateInput = {
    message_id?: SortOrder
    session_id?: SortOrder
    sender_id?: SortOrder
    recipient_id?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type ChatMessagesMaxOrderByAggregateInput = {
    message_id?: SortOrder
    session_id?: SortOrder
    sender_id?: SortOrder
    recipient_id?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type ChatMessagesMinOrderByAggregateInput = {
    message_id?: SortOrder
    session_id?: SortOrder
    sender_id?: SortOrder
    recipient_id?: SortOrder
    message?: SortOrder
    timestamp?: SortOrder
  }

  export type WalletCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type BvnCreateNestedManyWithoutUserInput = {
    create?: XOR<BvnCreateWithoutUserInput, BvnUncheckedCreateWithoutUserInput> | BvnCreateWithoutUserInput[] | BvnUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BvnCreateOrConnectWithoutUserInput | BvnCreateOrConnectWithoutUserInput[]
    createMany?: BvnCreateManyUserInputEnvelope
    connect?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
  }

  export type SetupProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<SetupProfileCreateWithoutUserInput, SetupProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: SetupProfileCreateOrConnectWithoutUserInput
    connect?: SetupProfileWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutUserInput = {
    create?: XOR<CartItemCreateWithoutUserInput, CartItemUncheckedCreateWithoutUserInput> | CartItemCreateWithoutUserInput[] | CartItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUserInput | CartItemCreateOrConnectWithoutUserInput[]
    createMany?: CartItemCreateManyUserInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type TransactionPinCreateNestedOneWithoutUserInput = {
    create?: XOR<TransactionPinCreateWithoutUserInput, TransactionPinUncheckedCreateWithoutUserInput>
    connectOrCreate?: TransactionPinCreateOrConnectWithoutUserInput
    connect?: TransactionPinWhereUniqueInput
  }

  export type SaveProductCreateNestedManyWithoutUserInput = {
    create?: XOR<SaveProductCreateWithoutUserInput, SaveProductUncheckedCreateWithoutUserInput> | SaveProductCreateWithoutUserInput[] | SaveProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutUserInput | SaveProductCreateOrConnectWithoutUserInput[]
    createMany?: SaveProductCreateManyUserInputEnvelope
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
  }

  export type AddressCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type WalletUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type BvnUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BvnCreateWithoutUserInput, BvnUncheckedCreateWithoutUserInput> | BvnCreateWithoutUserInput[] | BvnUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BvnCreateOrConnectWithoutUserInput | BvnCreateOrConnectWithoutUserInput[]
    createMany?: BvnCreateManyUserInputEnvelope
    connect?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
  }

  export type SetupProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SetupProfileCreateWithoutUserInput, SetupProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: SetupProfileCreateOrConnectWithoutUserInput
    connect?: SetupProfileWhereUniqueInput
  }

  export type AppointmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CartItemCreateWithoutUserInput, CartItemUncheckedCreateWithoutUserInput> | CartItemCreateWithoutUserInput[] | CartItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUserInput | CartItemCreateOrConnectWithoutUserInput[]
    createMany?: CartItemCreateManyUserInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type TransactionPinUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TransactionPinCreateWithoutUserInput, TransactionPinUncheckedCreateWithoutUserInput>
    connectOrCreate?: TransactionPinCreateOrConnectWithoutUserInput
    connect?: TransactionPinWhereUniqueInput
  }

  export type SaveProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SaveProductCreateWithoutUserInput, SaveProductUncheckedCreateWithoutUserInput> | SaveProductCreateWithoutUserInput[] | SaveProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutUserInput | SaveProductCreateOrConnectWithoutUserInput[]
    createMany?: SaveProductCreateManyUserInputEnvelope
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
  }

  export type AddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
    unset?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type WalletUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type BvnUpdateManyWithoutUserNestedInput = {
    create?: XOR<BvnCreateWithoutUserInput, BvnUncheckedCreateWithoutUserInput> | BvnCreateWithoutUserInput[] | BvnUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BvnCreateOrConnectWithoutUserInput | BvnCreateOrConnectWithoutUserInput[]
    upsert?: BvnUpsertWithWhereUniqueWithoutUserInput | BvnUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BvnCreateManyUserInputEnvelope
    set?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    disconnect?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    delete?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    connect?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    update?: BvnUpdateWithWhereUniqueWithoutUserInput | BvnUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BvnUpdateManyWithWhereWithoutUserInput | BvnUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BvnScalarWhereInput | BvnScalarWhereInput[]
  }

  export type SetupProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<SetupProfileCreateWithoutUserInput, SetupProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: SetupProfileCreateOrConnectWithoutUserInput
    upsert?: SetupProfileUpsertWithoutUserInput
    disconnect?: SetupProfileWhereInput | boolean
    delete?: SetupProfileWhereInput | boolean
    connect?: SetupProfileWhereUniqueInput
    update?: XOR<XOR<SetupProfileUpdateToOneWithWhereWithoutUserInput, SetupProfileUpdateWithoutUserInput>, SetupProfileUncheckedUpdateWithoutUserInput>
  }

  export type AppointmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutUserInput | AppointmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutUserInput | AppointmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutUserInput | AppointmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<CartItemCreateWithoutUserInput, CartItemUncheckedCreateWithoutUserInput> | CartItemCreateWithoutUserInput[] | CartItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUserInput | CartItemCreateOrConnectWithoutUserInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutUserInput | CartItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CartItemCreateManyUserInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutUserInput | CartItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutUserInput | CartItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type TransactionPinUpdateOneWithoutUserNestedInput = {
    create?: XOR<TransactionPinCreateWithoutUserInput, TransactionPinUncheckedCreateWithoutUserInput>
    connectOrCreate?: TransactionPinCreateOrConnectWithoutUserInput
    upsert?: TransactionPinUpsertWithoutUserInput
    disconnect?: TransactionPinWhereInput | boolean
    delete?: TransactionPinWhereInput | boolean
    connect?: TransactionPinWhereUniqueInput
    update?: XOR<XOR<TransactionPinUpdateToOneWithWhereWithoutUserInput, TransactionPinUpdateWithoutUserInput>, TransactionPinUncheckedUpdateWithoutUserInput>
  }

  export type SaveProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<SaveProductCreateWithoutUserInput, SaveProductUncheckedCreateWithoutUserInput> | SaveProductCreateWithoutUserInput[] | SaveProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutUserInput | SaveProductCreateOrConnectWithoutUserInput[]
    upsert?: SaveProductUpsertWithWhereUniqueWithoutUserInput | SaveProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SaveProductCreateManyUserInputEnvelope
    set?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    disconnect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    delete?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    update?: SaveProductUpdateWithWhereUniqueWithoutUserInput | SaveProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SaveProductUpdateManyWithWhereWithoutUserInput | SaveProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SaveProductScalarWhereInput | SaveProductScalarWhereInput[]
  }

  export type AddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type WalletUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type BvnUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BvnCreateWithoutUserInput, BvnUncheckedCreateWithoutUserInput> | BvnCreateWithoutUserInput[] | BvnUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BvnCreateOrConnectWithoutUserInput | BvnCreateOrConnectWithoutUserInput[]
    upsert?: BvnUpsertWithWhereUniqueWithoutUserInput | BvnUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BvnCreateManyUserInputEnvelope
    set?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    disconnect?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    delete?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    connect?: BvnWhereUniqueInput | BvnWhereUniqueInput[]
    update?: BvnUpdateWithWhereUniqueWithoutUserInput | BvnUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BvnUpdateManyWithWhereWithoutUserInput | BvnUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BvnScalarWhereInput | BvnScalarWhereInput[]
  }

  export type SetupProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SetupProfileCreateWithoutUserInput, SetupProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: SetupProfileCreateOrConnectWithoutUserInput
    upsert?: SetupProfileUpsertWithoutUserInput
    disconnect?: SetupProfileWhereInput | boolean
    delete?: SetupProfileWhereInput | boolean
    connect?: SetupProfileWhereUniqueInput
    update?: XOR<XOR<SetupProfileUpdateToOneWithWhereWithoutUserInput, SetupProfileUpdateWithoutUserInput>, SetupProfileUncheckedUpdateWithoutUserInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput> | AppointmentCreateWithoutUserInput[] | AppointmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutUserInput | AppointmentCreateOrConnectWithoutUserInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutUserInput | AppointmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AppointmentCreateManyUserInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutUserInput | AppointmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutUserInput | AppointmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CartItemCreateWithoutUserInput, CartItemUncheckedCreateWithoutUserInput> | CartItemCreateWithoutUserInput[] | CartItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutUserInput | CartItemCreateOrConnectWithoutUserInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutUserInput | CartItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CartItemCreateManyUserInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutUserInput | CartItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutUserInput | CartItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type TransactionPinUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TransactionPinCreateWithoutUserInput, TransactionPinUncheckedCreateWithoutUserInput>
    connectOrCreate?: TransactionPinCreateOrConnectWithoutUserInput
    upsert?: TransactionPinUpsertWithoutUserInput
    disconnect?: TransactionPinWhereInput | boolean
    delete?: TransactionPinWhereInput | boolean
    connect?: TransactionPinWhereUniqueInput
    update?: XOR<XOR<TransactionPinUpdateToOneWithWhereWithoutUserInput, TransactionPinUpdateWithoutUserInput>, TransactionPinUncheckedUpdateWithoutUserInput>
  }

  export type SaveProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SaveProductCreateWithoutUserInput, SaveProductUncheckedCreateWithoutUserInput> | SaveProductCreateWithoutUserInput[] | SaveProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutUserInput | SaveProductCreateOrConnectWithoutUserInput[]
    upsert?: SaveProductUpsertWithWhereUniqueWithoutUserInput | SaveProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SaveProductCreateManyUserInputEnvelope
    set?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    disconnect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    delete?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    update?: SaveProductUpdateWithWhereUniqueWithoutUserInput | SaveProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SaveProductUpdateManyWithWhereWithoutUserInput | SaveProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SaveProductScalarWhereInput | SaveProductScalarWhereInput[]
  }

  export type AddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AddressCreateManyUserInputEnvelope
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutAddressInput = {
    create?: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAddressInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAddressInput
    upsert?: UsersUpsertWithoutAddressInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAddressInput, UsersUpdateWithoutAddressInput>, UsersUncheckedUpdateWithoutAddressInput>
  }

  export type UsersCreateNestedOneWithoutTransactionPinInput = {
    create?: XOR<UsersCreateWithoutTransactionPinInput, UsersUncheckedCreateWithoutTransactionPinInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTransactionPinInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneWithoutTransactionPinNestedInput = {
    create?: XOR<UsersCreateWithoutTransactionPinInput, UsersUncheckedCreateWithoutTransactionPinInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTransactionPinInput
    upsert?: UsersUpsertWithoutTransactionPinInput
    disconnect?: boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutTransactionPinInput, UsersUpdateWithoutTransactionPinInput>, UsersUncheckedUpdateWithoutTransactionPinInput>
  }

  export type UsersCreateNestedOneWithoutWalletInput = {
    create?: XOR<UsersCreateWithoutWalletInput, UsersUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UsersCreateOrConnectWithoutWalletInput
    connect?: UsersWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUpdateOneRequiredWithoutWalletNestedInput = {
    create?: XOR<UsersCreateWithoutWalletInput, UsersUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UsersCreateOrConnectWithoutWalletInput
    upsert?: UsersUpsertWithoutWalletInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutWalletInput, UsersUpdateWithoutWalletInput>, UsersUncheckedUpdateWithoutWalletInput>
  }

  export type UsersCreateNestedOneWithoutBvnInput = {
    create?: XOR<UsersCreateWithoutBvnInput, UsersUncheckedCreateWithoutBvnInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBvnInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutBvnNestedInput = {
    create?: XOR<UsersCreateWithoutBvnInput, UsersUncheckedCreateWithoutBvnInput>
    connectOrCreate?: UsersCreateOrConnectWithoutBvnInput
    upsert?: UsersUpsertWithoutBvnInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutBvnInput, UsersUpdateWithoutBvnInput>, UsersUncheckedUpdateWithoutBvnInput>
  }

  export type UsersCreateNestedOneWithoutSetupProfileInput = {
    create?: XOR<UsersCreateWithoutSetupProfileInput, UsersUncheckedCreateWithoutSetupProfileInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSetupProfileInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSetupProfileNestedInput = {
    create?: XOR<UsersCreateWithoutSetupProfileInput, UsersUncheckedCreateWithoutSetupProfileInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSetupProfileInput
    upsert?: UsersUpsertWithoutSetupProfileInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSetupProfileInput, UsersUpdateWithoutSetupProfileInput>, UsersUncheckedUpdateWithoutSetupProfileInput>
  }

  export type DoctorsCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<DoctorsCreateWithoutAppointmentInput, DoctorsUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: DoctorsCreateOrConnectWithoutAppointmentInput
    connect?: DoctorsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<UsersCreateWithoutAppointmentInput, UsersUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAppointmentInput
    connect?: UsersWhereUniqueInput
  }

  export type EnumPeriodFieldUpdateOperationsInput = {
    set?: $Enums.Period
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type DoctorsUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<DoctorsCreateWithoutAppointmentInput, DoctorsUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: DoctorsCreateOrConnectWithoutAppointmentInput
    upsert?: DoctorsUpsertWithoutAppointmentInput
    connect?: DoctorsWhereUniqueInput
    update?: XOR<XOR<DoctorsUpdateToOneWithWhereWithoutAppointmentInput, DoctorsUpdateWithoutAppointmentInput>, DoctorsUncheckedUpdateWithoutAppointmentInput>
  }

  export type UsersUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<UsersCreateWithoutAppointmentInput, UsersUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAppointmentInput
    upsert?: UsersUpsertWithoutAppointmentInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAppointmentInput, UsersUpdateWithoutAppointmentInput>, UsersUncheckedUpdateWithoutAppointmentInput>
  }

  export type WorkingHoursCreateNestedManyWithoutDoctorInput = {
    create?: XOR<WorkingHoursCreateWithoutDoctorInput, WorkingHoursUncheckedCreateWithoutDoctorInput> | WorkingHoursCreateWithoutDoctorInput[] | WorkingHoursUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WorkingHoursCreateOrConnectWithoutDoctorInput | WorkingHoursCreateOrConnectWithoutDoctorInput[]
    createMany?: WorkingHoursCreateManyDoctorInputEnvelope
    connect?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput> | AppointmentCreateWithoutDoctorsInput[] | AppointmentUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorsInput | AppointmentCreateOrConnectWithoutDoctorsInput[]
    createMany?: AppointmentCreateManyDoctorsInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type WorkingHoursUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<WorkingHoursCreateWithoutDoctorInput, WorkingHoursUncheckedCreateWithoutDoctorInput> | WorkingHoursCreateWithoutDoctorInput[] | WorkingHoursUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WorkingHoursCreateOrConnectWithoutDoctorInput | WorkingHoursCreateOrConnectWithoutDoctorInput[]
    createMany?: WorkingHoursCreateManyDoctorInputEnvelope
    connect?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput> | AppointmentCreateWithoutDoctorsInput[] | AppointmentUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorsInput | AppointmentCreateOrConnectWithoutDoctorsInput[]
    createMany?: AppointmentCreateManyDoctorsInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type WorkingHoursUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<WorkingHoursCreateWithoutDoctorInput, WorkingHoursUncheckedCreateWithoutDoctorInput> | WorkingHoursCreateWithoutDoctorInput[] | WorkingHoursUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WorkingHoursCreateOrConnectWithoutDoctorInput | WorkingHoursCreateOrConnectWithoutDoctorInput[]
    upsert?: WorkingHoursUpsertWithWhereUniqueWithoutDoctorInput | WorkingHoursUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: WorkingHoursCreateManyDoctorInputEnvelope
    set?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    disconnect?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    delete?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    connect?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    update?: WorkingHoursUpdateWithWhereUniqueWithoutDoctorInput | WorkingHoursUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: WorkingHoursUpdateManyWithWhereWithoutDoctorInput | WorkingHoursUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: WorkingHoursScalarWhereInput | WorkingHoursScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput> | AppointmentCreateWithoutDoctorsInput[] | AppointmentUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorsInput | AppointmentCreateOrConnectWithoutDoctorsInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutDoctorsInput | AppointmentUpsertWithWhereUniqueWithoutDoctorsInput[]
    createMany?: AppointmentCreateManyDoctorsInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutDoctorsInput | AppointmentUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutDoctorsInput | AppointmentUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type WorkingHoursUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<WorkingHoursCreateWithoutDoctorInput, WorkingHoursUncheckedCreateWithoutDoctorInput> | WorkingHoursCreateWithoutDoctorInput[] | WorkingHoursUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WorkingHoursCreateOrConnectWithoutDoctorInput | WorkingHoursCreateOrConnectWithoutDoctorInput[]
    upsert?: WorkingHoursUpsertWithWhereUniqueWithoutDoctorInput | WorkingHoursUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: WorkingHoursCreateManyDoctorInputEnvelope
    set?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    disconnect?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    delete?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    connect?: WorkingHoursWhereUniqueInput | WorkingHoursWhereUniqueInput[]
    update?: WorkingHoursUpdateWithWhereUniqueWithoutDoctorInput | WorkingHoursUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: WorkingHoursUpdateManyWithWhereWithoutDoctorInput | WorkingHoursUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: WorkingHoursScalarWhereInput | WorkingHoursScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput> | AppointmentCreateWithoutDoctorsInput[] | AppointmentUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorsInput | AppointmentCreateOrConnectWithoutDoctorsInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutDoctorsInput | AppointmentUpsertWithWhereUniqueWithoutDoctorsInput[]
    createMany?: AppointmentCreateManyDoctorsInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutDoctorsInput | AppointmentUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutDoctorsInput | AppointmentUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type DoctorsCreateNestedOneWithoutWorkingHoursInput = {
    create?: XOR<DoctorsCreateWithoutWorkingHoursInput, DoctorsUncheckedCreateWithoutWorkingHoursInput>
    connectOrCreate?: DoctorsCreateOrConnectWithoutWorkingHoursInput
    connect?: DoctorsWhereUniqueInput
  }

  export type DoctorsUpdateOneRequiredWithoutWorkingHoursNestedInput = {
    create?: XOR<DoctorsCreateWithoutWorkingHoursInput, DoctorsUncheckedCreateWithoutWorkingHoursInput>
    connectOrCreate?: DoctorsCreateOrConnectWithoutWorkingHoursInput
    upsert?: DoctorsUpsertWithoutWorkingHoursInput
    connect?: DoctorsWhereUniqueInput
    update?: XOR<XOR<DoctorsUpdateToOneWithWhereWithoutWorkingHoursInput, DoctorsUpdateWithoutWorkingHoursInput>, DoctorsUncheckedUpdateWithoutWorkingHoursInput>
  }

  export type CartItemCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type SaveProductCreateNestedManyWithoutProductInput = {
    create?: XOR<SaveProductCreateWithoutProductInput, SaveProductUncheckedCreateWithoutProductInput> | SaveProductCreateWithoutProductInput[] | SaveProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutProductInput | SaveProductCreateOrConnectWithoutProductInput[]
    createMany?: SaveProductCreateManyProductInputEnvelope
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutProductInput = {
    create?: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput> | RatingCreateWithoutProductInput[] | RatingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutProductInput | RatingCreateOrConnectWithoutProductInput[]
    createMany?: RatingCreateManyProductInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type SaveProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SaveProductCreateWithoutProductInput, SaveProductUncheckedCreateWithoutProductInput> | SaveProductCreateWithoutProductInput[] | SaveProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutProductInput | SaveProductCreateOrConnectWithoutProductInput[]
    createMany?: SaveProductCreateManyProductInputEnvelope
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput> | RatingCreateWithoutProductInput[] | RatingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutProductInput | RatingCreateOrConnectWithoutProductInput[]
    createMany?: RatingCreateManyProductInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type EnumproductCategoryFieldUpdateOperationsInput = {
    set?: $Enums.productCategory
  }

  export type CartItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type SaveProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<SaveProductCreateWithoutProductInput, SaveProductUncheckedCreateWithoutProductInput> | SaveProductCreateWithoutProductInput[] | SaveProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutProductInput | SaveProductCreateOrConnectWithoutProductInput[]
    upsert?: SaveProductUpsertWithWhereUniqueWithoutProductInput | SaveProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SaveProductCreateManyProductInputEnvelope
    set?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    disconnect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    delete?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    update?: SaveProductUpdateWithWhereUniqueWithoutProductInput | SaveProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SaveProductUpdateManyWithWhereWithoutProductInput | SaveProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SaveProductScalarWhereInput | SaveProductScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutProductNestedInput = {
    create?: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput> | RatingCreateWithoutProductInput[] | RatingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutProductInput | RatingCreateOrConnectWithoutProductInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutProductInput | RatingUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: RatingCreateManyProductInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutProductInput | RatingUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutProductInput | RatingUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type SaveProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SaveProductCreateWithoutProductInput, SaveProductUncheckedCreateWithoutProductInput> | SaveProductCreateWithoutProductInput[] | SaveProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SaveProductCreateOrConnectWithoutProductInput | SaveProductCreateOrConnectWithoutProductInput[]
    upsert?: SaveProductUpsertWithWhereUniqueWithoutProductInput | SaveProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SaveProductCreateManyProductInputEnvelope
    set?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    disconnect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    delete?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    connect?: SaveProductWhereUniqueInput | SaveProductWhereUniqueInput[]
    update?: SaveProductUpdateWithWhereUniqueWithoutProductInput | SaveProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SaveProductUpdateManyWithWhereWithoutProductInput | SaveProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SaveProductScalarWhereInput | SaveProductScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput> | RatingCreateWithoutProductInput[] | RatingUncheckedCreateWithoutProductInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutProductInput | RatingCreateOrConnectWithoutProductInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutProductInput | RatingUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: RatingCreateManyProductInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutProductInput | RatingUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutProductInput | RatingUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ProductsCreateNestedOneWithoutRatingsInput = {
    create?: XOR<ProductsCreateWithoutRatingsInput, ProductsUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutRatingsInput
    connect?: ProductsWhereUniqueInput
  }

  export type ProductsUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<ProductsCreateWithoutRatingsInput, ProductsUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutRatingsInput
    upsert?: ProductsUpsertWithoutRatingsInput
    connect?: ProductsWhereUniqueInput
    update?: XOR<XOR<ProductsUpdateToOneWithWhereWithoutRatingsInput, ProductsUpdateWithoutRatingsInput>, ProductsUncheckedUpdateWithoutRatingsInput>
  }

  export type UsersCreateNestedOneWithoutCartInput = {
    create?: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCartInput
    connect?: UsersWhereUniqueInput
  }

  export type ProductsCreateNestedOneWithoutCartItemInput = {
    create?: XOR<ProductsCreateWithoutCartItemInput, ProductsUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutCartItemInput
    connect?: ProductsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCartInput
    upsert?: UsersUpsertWithoutCartInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCartInput, UsersUpdateWithoutCartInput>, UsersUncheckedUpdateWithoutCartInput>
  }

  export type ProductsUpdateOneRequiredWithoutCartItemNestedInput = {
    create?: XOR<ProductsCreateWithoutCartItemInput, ProductsUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutCartItemInput
    upsert?: ProductsUpsertWithoutCartItemInput
    connect?: ProductsWhereUniqueInput
    update?: XOR<XOR<ProductsUpdateToOneWithWhereWithoutCartItemInput, ProductsUpdateWithoutCartItemInput>, ProductsUncheckedUpdateWithoutCartItemInput>
  }

  export type UsersCreateNestedOneWithoutSaveProductInput = {
    create?: XOR<UsersCreateWithoutSaveProductInput, UsersUncheckedCreateWithoutSaveProductInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSaveProductInput
    connect?: UsersWhereUniqueInput
  }

  export type ProductsCreateNestedOneWithoutSaveProductInput = {
    create?: XOR<ProductsCreateWithoutSaveProductInput, ProductsUncheckedCreateWithoutSaveProductInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutSaveProductInput
    connect?: ProductsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSaveProductNestedInput = {
    create?: XOR<UsersCreateWithoutSaveProductInput, UsersUncheckedCreateWithoutSaveProductInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSaveProductInput
    upsert?: UsersUpsertWithoutSaveProductInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSaveProductInput, UsersUpdateWithoutSaveProductInput>, UsersUncheckedUpdateWithoutSaveProductInput>
  }

  export type ProductsUpdateOneRequiredWithoutSaveProductNestedInput = {
    create?: XOR<ProductsCreateWithoutSaveProductInput, ProductsUncheckedCreateWithoutSaveProductInput>
    connectOrCreate?: ProductsCreateOrConnectWithoutSaveProductInput
    upsert?: ProductsUpsertWithoutSaveProductInput
    connect?: ProductsWhereUniqueInput
    update?: XOR<XOR<ProductsUpdateToOneWithWhereWithoutSaveProductInput, ProductsUpdateWithoutSaveProductInput>, ProductsUncheckedUpdateWithoutSaveProductInput>
  }

  export type SelectedTestCreateNestedManyWithoutDiagnosticTestInput = {
    create?: XOR<SelectedTestCreateWithoutDiagnosticTestInput, SelectedTestUncheckedCreateWithoutDiagnosticTestInput> | SelectedTestCreateWithoutDiagnosticTestInput[] | SelectedTestUncheckedCreateWithoutDiagnosticTestInput[]
    connectOrCreate?: SelectedTestCreateOrConnectWithoutDiagnosticTestInput | SelectedTestCreateOrConnectWithoutDiagnosticTestInput[]
    createMany?: SelectedTestCreateManyDiagnosticTestInputEnvelope
    connect?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
  }

  export type SelectedTestUncheckedCreateNestedManyWithoutDiagnosticTestInput = {
    create?: XOR<SelectedTestCreateWithoutDiagnosticTestInput, SelectedTestUncheckedCreateWithoutDiagnosticTestInput> | SelectedTestCreateWithoutDiagnosticTestInput[] | SelectedTestUncheckedCreateWithoutDiagnosticTestInput[]
    connectOrCreate?: SelectedTestCreateOrConnectWithoutDiagnosticTestInput | SelectedTestCreateOrConnectWithoutDiagnosticTestInput[]
    createMany?: SelectedTestCreateManyDiagnosticTestInputEnvelope
    connect?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
  }

  export type SelectedTestUpdateManyWithoutDiagnosticTestNestedInput = {
    create?: XOR<SelectedTestCreateWithoutDiagnosticTestInput, SelectedTestUncheckedCreateWithoutDiagnosticTestInput> | SelectedTestCreateWithoutDiagnosticTestInput[] | SelectedTestUncheckedCreateWithoutDiagnosticTestInput[]
    connectOrCreate?: SelectedTestCreateOrConnectWithoutDiagnosticTestInput | SelectedTestCreateOrConnectWithoutDiagnosticTestInput[]
    upsert?: SelectedTestUpsertWithWhereUniqueWithoutDiagnosticTestInput | SelectedTestUpsertWithWhereUniqueWithoutDiagnosticTestInput[]
    createMany?: SelectedTestCreateManyDiagnosticTestInputEnvelope
    set?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    disconnect?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    delete?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    connect?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    update?: SelectedTestUpdateWithWhereUniqueWithoutDiagnosticTestInput | SelectedTestUpdateWithWhereUniqueWithoutDiagnosticTestInput[]
    updateMany?: SelectedTestUpdateManyWithWhereWithoutDiagnosticTestInput | SelectedTestUpdateManyWithWhereWithoutDiagnosticTestInput[]
    deleteMany?: SelectedTestScalarWhereInput | SelectedTestScalarWhereInput[]
  }

  export type SelectedTestUncheckedUpdateManyWithoutDiagnosticTestNestedInput = {
    create?: XOR<SelectedTestCreateWithoutDiagnosticTestInput, SelectedTestUncheckedCreateWithoutDiagnosticTestInput> | SelectedTestCreateWithoutDiagnosticTestInput[] | SelectedTestUncheckedCreateWithoutDiagnosticTestInput[]
    connectOrCreate?: SelectedTestCreateOrConnectWithoutDiagnosticTestInput | SelectedTestCreateOrConnectWithoutDiagnosticTestInput[]
    upsert?: SelectedTestUpsertWithWhereUniqueWithoutDiagnosticTestInput | SelectedTestUpsertWithWhereUniqueWithoutDiagnosticTestInput[]
    createMany?: SelectedTestCreateManyDiagnosticTestInputEnvelope
    set?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    disconnect?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    delete?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    connect?: SelectedTestWhereUniqueInput | SelectedTestWhereUniqueInput[]
    update?: SelectedTestUpdateWithWhereUniqueWithoutDiagnosticTestInput | SelectedTestUpdateWithWhereUniqueWithoutDiagnosticTestInput[]
    updateMany?: SelectedTestUpdateManyWithWhereWithoutDiagnosticTestInput | SelectedTestUpdateManyWithWhereWithoutDiagnosticTestInput[]
    deleteMany?: SelectedTestScalarWhereInput | SelectedTestScalarWhereInput[]
  }

  export type DiagnosticTestCreateNestedOneWithoutSelectedTestsInput = {
    create?: XOR<DiagnosticTestCreateWithoutSelectedTestsInput, DiagnosticTestUncheckedCreateWithoutSelectedTestsInput>
    connectOrCreate?: DiagnosticTestCreateOrConnectWithoutSelectedTestsInput
    connect?: DiagnosticTestWhereUniqueInput
  }

  export type DiagnosticTestUpdateOneRequiredWithoutSelectedTestsNestedInput = {
    create?: XOR<DiagnosticTestCreateWithoutSelectedTestsInput, DiagnosticTestUncheckedCreateWithoutSelectedTestsInput>
    connectOrCreate?: DiagnosticTestCreateOrConnectWithoutSelectedTestsInput
    upsert?: DiagnosticTestUpsertWithoutSelectedTestsInput
    connect?: DiagnosticTestWhereUniqueInput
    update?: XOR<XOR<DiagnosticTestUpdateToOneWithWhereWithoutSelectedTestsInput, DiagnosticTestUpdateWithoutSelectedTestsInput>, DiagnosticTestUncheckedUpdateWithoutSelectedTestsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPeriodFilter<$PrismaModel = never> = {
    equals?: $Enums.Period | EnumPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodFilter<$PrismaModel> | $Enums.Period
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumPeriodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Period | EnumPeriodFieldRefInput<$PrismaModel>
    in?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Period[] | ListEnumPeriodFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodWithAggregatesFilter<$PrismaModel> | $Enums.Period
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPeriodFilter<$PrismaModel>
    _max?: NestedEnumPeriodFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumproductCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.productCategory | EnumproductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumproductCategoryFilter<$PrismaModel> | $Enums.productCategory
  }

  export type NestedEnumproductCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.productCategory | EnumproductCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.productCategory[] | ListEnumproductCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumproductCategoryWithAggregatesFilter<$PrismaModel> | $Enums.productCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumproductCategoryFilter<$PrismaModel>
    _max?: NestedEnumproductCategoryFilter<$PrismaModel>
  }

  export type WalletCreateWithoutUserInput = {
    id?: string
    balance?: number
  }

  export type WalletUncheckedCreateWithoutUserInput = {
    id?: string
    balance?: number
  }

  export type WalletCreateOrConnectWithoutUserInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type BvnCreateWithoutUserInput = {
    id?: string
    bvn: number
  }

  export type BvnUncheckedCreateWithoutUserInput = {
    id?: string
    bvn: number
  }

  export type BvnCreateOrConnectWithoutUserInput = {
    where: BvnWhereUniqueInput
    create: XOR<BvnCreateWithoutUserInput, BvnUncheckedCreateWithoutUserInput>
  }

  export type BvnCreateManyUserInputEnvelope = {
    data: BvnCreateManyUserInput | BvnCreateManyUserInput[]
  }

  export type SetupProfileCreateWithoutUserInput = {
    id?: string
    username: string
    matricNumber: string
  }

  export type SetupProfileUncheckedCreateWithoutUserInput = {
    id?: string
    username: string
    matricNumber: string
  }

  export type SetupProfileCreateOrConnectWithoutUserInput = {
    where: SetupProfileWhereUniqueInput
    create: XOR<SetupProfileCreateWithoutUserInput, SetupProfileUncheckedCreateWithoutUserInput>
  }

  export type AppointmentCreateWithoutUserInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    rating?: number | null
    review?: string | null
    Doctors: DoctorsCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutUserInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    doctorsId: string
    rating?: number | null
    review?: string | null
  }

  export type AppointmentCreateOrConnectWithoutUserInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput>
  }

  export type AppointmentCreateManyUserInputEnvelope = {
    data: AppointmentCreateManyUserInput | AppointmentCreateManyUserInput[]
  }

  export type CartItemCreateWithoutUserInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    product: ProductsCreateNestedOneWithoutCartItemInput
  }

  export type CartItemUncheckedCreateWithoutUserInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    productId: string
  }

  export type CartItemCreateOrConnectWithoutUserInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutUserInput, CartItemUncheckedCreateWithoutUserInput>
  }

  export type CartItemCreateManyUserInputEnvelope = {
    data: CartItemCreateManyUserInput | CartItemCreateManyUserInput[]
  }

  export type TransactionPinCreateWithoutUserInput = {
    id?: string
    pin: string
  }

  export type TransactionPinUncheckedCreateWithoutUserInput = {
    id?: string
    pin: string
  }

  export type TransactionPinCreateOrConnectWithoutUserInput = {
    where: TransactionPinWhereUniqueInput
    create: XOR<TransactionPinCreateWithoutUserInput, TransactionPinUncheckedCreateWithoutUserInput>
  }

  export type SaveProductCreateWithoutUserInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    product: ProductsCreateNestedOneWithoutSaveProductInput
  }

  export type SaveProductUncheckedCreateWithoutUserInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    productId: string
  }

  export type SaveProductCreateOrConnectWithoutUserInput = {
    where: SaveProductWhereUniqueInput
    create: XOR<SaveProductCreateWithoutUserInput, SaveProductUncheckedCreateWithoutUserInput>
  }

  export type SaveProductCreateManyUserInputEnvelope = {
    data: SaveProductCreateManyUserInput | SaveProductCreateManyUserInput[]
  }

  export type AddressCreateWithoutUserInput = {
    id?: string
    street?: string | null
    city?: string | null
    state: string
    local_government: string
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: string
    street?: string | null
    city?: string | null
    state: string
    local_government: string
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateManyUserInputEnvelope = {
    data: AddressCreateManyUserInput | AddressCreateManyUserInput[]
  }

  export type WalletUpsertWithoutUserInput = {
    update: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutUserInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
  }

  export type WalletUpdateWithoutUserInput = {
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type WalletUncheckedUpdateWithoutUserInput = {
    balance?: IntFieldUpdateOperationsInput | number
  }

  export type BvnUpsertWithWhereUniqueWithoutUserInput = {
    where: BvnWhereUniqueInput
    update: XOR<BvnUpdateWithoutUserInput, BvnUncheckedUpdateWithoutUserInput>
    create: XOR<BvnCreateWithoutUserInput, BvnUncheckedCreateWithoutUserInput>
  }

  export type BvnUpdateWithWhereUniqueWithoutUserInput = {
    where: BvnWhereUniqueInput
    data: XOR<BvnUpdateWithoutUserInput, BvnUncheckedUpdateWithoutUserInput>
  }

  export type BvnUpdateManyWithWhereWithoutUserInput = {
    where: BvnScalarWhereInput
    data: XOR<BvnUpdateManyMutationInput, BvnUncheckedUpdateManyWithoutUserInput>
  }

  export type BvnScalarWhereInput = {
    AND?: BvnScalarWhereInput | BvnScalarWhereInput[]
    OR?: BvnScalarWhereInput[]
    NOT?: BvnScalarWhereInput | BvnScalarWhereInput[]
    id?: StringFilter<"Bvn"> | string
    bvn?: IntFilter<"Bvn"> | number
    usersId?: StringFilter<"Bvn"> | string
  }

  export type SetupProfileUpsertWithoutUserInput = {
    update: XOR<SetupProfileUpdateWithoutUserInput, SetupProfileUncheckedUpdateWithoutUserInput>
    create: XOR<SetupProfileCreateWithoutUserInput, SetupProfileUncheckedCreateWithoutUserInput>
    where?: SetupProfileWhereInput
  }

  export type SetupProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: SetupProfileWhereInput
    data: XOR<SetupProfileUpdateWithoutUserInput, SetupProfileUncheckedUpdateWithoutUserInput>
  }

  export type SetupProfileUpdateWithoutUserInput = {
    username?: StringFieldUpdateOperationsInput | string
    matricNumber?: StringFieldUpdateOperationsInput | string
  }

  export type SetupProfileUncheckedUpdateWithoutUserInput = {
    username?: StringFieldUpdateOperationsInput | string
    matricNumber?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutUserInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutUserInput, AppointmentUncheckedUpdateWithoutUserInput>
    create: XOR<AppointmentCreateWithoutUserInput, AppointmentUncheckedCreateWithoutUserInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutUserInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutUserInput, AppointmentUncheckedUpdateWithoutUserInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutUserInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutUserInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    date?: DateTimeFilter<"Appointment"> | Date | string
    startTime?: StringFilter<"Appointment"> | string
    endTime?: StringFilter<"Appointment"> | string
    hasEnded?: BoolNullableFilter<"Appointment"> | boolean | null
    period?: EnumPeriodFilter<"Appointment"> | $Enums.Period
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    appointmentType?: StringFilter<"Appointment"> | string
    usersId?: StringFilter<"Appointment"> | string
    doctorsId?: StringFilter<"Appointment"> | string
    rating?: IntNullableFilter<"Appointment"> | number | null
    review?: StringNullableFilter<"Appointment"> | string | null
  }

  export type CartItemUpsertWithWhereUniqueWithoutUserInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutUserInput, CartItemUncheckedUpdateWithoutUserInput>
    create: XOR<CartItemCreateWithoutUserInput, CartItemUncheckedCreateWithoutUserInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutUserInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutUserInput, CartItemUncheckedUpdateWithoutUserInput>
  }

  export type CartItemUpdateManyWithWhereWithoutUserInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutUserInput>
  }

  export type CartItemScalarWhereInput = {
    AND?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    OR?: CartItemScalarWhereInput[]
    NOT?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    id?: StringFilter<"CartItem"> | string
    image?: StringFilter<"CartItem"> | string
    title?: StringFilter<"CartItem"> | string
    amount?: IntFilter<"CartItem"> | number
    delivery?: StringFilter<"CartItem"> | string
    quantity?: IntFilter<"CartItem"> | number
    userId?: StringFilter<"CartItem"> | string
    productId?: StringFilter<"CartItem"> | string
  }

  export type TransactionPinUpsertWithoutUserInput = {
    update: XOR<TransactionPinUpdateWithoutUserInput, TransactionPinUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionPinCreateWithoutUserInput, TransactionPinUncheckedCreateWithoutUserInput>
    where?: TransactionPinWhereInput
  }

  export type TransactionPinUpdateToOneWithWhereWithoutUserInput = {
    where?: TransactionPinWhereInput
    data: XOR<TransactionPinUpdateWithoutUserInput, TransactionPinUncheckedUpdateWithoutUserInput>
  }

  export type TransactionPinUpdateWithoutUserInput = {
    pin?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionPinUncheckedUpdateWithoutUserInput = {
    pin?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductUpsertWithWhereUniqueWithoutUserInput = {
    where: SaveProductWhereUniqueInput
    update: XOR<SaveProductUpdateWithoutUserInput, SaveProductUncheckedUpdateWithoutUserInput>
    create: XOR<SaveProductCreateWithoutUserInput, SaveProductUncheckedCreateWithoutUserInput>
  }

  export type SaveProductUpdateWithWhereUniqueWithoutUserInput = {
    where: SaveProductWhereUniqueInput
    data: XOR<SaveProductUpdateWithoutUserInput, SaveProductUncheckedUpdateWithoutUserInput>
  }

  export type SaveProductUpdateManyWithWhereWithoutUserInput = {
    where: SaveProductScalarWhereInput
    data: XOR<SaveProductUpdateManyMutationInput, SaveProductUncheckedUpdateManyWithoutUserInput>
  }

  export type SaveProductScalarWhereInput = {
    AND?: SaveProductScalarWhereInput | SaveProductScalarWhereInput[]
    OR?: SaveProductScalarWhereInput[]
    NOT?: SaveProductScalarWhereInput | SaveProductScalarWhereInput[]
    id?: StringFilter<"SaveProduct"> | string
    image?: StringFilter<"SaveProduct"> | string
    title?: StringFilter<"SaveProduct"> | string
    amount?: IntFilter<"SaveProduct"> | number
    delivery?: StringFilter<"SaveProduct"> | string
    userId?: StringFilter<"SaveProduct"> | string
    productId?: StringFilter<"SaveProduct"> | string
  }

  export type AddressUpsertWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithWhereWithoutUserInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutUserInput>
  }

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[]
    OR?: AddressScalarWhereInput[]
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[]
    id?: StringFilter<"Address"> | string
    street?: StringNullableFilter<"Address"> | string | null
    city?: StringNullableFilter<"Address"> | string | null
    state?: StringFilter<"Address"> | string
    local_government?: StringFilter<"Address"> | string
    usersId?: StringFilter<"Address"> | string
  }

  export type UsersCreateWithoutAddressInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    Bvn?: BvnCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutAddressInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutAddressInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput>
  }

  export type UsersUpsertWithoutAddressInput = {
    update: XOR<UsersUpdateWithoutAddressInput, UsersUncheckedUpdateWithoutAddressInput>
    create: XOR<UsersCreateWithoutAddressInput, UsersUncheckedCreateWithoutAddressInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAddressInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAddressInput, UsersUncheckedUpdateWithoutAddressInput>
  }

  export type UsersUpdateWithoutAddressInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutAddressInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutTransactionPinInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    Bvn?: BvnCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutTransactionPinInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutTransactionPinInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTransactionPinInput, UsersUncheckedCreateWithoutTransactionPinInput>
  }

  export type UsersUpsertWithoutTransactionPinInput = {
    update: XOR<UsersUpdateWithoutTransactionPinInput, UsersUncheckedUpdateWithoutTransactionPinInput>
    create: XOR<UsersCreateWithoutTransactionPinInput, UsersUncheckedCreateWithoutTransactionPinInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutTransactionPinInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutTransactionPinInput, UsersUncheckedUpdateWithoutTransactionPinInput>
  }

  export type UsersUpdateWithoutTransactionPinInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutTransactionPinInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutWalletInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Bvn?: BvnCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutWalletInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutWalletInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutWalletInput, UsersUncheckedCreateWithoutWalletInput>
  }

  export type UsersUpsertWithoutWalletInput = {
    update: XOR<UsersUpdateWithoutWalletInput, UsersUncheckedUpdateWithoutWalletInput>
    create: XOR<UsersCreateWithoutWalletInput, UsersUncheckedCreateWithoutWalletInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutWalletInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutWalletInput, UsersUncheckedUpdateWithoutWalletInput>
  }

  export type UsersUpdateWithoutWalletInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutWalletInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutBvnInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutBvnInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutBvnInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutBvnInput, UsersUncheckedCreateWithoutBvnInput>
  }

  export type UsersUpsertWithoutBvnInput = {
    update: XOR<UsersUpdateWithoutBvnInput, UsersUncheckedUpdateWithoutBvnInput>
    create: XOR<UsersCreateWithoutBvnInput, UsersUncheckedCreateWithoutBvnInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutBvnInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutBvnInput, UsersUncheckedUpdateWithoutBvnInput>
  }

  export type UsersUpdateWithoutBvnInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutBvnInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutSetupProfileInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    Bvn?: BvnCreateNestedManyWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutSetupProfileInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutSetupProfileInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSetupProfileInput, UsersUncheckedCreateWithoutSetupProfileInput>
  }

  export type UsersUpsertWithoutSetupProfileInput = {
    update: XOR<UsersUpdateWithoutSetupProfileInput, UsersUncheckedUpdateWithoutSetupProfileInput>
    create: XOR<UsersCreateWithoutSetupProfileInput, UsersUncheckedCreateWithoutSetupProfileInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSetupProfileInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSetupProfileInput, UsersUncheckedUpdateWithoutSetupProfileInput>
  }

  export type UsersUpdateWithoutSetupProfileInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSetupProfileInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DoctorsCreateWithoutAppointmentInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about?: string | null
    appointmentId?: string | null
    workingHours?: WorkingHoursCreateNestedManyWithoutDoctorInput
  }

  export type DoctorsUncheckedCreateWithoutAppointmentInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about?: string | null
    appointmentId?: string | null
    workingHours?: WorkingHoursUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorsCreateOrConnectWithoutAppointmentInput = {
    where: DoctorsWhereUniqueInput
    create: XOR<DoctorsCreateWithoutAppointmentInput, DoctorsUncheckedCreateWithoutAppointmentInput>
  }

  export type UsersCreateWithoutAppointmentInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    Bvn?: BvnCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutAppointmentInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutAppointmentInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAppointmentInput, UsersUncheckedCreateWithoutAppointmentInput>
  }

  export type DoctorsUpsertWithoutAppointmentInput = {
    update: XOR<DoctorsUpdateWithoutAppointmentInput, DoctorsUncheckedUpdateWithoutAppointmentInput>
    create: XOR<DoctorsCreateWithoutAppointmentInput, DoctorsUncheckedCreateWithoutAppointmentInput>
    where?: DoctorsWhereInput
  }

  export type DoctorsUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: DoctorsWhereInput
    data: XOR<DoctorsUpdateWithoutAppointmentInput, DoctorsUncheckedUpdateWithoutAppointmentInput>
  }

  export type DoctorsUpdateWithoutAppointmentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHours?: WorkingHoursUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorsUncheckedUpdateWithoutAppointmentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHours?: WorkingHoursUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type UsersUpsertWithoutAppointmentInput = {
    update: XOR<UsersUpdateWithoutAppointmentInput, UsersUncheckedUpdateWithoutAppointmentInput>
    create: XOR<UsersCreateWithoutAppointmentInput, UsersUncheckedCreateWithoutAppointmentInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAppointmentInput, UsersUncheckedUpdateWithoutAppointmentInput>
  }

  export type UsersUpdateWithoutAppointmentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutAppointmentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WorkingHoursCreateWithoutDoctorInput = {
    id?: string
    day: string
    startTime: string
    endTime: string
  }

  export type WorkingHoursUncheckedCreateWithoutDoctorInput = {
    id?: string
    day: string
    startTime: string
    endTime: string
  }

  export type WorkingHoursCreateOrConnectWithoutDoctorInput = {
    where: WorkingHoursWhereUniqueInput
    create: XOR<WorkingHoursCreateWithoutDoctorInput, WorkingHoursUncheckedCreateWithoutDoctorInput>
  }

  export type WorkingHoursCreateManyDoctorInputEnvelope = {
    data: WorkingHoursCreateManyDoctorInput | WorkingHoursCreateManyDoctorInput[]
  }

  export type AppointmentCreateWithoutDoctorsInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    rating?: number | null
    review?: string | null
    user: UsersCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutDoctorsInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    usersId: string
    rating?: number | null
    review?: string | null
  }

  export type AppointmentCreateOrConnectWithoutDoctorsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput>
  }

  export type AppointmentCreateManyDoctorsInputEnvelope = {
    data: AppointmentCreateManyDoctorsInput | AppointmentCreateManyDoctorsInput[]
  }

  export type WorkingHoursUpsertWithWhereUniqueWithoutDoctorInput = {
    where: WorkingHoursWhereUniqueInput
    update: XOR<WorkingHoursUpdateWithoutDoctorInput, WorkingHoursUncheckedUpdateWithoutDoctorInput>
    create: XOR<WorkingHoursCreateWithoutDoctorInput, WorkingHoursUncheckedCreateWithoutDoctorInput>
  }

  export type WorkingHoursUpdateWithWhereUniqueWithoutDoctorInput = {
    where: WorkingHoursWhereUniqueInput
    data: XOR<WorkingHoursUpdateWithoutDoctorInput, WorkingHoursUncheckedUpdateWithoutDoctorInput>
  }

  export type WorkingHoursUpdateManyWithWhereWithoutDoctorInput = {
    where: WorkingHoursScalarWhereInput
    data: XOR<WorkingHoursUpdateManyMutationInput, WorkingHoursUncheckedUpdateManyWithoutDoctorInput>
  }

  export type WorkingHoursScalarWhereInput = {
    AND?: WorkingHoursScalarWhereInput | WorkingHoursScalarWhereInput[]
    OR?: WorkingHoursScalarWhereInput[]
    NOT?: WorkingHoursScalarWhereInput | WorkingHoursScalarWhereInput[]
    id?: StringFilter<"WorkingHours"> | string
    day?: StringFilter<"WorkingHours"> | string
    startTime?: StringFilter<"WorkingHours"> | string
    endTime?: StringFilter<"WorkingHours"> | string
    doctorId?: StringFilter<"WorkingHours"> | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutDoctorsInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutDoctorsInput, AppointmentUncheckedUpdateWithoutDoctorsInput>
    create: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutDoctorsInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutDoctorsInput, AppointmentUncheckedUpdateWithoutDoctorsInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutDoctorsInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutDoctorsInput>
  }

  export type DoctorsCreateWithoutWorkingHoursInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about?: string | null
    appointmentId?: string | null
    Appointment?: AppointmentCreateNestedManyWithoutDoctorsInput
  }

  export type DoctorsUncheckedCreateWithoutWorkingHoursInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    password: string
    specialization: string
    country: string
    state: string
    certificate: string
    isApproved?: boolean
    soundEnabled?: boolean
    inviteFriendsEnabled?: boolean
    vibrationEnabled?: boolean
    profilePicture?: string | null
    yearsOfExperience: number
    graduationYear: number
    school: string
    medicalLicensePicture: string
    about?: string | null
    appointmentId?: string | null
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutDoctorsInput
  }

  export type DoctorsCreateOrConnectWithoutWorkingHoursInput = {
    where: DoctorsWhereUniqueInput
    create: XOR<DoctorsCreateWithoutWorkingHoursInput, DoctorsUncheckedCreateWithoutWorkingHoursInput>
  }

  export type DoctorsUpsertWithoutWorkingHoursInput = {
    update: XOR<DoctorsUpdateWithoutWorkingHoursInput, DoctorsUncheckedUpdateWithoutWorkingHoursInput>
    create: XOR<DoctorsCreateWithoutWorkingHoursInput, DoctorsUncheckedCreateWithoutWorkingHoursInput>
    where?: DoctorsWhereInput
  }

  export type DoctorsUpdateToOneWithWhereWithoutWorkingHoursInput = {
    where?: DoctorsWhereInput
    data: XOR<DoctorsUpdateWithoutWorkingHoursInput, DoctorsUncheckedUpdateWithoutWorkingHoursInput>
  }

  export type DoctorsUpdateWithoutWorkingHoursInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    Appointment?: AppointmentUpdateManyWithoutDoctorsNestedInput
  }

  export type DoctorsUncheckedUpdateWithoutWorkingHoursInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    specialization?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    soundEnabled?: BoolFieldUpdateOperationsInput | boolean
    inviteFriendsEnabled?: BoolFieldUpdateOperationsInput | boolean
    vibrationEnabled?: BoolFieldUpdateOperationsInput | boolean
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    graduationYear?: IntFieldUpdateOperationsInput | number
    school?: StringFieldUpdateOperationsInput | string
    medicalLicensePicture?: StringFieldUpdateOperationsInput | string
    about?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    Appointment?: AppointmentUncheckedUpdateManyWithoutDoctorsNestedInput
  }

  export type CartItemCreateWithoutProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    user: UsersCreateNestedOneWithoutCartInput
  }

  export type CartItemUncheckedCreateWithoutProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    userId: string
  }

  export type CartItemCreateOrConnectWithoutProductInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemCreateManyProductInputEnvelope = {
    data: CartItemCreateManyProductInput | CartItemCreateManyProductInput[]
  }

  export type SaveProductCreateWithoutProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    user: UsersCreateNestedOneWithoutSaveProductInput
  }

  export type SaveProductUncheckedCreateWithoutProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    userId: string
  }

  export type SaveProductCreateOrConnectWithoutProductInput = {
    where: SaveProductWhereUniqueInput
    create: XOR<SaveProductCreateWithoutProductInput, SaveProductUncheckedCreateWithoutProductInput>
  }

  export type SaveProductCreateManyProductInputEnvelope = {
    data: SaveProductCreateManyProductInput | SaveProductCreateManyProductInput[]
  }

  export type RatingCreateWithoutProductInput = {
    id?: string
    value: number
  }

  export type RatingUncheckedCreateWithoutProductInput = {
    id?: string
    value: number
  }

  export type RatingCreateOrConnectWithoutProductInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput>
  }

  export type RatingCreateManyProductInputEnvelope = {
    data: RatingCreateManyProductInput | RatingCreateManyProductInput[]
  }

  export type CartItemUpsertWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
  }

  export type CartItemUpdateManyWithWhereWithoutProductInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutProductInput>
  }

  export type SaveProductUpsertWithWhereUniqueWithoutProductInput = {
    where: SaveProductWhereUniqueInput
    update: XOR<SaveProductUpdateWithoutProductInput, SaveProductUncheckedUpdateWithoutProductInput>
    create: XOR<SaveProductCreateWithoutProductInput, SaveProductUncheckedCreateWithoutProductInput>
  }

  export type SaveProductUpdateWithWhereUniqueWithoutProductInput = {
    where: SaveProductWhereUniqueInput
    data: XOR<SaveProductUpdateWithoutProductInput, SaveProductUncheckedUpdateWithoutProductInput>
  }

  export type SaveProductUpdateManyWithWhereWithoutProductInput = {
    where: SaveProductScalarWhereInput
    data: XOR<SaveProductUpdateManyMutationInput, SaveProductUncheckedUpdateManyWithoutProductInput>
  }

  export type RatingUpsertWithWhereUniqueWithoutProductInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutProductInput, RatingUncheckedUpdateWithoutProductInput>
    create: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutProductInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutProductInput, RatingUncheckedUpdateWithoutProductInput>
  }

  export type RatingUpdateManyWithWhereWithoutProductInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutProductInput>
  }

  export type RatingScalarWhereInput = {
    AND?: RatingScalarWhereInput | RatingScalarWhereInput[]
    OR?: RatingScalarWhereInput[]
    NOT?: RatingScalarWhereInput | RatingScalarWhereInput[]
    id?: StringFilter<"Rating"> | string
    value?: IntFilter<"Rating"> | number
    productId?: StringFilter<"Rating"> | string
  }

  export type ProductsCreateWithoutRatingsInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    SaveProduct?: SaveProductCreateNestedManyWithoutProductInput
  }

  export type ProductsUncheckedCreateWithoutRatingsInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductsCreateOrConnectWithoutRatingsInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutRatingsInput, ProductsUncheckedCreateWithoutRatingsInput>
  }

  export type ProductsUpsertWithoutRatingsInput = {
    update: XOR<ProductsUpdateWithoutRatingsInput, ProductsUncheckedUpdateWithoutRatingsInput>
    create: XOR<ProductsCreateWithoutRatingsInput, ProductsUncheckedCreateWithoutRatingsInput>
    where?: ProductsWhereInput
  }

  export type ProductsUpdateToOneWithWhereWithoutRatingsInput = {
    where?: ProductsWhereInput
    data: XOR<ProductsUpdateWithoutRatingsInput, ProductsUncheckedUpdateWithoutRatingsInput>
  }

  export type ProductsUpdateWithoutRatingsInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutProductNestedInput
  }

  export type ProductsUncheckedUpdateWithoutRatingsInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UsersCreateWithoutCartInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    Bvn?: BvnCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutCartInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutCartInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
  }

  export type ProductsCreateWithoutCartItemInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    SaveProduct?: SaveProductCreateNestedManyWithoutProductInput
    Ratings?: RatingCreateNestedManyWithoutProductInput
  }

  export type ProductsUncheckedCreateWithoutCartItemInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    SaveProduct?: SaveProductUncheckedCreateNestedManyWithoutProductInput
    Ratings?: RatingUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductsCreateOrConnectWithoutCartItemInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutCartItemInput, ProductsUncheckedCreateWithoutCartItemInput>
  }

  export type UsersUpsertWithoutCartInput = {
    update: XOR<UsersUpdateWithoutCartInput, UsersUncheckedUpdateWithoutCartInput>
    create: XOR<UsersCreateWithoutCartInput, UsersUncheckedCreateWithoutCartInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCartInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCartInput, UsersUncheckedUpdateWithoutCartInput>
  }

  export type UsersUpdateWithoutCartInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUpdateManyWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutCartInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductsUpsertWithoutCartItemInput = {
    update: XOR<ProductsUpdateWithoutCartItemInput, ProductsUncheckedUpdateWithoutCartItemInput>
    create: XOR<ProductsCreateWithoutCartItemInput, ProductsUncheckedCreateWithoutCartItemInput>
    where?: ProductsWhereInput
  }

  export type ProductsUpdateToOneWithWhereWithoutCartItemInput = {
    where?: ProductsWhereInput
    data: XOR<ProductsUpdateWithoutCartItemInput, ProductsUncheckedUpdateWithoutCartItemInput>
  }

  export type ProductsUpdateWithoutCartItemInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    SaveProduct?: SaveProductUpdateManyWithoutProductNestedInput
    Ratings?: RatingUpdateManyWithoutProductNestedInput
  }

  export type ProductsUncheckedUpdateWithoutCartItemInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    SaveProduct?: SaveProductUncheckedUpdateManyWithoutProductNestedInput
    Ratings?: RatingUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UsersCreateWithoutSaveProductInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletCreateNestedOneWithoutUserInput
    Bvn?: BvnCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileCreateNestedOneWithoutUserInput
    Appointment?: AppointmentCreateNestedManyWithoutUserInput
    Cart?: CartItemCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutSaveProductInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth: string
    country: string
    phoneNumber: string
    schoolName?: string | null
    email: string
    password: string
    verified?: boolean | null
    otp?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isSuspended?: boolean | null
    isDeleted?: boolean | null
    Wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    Bvn?: BvnUncheckedCreateNestedManyWithoutUserInput
    SetupProfile?: SetupProfileUncheckedCreateNestedOneWithoutUserInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutUserInput
    Cart?: CartItemUncheckedCreateNestedManyWithoutUserInput
    TransactionPin?: TransactionPinUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutSaveProductInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSaveProductInput, UsersUncheckedCreateWithoutSaveProductInput>
  }

  export type ProductsCreateWithoutSaveProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    Ratings?: RatingCreateNestedManyWithoutProductInput
  }

  export type ProductsUncheckedCreateWithoutSaveProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    description: string
    howToUse: string
    quantity: number
    productCategory: $Enums.productCategory
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    Ratings?: RatingUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductsCreateOrConnectWithoutSaveProductInput = {
    where: ProductsWhereUniqueInput
    create: XOR<ProductsCreateWithoutSaveProductInput, ProductsUncheckedCreateWithoutSaveProductInput>
  }

  export type UsersUpsertWithoutSaveProductInput = {
    update: XOR<UsersUpdateWithoutSaveProductInput, UsersUncheckedUpdateWithoutSaveProductInput>
    create: XOR<UsersCreateWithoutSaveProductInput, UsersUncheckedCreateWithoutSaveProductInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSaveProductInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSaveProductInput, UsersUncheckedUpdateWithoutSaveProductInput>
  }

  export type UsersUpdateWithoutSaveProductInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUpdateOneWithoutUserNestedInput
    Bvn?: BvnUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUpdateManyWithoutUserNestedInput
    Cart?: CartItemUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUpdateOneWithoutUserNestedInput
    address?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSaveProductInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    schoolName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    otp?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuspended?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isDeleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    Bvn?: BvnUncheckedUpdateManyWithoutUserNestedInput
    SetupProfile?: SetupProfileUncheckedUpdateOneWithoutUserNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutUserNestedInput
    Cart?: CartItemUncheckedUpdateManyWithoutUserNestedInput
    TransactionPin?: TransactionPinUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductsUpsertWithoutSaveProductInput = {
    update: XOR<ProductsUpdateWithoutSaveProductInput, ProductsUncheckedUpdateWithoutSaveProductInput>
    create: XOR<ProductsCreateWithoutSaveProductInput, ProductsUncheckedCreateWithoutSaveProductInput>
    where?: ProductsWhereInput
  }

  export type ProductsUpdateToOneWithWhereWithoutSaveProductInput = {
    where?: ProductsWhereInput
    data: XOR<ProductsUpdateWithoutSaveProductInput, ProductsUncheckedUpdateWithoutSaveProductInput>
  }

  export type ProductsUpdateWithoutSaveProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    Ratings?: RatingUpdateManyWithoutProductNestedInput
  }

  export type ProductsUncheckedUpdateWithoutSaveProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    howToUse?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productCategory?: EnumproductCategoryFieldUpdateOperationsInput | $Enums.productCategory
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    Ratings?: RatingUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SelectedTestCreateWithoutDiagnosticTestInput = {
    id?: string
    testName: string
    price: number
    quantity: number
    userId: string
  }

  export type SelectedTestUncheckedCreateWithoutDiagnosticTestInput = {
    id?: string
    testName: string
    price: number
    quantity: number
    userId: string
  }

  export type SelectedTestCreateOrConnectWithoutDiagnosticTestInput = {
    where: SelectedTestWhereUniqueInput
    create: XOR<SelectedTestCreateWithoutDiagnosticTestInput, SelectedTestUncheckedCreateWithoutDiagnosticTestInput>
  }

  export type SelectedTestCreateManyDiagnosticTestInputEnvelope = {
    data: SelectedTestCreateManyDiagnosticTestInput | SelectedTestCreateManyDiagnosticTestInput[]
  }

  export type SelectedTestUpsertWithWhereUniqueWithoutDiagnosticTestInput = {
    where: SelectedTestWhereUniqueInput
    update: XOR<SelectedTestUpdateWithoutDiagnosticTestInput, SelectedTestUncheckedUpdateWithoutDiagnosticTestInput>
    create: XOR<SelectedTestCreateWithoutDiagnosticTestInput, SelectedTestUncheckedCreateWithoutDiagnosticTestInput>
  }

  export type SelectedTestUpdateWithWhereUniqueWithoutDiagnosticTestInput = {
    where: SelectedTestWhereUniqueInput
    data: XOR<SelectedTestUpdateWithoutDiagnosticTestInput, SelectedTestUncheckedUpdateWithoutDiagnosticTestInput>
  }

  export type SelectedTestUpdateManyWithWhereWithoutDiagnosticTestInput = {
    where: SelectedTestScalarWhereInput
    data: XOR<SelectedTestUpdateManyMutationInput, SelectedTestUncheckedUpdateManyWithoutDiagnosticTestInput>
  }

  export type SelectedTestScalarWhereInput = {
    AND?: SelectedTestScalarWhereInput | SelectedTestScalarWhereInput[]
    OR?: SelectedTestScalarWhereInput[]
    NOT?: SelectedTestScalarWhereInput | SelectedTestScalarWhereInput[]
    id?: StringFilter<"SelectedTest"> | string
    testName?: StringFilter<"SelectedTest"> | string
    price?: IntFilter<"SelectedTest"> | number
    quantity?: IntFilter<"SelectedTest"> | number
    userId?: StringFilter<"SelectedTest"> | string
    diagnosticTestId?: StringFilter<"SelectedTest"> | string
  }

  export type DiagnosticTestCreateWithoutSelectedTestsInput = {
    id?: string
    name: string
    price: number
    dateCreated?: Date | string
    type: string
  }

  export type DiagnosticTestUncheckedCreateWithoutSelectedTestsInput = {
    id?: string
    name: string
    price: number
    dateCreated?: Date | string
    type: string
  }

  export type DiagnosticTestCreateOrConnectWithoutSelectedTestsInput = {
    where: DiagnosticTestWhereUniqueInput
    create: XOR<DiagnosticTestCreateWithoutSelectedTestsInput, DiagnosticTestUncheckedCreateWithoutSelectedTestsInput>
  }

  export type DiagnosticTestUpsertWithoutSelectedTestsInput = {
    update: XOR<DiagnosticTestUpdateWithoutSelectedTestsInput, DiagnosticTestUncheckedUpdateWithoutSelectedTestsInput>
    create: XOR<DiagnosticTestCreateWithoutSelectedTestsInput, DiagnosticTestUncheckedCreateWithoutSelectedTestsInput>
    where?: DiagnosticTestWhereInput
  }

  export type DiagnosticTestUpdateToOneWithWhereWithoutSelectedTestsInput = {
    where?: DiagnosticTestWhereInput
    data: XOR<DiagnosticTestUpdateWithoutSelectedTestsInput, DiagnosticTestUncheckedUpdateWithoutSelectedTestsInput>
  }

  export type DiagnosticTestUpdateWithoutSelectedTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type DiagnosticTestUncheckedUpdateWithoutSelectedTestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BvnCreateManyUserInput = {
    id?: string
    bvn: number
  }

  export type AppointmentCreateManyUserInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    doctorsId: string
    rating?: number | null
    review?: string | null
  }

  export type CartItemCreateManyUserInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    productId: string
  }

  export type SaveProductCreateManyUserInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    productId: string
  }

  export type AddressCreateManyUserInput = {
    id?: string
    street?: string | null
    city?: string | null
    state: string
    local_government: string
  }

  export type BvnUpdateWithoutUserInput = {
    bvn?: IntFieldUpdateOperationsInput | number
  }

  export type BvnUncheckedUpdateWithoutUserInput = {
    bvn?: IntFieldUpdateOperationsInput | number
  }

  export type BvnUncheckedUpdateManyWithoutUserInput = {
    bvn?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    Doctors?: DoctorsUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    doctorsId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    doctorsId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartItemUpdateWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductsUpdateOneRequiredWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type CartItemUncheckedUpdateManyWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductUpdateWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    product?: ProductsUpdateOneRequiredWithoutSaveProductNestedInput
  }

  export type SaveProductUncheckedUpdateWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductUncheckedUpdateManyWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUpdateWithoutUserInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    local_government?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    local_government?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateManyWithoutUserInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    local_government?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingHoursCreateManyDoctorInput = {
    id?: string
    day: string
    startTime: string
    endTime: string
  }

  export type AppointmentCreateManyDoctorsInput = {
    id?: string
    date: Date | string
    startTime: string
    endTime: string
    hasEnded?: boolean | null
    period: $Enums.Period
    status: $Enums.AppointmentStatus
    appointmentType: string
    usersId: string
    rating?: number | null
    review?: string | null
  }

  export type WorkingHoursUpdateWithoutDoctorInput = {
    day?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingHoursUncheckedUpdateWithoutDoctorInput = {
    day?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type WorkingHoursUncheckedUpdateManyWithoutDoctorInput = {
    day?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentUpdateWithoutDoctorsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UsersUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutDoctorsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutDoctorsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    hasEnded?: NullableBoolFieldUpdateOperationsInput | boolean | null
    period?: EnumPeriodFieldUpdateOperationsInput | $Enums.Period
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    appointmentType?: StringFieldUpdateOperationsInput | string
    usersId?: StringFieldUpdateOperationsInput | string
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    review?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CartItemCreateManyProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    quantity: number
    userId: string
  }

  export type SaveProductCreateManyProductInput = {
    id?: string
    image: string
    title: string
    amount: number
    delivery: string
    userId: string
  }

  export type RatingCreateManyProductInput = {
    id?: string
    value: number
  }

  export type CartItemUpdateWithoutProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCartNestedInput
  }

  export type CartItemUncheckedUpdateWithoutProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CartItemUncheckedUpdateManyWithoutProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductUpdateWithoutProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutSaveProductNestedInput
  }

  export type SaveProductUncheckedUpdateWithoutProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SaveProductUncheckedUpdateManyWithoutProductInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RatingUpdateWithoutProductInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateWithoutProductInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type RatingUncheckedUpdateManyWithoutProductInput = {
    value?: IntFieldUpdateOperationsInput | number
  }

  export type SelectedTestCreateManyDiagnosticTestInput = {
    id?: string
    testName: string
    price: number
    quantity: number
    userId: string
  }

  export type SelectedTestUpdateWithoutDiagnosticTestInput = {
    testName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedTestUncheckedUpdateWithoutDiagnosticTestInput = {
    testName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedTestUncheckedUpdateManyWithoutDiagnosticTestInput = {
    testName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorsCountOutputTypeDefaultArgs instead
     */
    export type DoctorsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsCountOutputTypeDefaultArgs instead
     */
    export type ProductsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiagnosticTestCountOutputTypeDefaultArgs instead
     */
    export type DiagnosticTestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiagnosticTestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionPinDefaultArgs instead
     */
    export type TransactionPinArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionPinDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransactionHistoryDefaultArgs instead
     */
    export type TransactionHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransactionHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WalletDefaultArgs instead
     */
    export type WalletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WalletDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BvnDefaultArgs instead
     */
    export type BvnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BvnDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SetupProfileDefaultArgs instead
     */
    export type SetupProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SetupProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppointmentDefaultArgs instead
     */
    export type AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppointmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorsDefaultArgs instead
     */
    export type DoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkingHoursDefaultArgs instead
     */
    export type WorkingHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkingHoursDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsDefaultArgs instead
     */
    export type ProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingDefaultArgs instead
     */
    export type RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CartItemDefaultArgs instead
     */
    export type CartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CartItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SaveProductDefaultArgs instead
     */
    export type SaveProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SaveProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiagnosticTestDefaultArgs instead
     */
    export type DiagnosticTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiagnosticTestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SelectedTestDefaultArgs instead
     */
    export type SelectedTestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SelectedTestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatSessionsDefaultArgs instead
     */
    export type ChatSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatSessionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatMessagesDefaultArgs instead
     */
    export type ChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatMessagesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}