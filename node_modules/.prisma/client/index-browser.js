
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.14.0
 * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
 */
Prisma.prismaVersion = {
  client: "5.14.0",
  engine: "e9771e62de70f79a5e1c604a2d7c8e2a0a874b48"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  country: 'country',
  phoneNumber: 'phoneNumber',
  schoolName: 'schoolName',
  email: 'email',
  password: 'password',
  verified: 'verified',
  otp: 'otp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isSuspended: 'isSuspended',
  isDeleted: 'isDeleted'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  local_government: 'local_government',
  usersId: 'usersId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionPinScalarFieldEnum = {
  id: 'id',
  pin: 'pin',
  usersId: 'usersId'
};

exports.Prisma.TransactionHistoryScalarFieldEnum = {
  id: 'id',
  email: 'email',
  paystack_ref: 'paystack_ref',
  payment_status: 'payment_status',
  time_paid: 'time_paid',
  date_paid: 'date_paid'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  balance: 'balance',
  usersId: 'usersId'
};

exports.Prisma.BvnScalarFieldEnum = {
  id: 'id',
  bvn: 'bvn',
  usersId: 'usersId'
};

exports.Prisma.SetupProfileScalarFieldEnum = {
  id: 'id',
  username: 'username',
  matricNumber: 'matricNumber',
  usersId: 'usersId'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  hasEnded: 'hasEnded',
  period: 'period',
  status: 'status',
  appointmentType: 'appointmentType',
  usersId: 'usersId',
  doctorsId: 'doctorsId',
  rating: 'rating',
  review: 'review'
};

exports.Prisma.DoctorsScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  specialization: 'specialization',
  country: 'country',
  state: 'state',
  certificate: 'certificate',
  isApproved: 'isApproved',
  soundEnabled: 'soundEnabled',
  inviteFriendsEnabled: 'inviteFriendsEnabled',
  vibrationEnabled: 'vibrationEnabled',
  profilePicture: 'profilePicture',
  yearsOfExperience: 'yearsOfExperience',
  graduationYear: 'graduationYear',
  school: 'school',
  medicalLicensePicture: 'medicalLicensePicture',
  about: 'about',
  appointmentId: 'appointmentId'
};

exports.Prisma.WorkingHoursScalarFieldEnum = {
  id: 'id',
  day: 'day',
  startTime: 'startTime',
  endTime: 'endTime',
  doctorId: 'doctorId'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  image: 'image',
  title: 'title',
  amount: 'amount',
  delivery: 'delivery',
  description: 'description',
  howToUse: 'howToUse',
  quantity: 'quantity',
  productCategory: 'productCategory'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  value: 'value',
  productId: 'productId'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  image: 'image',
  title: 'title',
  amount: 'amount',
  delivery: 'delivery',
  quantity: 'quantity',
  userId: 'userId',
  productId: 'productId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  amount: 'amount'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalAmount: 'totalAmount',
  deliveryAddress: 'deliveryAddress',
  status: 'status',
  deliveryStatus: 'deliveryStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaveProductScalarFieldEnum = {
  id: 'id',
  image: 'image',
  title: 'title',
  amount: 'amount',
  delivery: 'delivery',
  userId: 'userId',
  productId: 'productId'
};

exports.Prisma.DiagnosticTestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  dateCreated: 'dateCreated',
  type: 'type'
};

exports.Prisma.SelectedTestScalarFieldEnum = {
  id: 'id',
  testName: 'testName',
  price: 'price',
  quantity: 'quantity',
  userId: 'userId',
  diagnosticTestId: 'diagnosticTestId'
};

exports.Prisma.ChatSessionsScalarFieldEnum = {
  session_id: 'session_id',
  user_id: 'user_id',
  doctor_id: 'doctor_id',
  created_at: 'created_at'
};

exports.Prisma.ChatMessagesScalarFieldEnum = {
  message_id: 'message_id',
  session_id: 'session_id',
  sender_id: 'sender_id',
  recipient_id: 'recipient_id',
  message: 'message',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.Period = exports.$Enums.Period = {
  Morning: 'Morning',
  Evening: 'Evening'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  Pending: 'Pending',
  Cancelled: 'Cancelled',
  Completed: 'Completed'
};

exports.productCategory = exports.$Enums.productCategory = {
  All_Product: 'All_Product',
  Drugs: 'Drugs',
  Female_Needs: 'Female_Needs',
  First_Aids_Equipment: 'First_Aids_Equipment'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Address: 'Address',
  Admin: 'Admin',
  TransactionPin: 'TransactionPin',
  TransactionHistory: 'TransactionHistory',
  Wallet: 'Wallet',
  Bvn: 'Bvn',
  SetupProfile: 'SetupProfile',
  Appointment: 'Appointment',
  Doctors: 'Doctors',
  WorkingHours: 'WorkingHours',
  Products: 'Products',
  Rating: 'Rating',
  CartItem: 'CartItem',
  OrderItem: 'OrderItem',
  Order: 'Order',
  SaveProduct: 'SaveProduct',
  DiagnosticTest: 'DiagnosticTest',
  SelectedTest: 'SelectedTest',
  ChatSessions: 'ChatSessions',
  ChatMessages: 'ChatMessages'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
