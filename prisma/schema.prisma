// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  dateOfBirth    String
  country        String
  phoneNumber    String
  schoolName     String?
  email          String          @unique
  password       String
  verified       Boolean?        @default(false)
  otp            Int?
  createdAt      DateTime        @default(now()) @db.Timestamp
  updatedAt      DateTime        @updatedAt
  isSuspended    Boolean?        @default(false)
  isDeleted      Boolean?        @default(false)
  Wallet         Wallet?
  Bvn            Bvn[]
  SetupProfile   SetupProfile?
  Appointment    Appointment[]
  Cart           CartItem[]
  TransactionPin TransactionPin?
}

model TransactionPin {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  pin     String
  user    Users? @relation(fields: [usersId], references: [id])
  usersId String @unique @db.ObjectId
}

model Wallet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  balance Int    @default(0)
  user    Users  @relation(fields: [usersId], references: [id])
  usersId String @unique @db.ObjectId
}

model Bvn {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  bvn     Int
  user    Users  @relation(fields: [usersId], references: [id])
  usersId String @db.ObjectId
}

model SetupProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  matricNumber String
  user         Users  @relation(fields: [usersId], references: [id])
  usersId      String @unique @db.ObjectId
}

model Appointment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  day             String
  time            String
  hasEnded        Boolean? @default(false)
  period          Period
  appointmentType String
  Doctors         Doctors  @relation(fields: [doctorsId], references: [id])
  user            Users    @relation(fields: [usersId], references: [id])
  usersId         String   @db.ObjectId
  doctorsId       String   @db.ObjectId
}

//doctors schemas 
model Doctors {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  Appointment   Appointment[]
  appointmentId String?       @db.ObjectId
}

model Products {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  image           String
  title           String
  amount          Int
  delivery        String
  description     String
  howToUse        String
  quantity        Int
  productCategory productCategory
  CartItem        CartItem[]
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  title     String
  amount    Int
  delivery  String
  quantity  String
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id])
}

enum productCategory {
  All_Product
  Drugs
  Female_Needs
  First_Aids_Equipment
}

enum Period {
  Morning
  Evening
}
