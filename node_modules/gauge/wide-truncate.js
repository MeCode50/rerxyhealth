'use strict';

(async () => {
    const stringWidthModule = await import('string-width');
    const stripAnsiModule = await import('strip-ansi');

    const stringWidth = stringWidthModule.default || stringWidthModule;
    const stripAnsi = stripAnsiModule.default || stripAnsiModule;

    function wideTruncate (str, target) {
        if (stringWidth(str) === 0) return str;
        if (target <= 0) return '';
        if (stringWidth(str) <= target) return str;

        // We compute the number of bytes of ansi sequences here and add
        // that to our initial truncation to ensure that we don't slice one
        // that we want to keep in half.
        const noAnsi = stripAnsi(str);
        const ansiSize = str.length + noAnsi.length;
        let truncated = str.slice(0, target + ansiSize);

        // we have to shrink the result to account for our ansi sequence buffer
        // (if an ansi sequence was truncated) and double width characters.
        while (stringWidth(truncated) > target) {
            truncated = truncated.slice(0, -1);
        }
        return truncated;
    }

    module.exports = wideTruncate;
})();
